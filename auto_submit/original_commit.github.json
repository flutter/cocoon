[
  {
    "sha": "0a801d301a75eddba8c1b0961e45c4e97ed8855d",
    "filename": "dashboard/analysis_options.yaml",
    "status": "modified",
    "additions": 1,
    "deletions": 0,
    "changes": 1,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Fanalysis_options.yaml",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Fanalysis_options.yaml",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Fanalysis_options.yaml?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -29,3 +29,4 @@ include: package:flutter_lints/flutter.yaml\n linter:\n   rules:\n     prefer_single_quotes: true\n+    require_trailing_commas: true"
  },
  {
    "sha": "4ae457f1ceb175873e368851e0bb025273cae849",
    "filename": "dashboard/lib/build_dashboard_page.dart",
    "status": "modified",
    "additions": 45,
    "deletions": 35,
    "changes": 80,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fbuild_dashboard_page.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fbuild_dashboard_page.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fbuild_dashboard_page.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -173,11 +173,12 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n     final ThemeData theme = Theme.of(context);\n     return <Widget>[\n       const Padding(\n-          padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n-          child: Text(\n-            'repo: ',\n-            textAlign: TextAlign.center,\n-          )),\n+        padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n+        child: Text(\n+          'repo: ',\n+          textAlign: TextAlign.center,\n+        ),\n+      ),\n       DropdownButton<String>(\n         key: const Key('repo dropdown'),\n         isExpanded: _smallScreen,\n@@ -208,11 +209,12 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n         }).toList(),\n       ),\n       const Padding(\n-          padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n-          child: Text(\n-            'branch: ',\n-            textAlign: TextAlign.center,\n-          )),\n+        padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n+        child: Text(\n+          'branch: ',\n+          textAlign: TextAlign.center,\n+        ),\n+      ),\n       DropdownButton<String>(\n         key: const Key('branch dropdown'),\n         isExpanded: _smallScreen,\n@@ -276,42 +278,49 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n     final List<PopupMenuEntry<String>> key = <PopupMenuEntry<String>>[];\n \n     for (final String status in TaskBox.statusColor.keys) {\n-      key.add(_getTaskKeyEntry(\n-        box: Container(color: TaskBox.statusColor[status]),\n-        description: status,\n-      ));\n+      key.add(\n+        _getTaskKeyEntry(\n+          box: Container(color: TaskBox.statusColor[status]),\n+          description: status,\n+        ),\n+      );\n       key.add(const PopupMenuDivider());\n     }\n \n-    key.add(_getTaskKeyEntry(\n-      box: Center(\n-        child: Container(\n-          width: TaskBox.cellSize * 0.8,\n-          height: TaskBox.cellSize * 0.8,\n-          decoration: BoxDecoration(\n+    key.add(\n+      _getTaskKeyEntry(\n+        box: Center(\n+          child: Container(\n+            width: TaskBox.cellSize * 0.8,\n+            height: TaskBox.cellSize * 0.8,\n+            decoration: BoxDecoration(\n               border: Border.all(\n-            width: 2.0,\n-            color: isDark ? Colors.white : Colors.black,\n-          )),\n+                width: 2.0,\n+                color: isDark ? Colors.white : Colors.black,\n+              ),\n+            ),\n+          ),\n         ),\n+        description: 'Flaky',\n       ),\n-      description: 'Flaky',\n-    ));\n+    );\n \n     key.add(const PopupMenuDivider());\n \n-    key.add(_getTaskKeyEntry(\n-      box: const Center(\n-        child: Text(\n-          '!',\n-          style: TextStyle(\n-            fontSize: 24.0,\n-            fontWeight: FontWeight.bold,\n+    key.add(\n+      _getTaskKeyEntry(\n+        box: const Center(\n+          child: Text(\n+            '!',\n+            style: TextStyle(\n+              fontSize: 24.0,\n+              fontWeight: FontWeight.bold,\n+            ),\n           ),\n         ),\n+        description: 'Ran more than once',\n       ),\n-      description: 'Ran more than once',\n-    ));\n+    );\n \n     key.add(const PopupMenuDivider());\n \n@@ -348,7 +357,8 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n     };\n \n     final Uri flutterIssueUrl = Uri.parse(\n-        'https://github.com/flutter/flutter/issues/new?assignees=&labels=team%3A+infra&template=6_infrastructure.md');\n+      'https://github.com/flutter/flutter/issues/new?assignees=&labels=team%3A+infra&template=6_infrastructure.md',\n+    );\n     final BuildState buildState = Provider.of<BuildState>(context);\n     buildState.updateCurrentRepoBranch(repo!, branch!);\n     return AnimatedBuilder("
  },
  {
    "sha": "6c9fe8c0722c267b40b69e1db57bc0d257b898e6",
    "filename": "dashboard/lib/index_page.dart",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Findex_page.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Findex_page.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Findex_page.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -41,17 +41,19 @@ class IndexPage extends StatelessWidget {\n               children: <Widget>[\n                 const HeaderText('Select a dashboard'),\n                 for (CocoonLink link in cocoonLinks)\n-                  Column(children: <Widget>[\n-                    IntrinsicWidth(\n-                      stepWidth: 80.0,\n-                      child: ElevatedButton.icon(\n-                        icon: link.icon!,\n-                        label: Text(link.name!.toUpperCase()),\n-                        onPressed: link.action,\n+                  Column(\n+                    children: <Widget>[\n+                      IntrinsicWidth(\n+                        stepWidth: 80.0,\n+                        child: ElevatedButton.icon(\n+                          icon: link.icon!,\n+                          label: Text(link.name!.toUpperCase()),\n+                          onPressed: link.action,\n+                        ),\n                       ),\n-                    ),\n-                    separator,\n-                  ])\n+                      separator,\n+                    ],\n+                  )\n               ],\n             ),\n           ),"
  },
  {
    "sha": "73034002b8a799098ff66c0564b185c72df2f934",
    "filename": "dashboard/lib/logic/brooks.dart",
    "status": "modified",
    "additions": 20,
    "deletions": 18,
    "changes": 38,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Flogic%2Fbrooks.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Flogic%2Fbrooks.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Flogic%2Fbrooks.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -43,24 +43,26 @@ class BrookSink<T> extends Brook<T> {\n           listener(event);\n         }\n       } catch (exception, stack) {\n-        FlutterError.reportError(FlutterErrorDetails(\n-          exception: exception,\n-          stack: stack,\n-          library: 'Flutter Dashboard',\n-          context: ErrorDescription('while sending event'),\n-          informationCollector: () sync* {\n-            yield DiagnosticsProperty<BrookSink<T>>(\n-              'The $runtimeType sending the event was',\n-              this,\n-              style: DiagnosticsTreeStyle.errorProperty,\n-            );\n-            yield DiagnosticsProperty<T>(\n-              'The $T event was',\n-              event,\n-              style: DiagnosticsTreeStyle.errorProperty,\n-            );\n-          },\n-        ));\n+        FlutterError.reportError(\n+          FlutterErrorDetails(\n+            exception: exception,\n+            stack: stack,\n+            library: 'Flutter Dashboard',\n+            context: ErrorDescription('while sending event'),\n+            informationCollector: () sync* {\n+              yield DiagnosticsProperty<BrookSink<T>>(\n+                'The $runtimeType sending the event was',\n+                this,\n+                style: DiagnosticsTreeStyle.errorProperty,\n+              );\n+              yield DiagnosticsProperty<T>(\n+                'The $T event was',\n+                event,\n+                style: DiagnosticsTreeStyle.errorProperty,\n+              );\n+            },\n+          ),\n+        );\n       }\n     }\n   }"
  },
  {
    "sha": "55c6e9f4d6577c5edac856a8f6a668f1de675b1d",
    "filename": "dashboard/lib/logic/links.dart",
    "status": "modified",
    "additions": 18,
    "deletions": 15,
    "changes": 33,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Flogic%2Flinks.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Flogic%2Flinks.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Flogic%2Flinks.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -24,23 +24,26 @@ List<CocoonLink> createCocoonLinks(BuildContext context) {\n       action: () => Navigator.pushReplacementNamed(context, BuildDashboardPage.routeName),\n     ),\n     CocoonLink(\n-        name: 'Framework Benchmarks',\n-        icon: const Icon(Icons.show_chart),\n-        action: () {\n-          launchUrl(Uri.parse('https://flutter-flutter-perf.skia.org/'));\n-        }),\n+      name: 'Framework Benchmarks',\n+      icon: const Icon(Icons.show_chart),\n+      action: () {\n+        launchUrl(Uri.parse('https://flutter-flutter-perf.skia.org/'));\n+      },\n+    ),\n     CocoonLink(\n-        name: 'Engine Benchmarks',\n-        icon: const Icon(Icons.show_chart),\n-        action: () {\n-          launchUrl(Uri.parse('https://flutter-engine-perf.skia.org/'));\n-        }),\n+      name: 'Engine Benchmarks',\n+      icon: const Icon(Icons.show_chart),\n+      action: () {\n+        launchUrl(Uri.parse('https://flutter-engine-perf.skia.org/'));\n+      },\n+    ),\n     CocoonLink(\n-        name: 'Source Code',\n-        icon: const Icon(Icons.code),\n-        action: () {\n-          launchUrl(Uri.parse('https://github.com/flutter/cocoon'));\n-        }),\n+      name: 'Source Code',\n+      icon: const Icon(Icons.code),\n+      action: () {\n+        launchUrl(Uri.parse('https://github.com/flutter/cocoon'));\n+      },\n+    ),\n   ];\n }\n "
  },
  {
    "sha": "e9a5153be6058201fd1c7ccea4302a09012946e7",
    "filename": "dashboard/lib/logic/task_grid_filter.dart",
    "status": "modified",
    "additions": 12,
    "deletions": 4,
    "changes": 16,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Flogic%2Ftask_grid_filter.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Flogic%2Ftask_grid_filter.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Flogic%2Ftask_grid_filter.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -187,9 +187,16 @@ class TaskGridFilter extends FilterPropertySource {\n   /// Convert the filter into a String map (with or without default values populated) that\n   /// can be used to reconstruct the filter using the [fromMap] constructor and/or inject\n   /// its data into a JSON file or URL query parameter list.\n-  Map<String, String> toMap({bool includeDefaults = true}) => Map<String, String>.fromEntries(_allProperties.entries\n-      .where((MapEntry<String, ValueFilterProperty<dynamic>> element) => includeDefaults || !element.value.isDefault)\n-      .map((MapEntry<String, ValueFilterProperty<dynamic>> e) => MapEntry<String, String>(e.key, e.value.stringValue)));\n+  Map<String, String> toMap({bool includeDefaults = true}) => Map<String, String>.fromEntries(\n+        _allProperties.entries\n+            .where(\n+              (MapEntry<String, ValueFilterProperty<dynamic>> element) => includeDefaults || !element.value.isDefault,\n+            )\n+            .map(\n+              (MapEntry<String, ValueFilterProperty<dynamic>> e) =>\n+                  MapEntry<String, String>(e.key, e.value.stringValue),\n+            ),\n+      );\n \n   /// A string useful for including in a URL as query parameters. The returned string will\n   /// include only non-default filter values separated by the URL parameter separator (`&`).\n@@ -243,7 +250,8 @@ class TaskGridFilter extends FilterPropertySource {\n     }\n     return other is TaskGridFilter &&\n         _allProperties.values.every(\n-            (ValueFilterProperty<dynamic> element) => element.value == other._allProperties[element.fieldName]!.value);\n+          (ValueFilterProperty<dynamic> element) => element.value == other._allProperties[element.fieldName]!.value,\n+        );\n   }\n \n   List<VoidCallback>? _listeners;"
  },
  {
    "sha": "b20d5079c22b44125750821f07eaa59ee86c63c8",
    "filename": "dashboard/lib/main.dart",
    "status": "modified",
    "additions": 7,
    "deletions": 6,
    "changes": 13,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fmain.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fmain.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fmain.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -79,12 +79,13 @@ class MyApp extends StatelessWidget {\n         final Uri uriData = Uri.parse(settings.name!);\n         if (uriData.path == BuildDashboardPage.routeName) {\n           return MaterialPageRoute<void>(\n-              settings: RouteSettings(name: uriData.toString()),\n-              builder: (BuildContext context) {\n-                return BuildDashboardPage(\n-                  queryParameters: uriData.queryParameters,\n-                );\n-              });\n+            settings: RouteSettings(name: uriData.toString()),\n+            builder: (BuildContext context) {\n+              return BuildDashboardPage(\n+                queryParameters: uriData.queryParameters,\n+              );\n+            },\n+          );\n         }\n         return null;\n       },"
  },
  {
    "sha": "3f72596fa049b2cdbdac668af9e343de9391e401",
    "filename": "dashboard/lib/service/appengine_cocoon.dart",
    "status": "modified",
    "additions": 23,
    "deletions": 16,
    "changes": 39,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fservice%2Fappengine_cocoon.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fservice%2Fappengine_cocoon.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fservice%2Fappengine_cocoon.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -60,7 +60,8 @@ class AppEngineCocoonService implements CocoonService {\n     try {\n       final Map<String, dynamic> jsonResponse = jsonDecode(response.body);\n       return CocoonResponse<List<CommitStatus>>.data(\n-          await compute<List<dynamic>, List<CommitStatus>>(_commitStatusesFromJson, jsonResponse['Statuses']));\n+        await compute<List<dynamic>, List<CommitStatus>>(_commitStatusesFromJson, jsonResponse['Statuses']),\n+      );\n     } catch (error) {\n       return CocoonResponse<List<CommitStatus>>.error(error.toString());\n     }\n@@ -130,9 +131,11 @@ class AppEngineCocoonService implements CocoonService {\n       final List<Branch> branches = <Branch>[];\n       for (final Map<String, dynamic> jsonBranch in jsonResponse) {\n         final Map<String, dynamic> branchInfo = jsonBranch['branch'];\n-        branches.add(Branch()\n-          ..branch = branchInfo['branch']\n-          ..repository = branchInfo['repository'].split('/')[1]);\n+        branches.add(\n+          Branch()\n+            ..branch = branchInfo['branch']\n+            ..repository = branchInfo['repository'].split('/')[1],\n+        );\n       }\n       return CocoonResponse<List<Branch>>.data(branches);\n     } catch (error) {\n@@ -163,14 +166,16 @@ class AppEngineCocoonService implements CocoonService {\n \n     /// This endpoint only returns a status code.\n     final Uri postResetTaskUrl = apiEndpoint('/api/reset-prod-task');\n-    final http.Response response = await _client.post(postResetTaskUrl,\n-        headers: <String, String>{\n-          'X-Flutter-IdToken': idToken,\n-        },\n-        body: jsonEncode(<String, String>{\n-          'Key': task.key.child.name,\n-          'Repo': repo,\n-        }));\n+    final http.Response response = await _client.post(\n+      postResetTaskUrl,\n+      headers: <String, String>{\n+        'X-Flutter-IdToken': idToken,\n+      },\n+      body: jsonEncode(<String, String>{\n+        'Key': task.key.child.name,\n+        'Repo': repo,\n+      }),\n+    );\n \n     if (response.statusCode == HttpStatus.ok) {\n       return const CocoonResponse<bool>.data(true);\n@@ -210,10 +215,12 @@ class AppEngineCocoonService implements CocoonService {\n \n     for (final Map<String, dynamic> jsonCommitStatus in jsonCommitStatuses!) {\n       final Map<String, dynamic> checklist = jsonCommitStatus['Checklist'];\n-      statuses.add(CommitStatus()\n-        ..commit = _commitFromJson(checklist)\n-        ..branch = _branchFromJson(checklist)!\n-        ..tasks.addAll(_tasksFromStagesJson(jsonCommitStatus['Stages'])));\n+      statuses.add(\n+        CommitStatus()\n+          ..commit = _commitFromJson(checklist)\n+          ..branch = _branchFromJson(checklist)!\n+          ..tasks.addAll(_tasksFromStagesJson(jsonCommitStatus['Stages'])),\n+      );\n     }\n \n     return statuses;"
  },
  {
    "sha": "bf081e60ba3d0137cd2c6956d07e8bb84c5914f2",
    "filename": "dashboard/lib/service/dev_cocoon.dart",
    "status": "modified",
    "additions": 15,
    "deletions": 8,
    "changes": 23,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fservice%2Fdev_cocoon.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fservice%2Fdev_cocoon.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fservice%2Fdev_cocoon.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -129,12 +129,16 @@ class DevelopmentCocoonService implements CocoonService {\n   Future<CocoonResponse<List<Branch>>> fetchFlutterBranches() async {\n     List<Branch> fakeBranches = <Branch>[];\n     for (String repo in _repos) {\n-      fakeBranches.add(Branch()\n-        ..repository = repo\n-        ..branch = defaultBranches[repo]!);\n-      fakeBranches.add(Branch()\n-        ..repository = repo\n-        ..branch = '$repo-release');\n+      fakeBranches.add(\n+        Branch()\n+          ..repository = repo\n+          ..branch = defaultBranches[repo]!,\n+      );\n+      fakeBranches.add(\n+        Branch()\n+          ..repository = repo\n+          ..branch = '$repo-release',\n+      );\n     }\n     return CocoonResponse<List<Branch>>.data(fakeBranches);\n   }\n@@ -147,7 +151,8 @@ class DevelopmentCocoonService implements CocoonService {\n   @override\n   Future<CocoonResponse<bool>> rerunTask(Task task, String? accessToken, String repo) async {\n     return const CocoonResponse<bool>.error(\n-        'Unable to retry against fake data. Try building the app to use prod data.');\n+      'Unable to retry against fake data. Try building the app to use prod data.',\n+    );\n   }\n \n   static const int _commitGap = 2 * 60 * 1000; // 2 minutes between commits\n@@ -201,7 +206,9 @@ class DevelopmentCocoonService implements CocoonService {\n       throw Exception('Add ${commit.repository} to _repoTaskCount in DevCocoonService');\n     }\n     return List<Task>.generate(\n-        _repoTaskCount[commit.repository]!, (int i) => _createFakeTask(commitTimestamp, i, StageName.luci, random));\n+      _repoTaskCount[commit.repository]!,\n+      (int i) => _createFakeTask(commitTimestamp, i, StageName.luci, random),\n+    );\n   }\n \n   static const List<String> _statuses = <String>["
  },
  {
    "sha": "62f32ac13826256e03debfb770ac51154f77e74c",
    "filename": "dashboard/lib/widgets/lattice.dart",
    "status": "modified",
    "additions": 22,
    "deletions": 18,
    "changes": 40,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Flattice.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Flattice.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Flattice.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -215,15 +215,17 @@ class _LatticeBodyElement extends RenderObjectElement implements _LatticeDelegat\n         debugWidgetBuilderValue(widget, newWidget);\n       } catch (exception, stack) {\n         newWidget = ErrorWidget.builder(\n-          _debugReportException(FlutterErrorDetails(\n-            context: ErrorDescription('building cell $coordinate for $widget'),\n-            exception: exception,\n-            stack: stack,\n-            library: 'Flutter Dashboard',\n-            informationCollector: () sync* {\n-              yield DiagnosticsDebugCreator(DebugCreator(this));\n-            },\n-          )),\n+          _debugReportException(\n+            FlutterErrorDetails(\n+              context: ErrorDescription('building cell $coordinate for $widget'),\n+              exception: exception,\n+              stack: stack,\n+              library: 'Flutter Dashboard',\n+              informationCollector: () sync* {\n+                yield DiagnosticsDebugCreator(DebugCreator(this));\n+              },\n+            ),\n+          ),\n         );\n       }\n       Element? oldElement;\n@@ -244,15 +246,17 @@ class _LatticeBodyElement extends RenderObjectElement implements _LatticeDelegat\n         newElement = updateChild(oldElement, newWidget, coordinate);\n       } catch (e, stack) {\n         newWidget = ErrorWidget.builder(\n-          _debugReportException(FlutterErrorDetails(\n-            context: ErrorDescription('building widget $newWidget at cell $coordinate for $widget'),\n-            exception: e,\n-            stack: stack,\n-            library: 'Flutter Dashboard',\n-            informationCollector: () sync* {\n-              yield DiagnosticsDebugCreator(DebugCreator(this));\n-            },\n-          )),\n+          _debugReportException(\n+            FlutterErrorDetails(\n+              context: ErrorDescription('building widget $newWidget at cell $coordinate for $widget'),\n+              exception: e,\n+              stack: stack,\n+              library: 'Flutter Dashboard',\n+              informationCollector: () sync* {\n+                yield DiagnosticsDebugCreator(DebugCreator(this));\n+              },\n+            ),\n+          ),\n         );\n         newElement = updateChild(null, newWidget, slot);\n       }"
  },
  {
    "sha": "b78024d67d0b119748257541fc2226df4c7b5873",
    "filename": "dashboard/lib/widgets/luci_task_attempt_summary.dart",
    "status": "modified",
    "additions": 5,
    "deletions": 4,
    "changes": 9,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Fluci_task_attempt_summary.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Fluci_task_attempt_summary.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Fluci_task_attempt_summary.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -29,10 +29,11 @@ class LuciTaskAttemptSummary extends StatelessWidget {\n     return ListBody(\n       children: List<Widget>.generate(buildNumberList.length, (int i) {\n         return ElevatedButton(\n-            child: Text('OPEN LOG FOR BUILD #${buildNumberList[i]}'),\n-            onPressed: () {\n-              launchUrl(_luciProdLogUrl(task.builderName, buildNumberList[i]));\n-            });\n+          child: Text('OPEN LOG FOR BUILD #${buildNumberList[i]}'),\n+          onPressed: () {\n+            launchUrl(_luciProdLogUrl(task.builderName, buildNumberList[i]));\n+          },\n+        );\n       }),\n     );\n   }"
  },
  {
    "sha": "1e34ef6e3e78881368fc04104c1671ab1a1f8c9c",
    "filename": "dashboard/lib/widgets/sign_in_button.dart",
    "status": "modified",
    "additions": 12,
    "deletions": 10,
    "changes": 22,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Fsign_in_button.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Fsign_in_button.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Fsign_in_button.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -52,17 +52,19 @@ class SignInButton extends StatelessWidget {\n               }\n             },\n             iconSize: Scaffold.of(context).appBarMaxHeight,\n-            icon: Builder(builder: (BuildContext context) {\n-              if (!kIsWeb && Platform.environment.containsKey('FLUTTER_TEST')) {\n-                return Padding(\n-                  padding: const EdgeInsets.only(right: 10.0, top: 20.0),\n-                  child: Text(authService.user!.email),\n+            icon: Builder(\n+              builder: (BuildContext context) {\n+                if (!kIsWeb && Platform.environment.containsKey('FLUTTER_TEST')) {\n+                  return Padding(\n+                    padding: const EdgeInsets.only(right: 10.0, top: 20.0),\n+                    child: Text(authService.user!.email),\n+                  );\n+                }\n+                return GoogleUserCircleAvatar(\n+                  identity: authService.user!,\n                 );\n-              }\n-              return GoogleUserCircleAvatar(\n-                identity: authService.user!,\n-              );\n-            }),\n+              },\n+            ),\n           );\n         }\n         return TextButton("
  },
  {
    "sha": "afc1d7684dddf651f51a556b6f7e2539a1f4f46f",
    "filename": "dashboard/lib/widgets/task_grid.dart",
    "status": "modified",
    "additions": 17,
    "deletions": 13,
    "changes": 30,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Ftask_grid.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Ftask_grid.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Ftask_grid.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -269,8 +269,10 @@ class _TaskGridState extends State<TaskGrid> {\n     return <List<LatticeCell>>[\n       <LatticeCell>[\n         const LatticeCell(),\n-        ...tasks.map<LatticeCell>((QualifiedTask task) =>\n-            LatticeCell(builder: (BuildContext context) => TaskIcon(qualifiedTask: task), taskName: task.stage)),\n+        ...tasks.map<LatticeCell>(\n+          (QualifiedTask task) =>\n+              LatticeCell(builder: (BuildContext context) => TaskIcon(qualifiedTask: task), taskName: task.stage),\n+        ),\n       ],\n       ...rows.map<List<LatticeCell>>(\n         (_Row row) => <LatticeCell>[\n@@ -323,17 +325,19 @@ class _TaskGridState extends State<TaskGrid> {\n \n   List<LatticeCell> _generateLoadingRow(int length) {\n     return <LatticeCell>[\n-      LatticeCell(builder: (BuildContext context) {\n-        return FittedBox(\n-          fit: BoxFit.contain,\n-          child: Padding(\n-            padding: const EdgeInsets.all(12),\n-            child: widget.useAnimatedLoading\n-                ? const RepaintBoundary(child: CircularProgressIndicator())\n-                : const Icon(Icons.refresh),\n-          ),\n-        );\n-      }),\n+      LatticeCell(\n+        builder: (BuildContext context) {\n+          return FittedBox(\n+            fit: BoxFit.contain,\n+            child: Padding(\n+              padding: const EdgeInsets.all(12),\n+              child: widget.useAnimatedLoading\n+                  ? const RepaintBoundary(child: CircularProgressIndicator())\n+                  : const Icon(Icons.refresh),\n+            ),\n+          );\n+        },\n+      ),\n       for (int index = 0; index < max(length, _loadingMessage.length); index++)\n         LatticeCell(\n           builder: (BuildContext context) {"
  },
  {
    "sha": "d156a21e68cd5a811a33b4d185beb8ca6edd6855",
    "filename": "dashboard/lib/widgets/task_overlay.dart",
    "status": "modified",
    "additions": 3,
    "deletions": 2,
    "changes": 5,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Ftask_overlay.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Flib%2Fwidgets%2Ftask_overlay.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Ftask_overlay.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -284,8 +284,9 @@ class TaskOverlayContents extends StatelessWidget {\n                   Padding(\n                     padding: const EdgeInsets.only(left: 8.0),\n                     child: ProgressButton(\n-                        child: const Text('VIEW LOGS'),\n-                        onPressed: () => launchUrl(Uri.parse(logUrl(task, commit: commit)))),\n+                      child: const Text('VIEW LOGS'),\n+                      onPressed: () => launchUrl(Uri.parse(logUrl(task, commit: commit))),\n+                    ),\n                   ),\n                   if (qualifiedTask.isLuci)\n                     Padding("
  },
  {
    "sha": "56535464a410a3f16a62773d857bab32f2a76ba0",
    "filename": "dashboard/pubspec.lock",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Fpubspec.lock",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Fpubspec.lock",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Fpubspec.lock?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -454,7 +454,7 @@ packages:\n       name: source_span\n       url: \"https://pub.dartlang.org\"\n     source: hosted\n-    version: \"1.9.0\"\n+    version: \"1.9.1\"\n   stack_trace:\n     dependency: transitive\n     description:"
  },
  {
    "sha": "37e02283bd0d67c69ffffe56fa56ceceaf47c294",
    "filename": "dashboard/test/build_dashboard_page_test.dart",
    "status": "modified",
    "additions": 33,
    "deletions": 21,
    "changes": 54,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fbuild_dashboard_page_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fbuild_dashboard_page_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fbuild_dashboard_page_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -53,14 +53,18 @@ void main() {\n     throwOnMissingStub(fakeCocoonService);\n     when(fakeCocoonService.fetchFlutterBranches()).thenAnswer((_) => Completer<CocoonResponse<List<Branch>>>().future);\n     when(fakeCocoonService.fetchRepos()).thenAnswer((_) => Completer<CocoonResponse<List<String>>>().future);\n-    when(fakeCocoonService.fetchCommitStatuses(\n-      branch: anyNamed('branch'),\n-      repo: anyNamed('repo'),\n-    )).thenAnswer((_) => Completer<CocoonResponse<List<CommitStatus>>>().future);\n-    when(fakeCocoonService.fetchTreeBuildStatus(\n-      branch: anyNamed('branch'),\n-      repo: anyNamed('repo'),\n-    )).thenAnswer((_) => Completer<CocoonResponse<BuildStatusResponse>>().future);\n+    when(\n+      fakeCocoonService.fetchCommitStatuses(\n+        branch: anyNamed('branch'),\n+        repo: anyNamed('repo'),\n+      ),\n+    ).thenAnswer((_) => Completer<CocoonResponse<List<CommitStatus>>>().future);\n+    when(\n+      fakeCocoonService.fetchTreeBuildStatus(\n+        branch: anyNamed('branch'),\n+        repo: anyNamed('repo'),\n+      ),\n+    ).thenAnswer((_) => Completer<CocoonResponse<BuildStatusResponse>>().future);\n \n     final BuildState buildState = BuildState(\n       cocoonService: fakeCocoonService,\n@@ -456,10 +460,12 @@ void main() {\n \n   testWidgets('ensure smooth transition between invalid states', (WidgetTester tester) async {\n     final BuildState fakeBuildState = FakeBuildState()..authService = fakeAuthService;\n-    BuildDashboardPage controlledBuildDashboardPage = const BuildDashboardPage(queryParameters: {\n-      'repo': 'flutter',\n-      'branch': 'flutter-release',\n-    });\n+    BuildDashboardPage controlledBuildDashboardPage = const BuildDashboardPage(\n+      queryParameters: {\n+        'repo': 'flutter',\n+        'branch': 'flutter-release',\n+      },\n+    );\n \n     await tester.pumpWidget(\n       MaterialApp(\n@@ -475,18 +481,24 @@ void main() {\n \n     expect(find.byType(dropdownButtonType), findsNWidgets(2));\n     // simulate a url request, which retriggers a rebuild of the widget\n-    controlledBuildDashboardPage = const BuildDashboardPage(queryParameters: {\n-      'repo': 'engine',\n-    });\n-    expect((tester.widget(find.byKey(const Key('branch dropdown'))) as DropdownButton).value,\n-        equals('flutter-release')); //invalid state: engine + flutter-release\n+    controlledBuildDashboardPage = const BuildDashboardPage(\n+      queryParameters: {\n+        'repo': 'engine',\n+      },\n+    );\n+    expect(\n+      (tester.widget(find.byKey(const Key('branch dropdown'))) as DropdownButton).value,\n+      equals('flutter-release'),\n+    ); //invalid state: engine + flutter-release\n     await tester.pump(); //an invalid state will generate delayed network responses\n \n     //if a delayed network request come in, from a previous invalid state: cocoon + engine - release, no exceptions should be raised\n-    controlledBuildDashboardPage = const BuildDashboardPage(queryParameters: {\n-      'repo': 'cocoon',\n-      'branch': 'engine-release',\n-    });\n+    controlledBuildDashboardPage = const BuildDashboardPage(\n+      queryParameters: {\n+        'repo': 'cocoon',\n+        'branch': 'engine-release',\n+      },\n+    );\n   });\n \n   testWidgets('shows branch and repo dropdown button in settings when screen is small', (WidgetTester tester) async {"
  },
  {
    "sha": "b2d05d1ecd2358e8eefbff7836d1081bd7ae7fab",
    "filename": "dashboard/test/index_page_test.dart",
    "status": "modified",
    "additions": 7,
    "deletions": 4,
    "changes": 11,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Findex_page_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Findex_page_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Findex_page_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -28,11 +28,14 @@ void main() {\n   });\n \n   testWidgets('shows menu for navigation drawer', (WidgetTester tester) async {\n-    await tester.pumpWidget(const MaterialApp(\n+    await tester.pumpWidget(\n+      const MaterialApp(\n         home: FakeInserter(\n-      signedIn: false,\n-      child: IndexPage(),\n-    )));\n+          signedIn: false,\n+          child: IndexPage(),\n+        ),\n+      ),\n+    );\n \n     expect(find.byIcon(Icons.menu), findsOneWidget);\n "
  },
  {
    "sha": "e460c9e86b0b36823ad92bee95dc74ba69b52b64",
    "filename": "dashboard/test/logic/qualified_task_test.dart",
    "status": "modified",
    "additions": 16,
    "deletions": 9,
    "changes": 25,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Flogic%2Fqualified_task_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Flogic%2Fqualified_task_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Flogic%2Fqualified_task_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -19,11 +19,14 @@ void main() {\n     final Task cirrusTask = Task()..stageName = 'cirrus';\n \n     expect(\n-        logUrl(cirrusTask,\n-            commit: Commit()\n-              ..sha = 'abc123'\n-              ..branch = 'master'),\n-        'https://cirrus-ci.com/build/flutter/flutter/abc123?branch=master');\n+      logUrl(\n+        cirrusTask,\n+        commit: Commit()\n+          ..sha = 'abc123'\n+          ..branch = 'master',\n+      ),\n+      'https://cirrus-ci.com/build/flutter/flutter/abc123?branch=master',\n+    );\n \n     expect(logUrl(cirrusTask), 'https://cirrus-ci.com/github/flutter/flutter/master');\n \n@@ -37,15 +40,19 @@ void main() {\n       ..name = 'abc'\n       ..builderName = 'def';\n \n-    expect(QualifiedTask.fromTask(luciTask).sourceConfigurationUrl,\n-        'https://ci.chromium.org/p/flutter/builders/luci.flutter.prod/def');\n+    expect(\n+      QualifiedTask.fromTask(luciTask).sourceConfigurationUrl,\n+      'https://ci.chromium.org/p/flutter/builders/luci.flutter.prod/def',\n+    );\n   });\n \n   test('QualifiedTask.sourceConfigurationUrl for cirrus', () {\n     final Task cirrusTask = Task()..stageName = 'cirrus';\n \n-    expect(QualifiedTask.fromTask(cirrusTask).sourceConfigurationUrl,\n-        'https://cirrus-ci.com/github/flutter/flutter/master');\n+    expect(\n+      QualifiedTask.fromTask(cirrusTask).sourceConfigurationUrl,\n+      'https://cirrus-ci.com/github/flutter/flutter/master',\n+    );\n   });\n \n   test('QualifiedTask.sourceConfigurationUrl for google test', () {"
  },
  {
    "sha": "a63eba6fb4c111e068a0745fd98f66d076b8a757",
    "filename": "dashboard/test/logic/task_grid_filter_test.dart",
    "status": "modified",
    "additions": 18,
    "deletions": 11,
    "changes": 29,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Flogic%2Ftask_grid_filter_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Flogic%2Ftask_grid_filter_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Flogic%2Ftask_grid_filter_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -51,10 +51,14 @@ void main() {\n   test('map constructor result matches field setters', () {\n     expect(TaskGridFilter.fromMap(<String, String>{}), TaskGridFilter());\n     expect(TaskGridFilter.fromMap(<String, String>{'taskFilter': 'foo'}), TaskGridFilter()..taskFilter = RegExp('foo'));\n-    expect(TaskGridFilter.fromMap(<String, String>{'authorFilter': 'foo'}),\n-        TaskGridFilter()..authorFilter = RegExp('foo'));\n-    expect(TaskGridFilter.fromMap(<String, String>{'messageFilter': 'foo'}),\n-        TaskGridFilter()..messageFilter = RegExp('foo'));\n+    expect(\n+      TaskGridFilter.fromMap(<String, String>{'authorFilter': 'foo'}),\n+      TaskGridFilter()..authorFilter = RegExp('foo'),\n+    );\n+    expect(\n+      TaskGridFilter.fromMap(<String, String>{'messageFilter': 'foo'}),\n+      TaskGridFilter()..messageFilter = RegExp('foo'),\n+    );\n     expect(TaskGridFilter.fromMap(<String, String>{'hashFilter': 'foo'}), TaskGridFilter()..hashFilter = RegExp('foo'));\n     expect(TaskGridFilter.fromMap(<String, String>{'showMac': 'false'}), TaskGridFilter()..showMac = false);\n     expect(TaskGridFilter.fromMap(<String, String>{'showStaging': 'false'}), TaskGridFilter()..showStaging = false);\n@@ -116,8 +120,10 @@ void main() {\n       expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'Staging_build_linux task')), false);\n       expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'Staging_build_mac task')), false);\n       expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'Linux_android staging_build')), true);\n-      expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'linux_android_staging_build_linux task')),\n-          true);\n+      expect(\n+        filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'linux_android_staging_build_linux task')),\n+        true,\n+      );\n     }\n   });\n \n@@ -164,11 +170,12 @@ void main() {\n     }\n   });\n \n-  void testStage(\n-      {required String taskName,\n-      required String fieldName,\n-      required TaskGridFilter trueFilter,\n-      required TaskGridFilter falseFilter}) {\n+  void testStage({\n+    required String taskName,\n+    required String fieldName,\n+    required TaskGridFilter trueFilter,\n+    required TaskGridFilter falseFilter,\n+  }) {\n     final TaskGridFilter trueFilterMap = TaskGridFilter.fromMap(<String, String>{fieldName: 'true'});\n     final TaskGridFilter falseFilterMap = TaskGridFilter.fromMap(<String, String>{fieldName: 'false'});\n "
  },
  {
    "sha": "93b39f4d8120db308a933737f317903563c44154",
    "filename": "dashboard/test/service/appengine_cocoon_test.dart",
    "status": "modified",
    "additions": 112,
    "deletions": 74,
    "changes": 186,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fservice%2Fappengine_cocoon_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fservice%2Fappengine_cocoon_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fservice%2Fappengine_cocoon_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -25,14 +25,18 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response(luciJsonGetStatsResponse, 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response(luciJsonGetStatsResponse, 200);\n+        }),\n+      );\n     });\n \n     test('should return CocoonResponse<List<CommitStatus>>', () {\n       expect(\n-          service.fetchCommitStatuses(repo: 'engine'), const TypeMatcher<Future<CocoonResponse<List<CommitStatus>>>>());\n+        service.fetchCommitStatuses(repo: 'engine'),\n+        const TypeMatcher<Future<CocoonResponse<List<CommitStatus>>>>(),\n+      );\n     });\n \n     test('should return expected List<CommitStatus>', () async {\n@@ -48,24 +52,26 @@ void main() {\n           ..authorAvatarUrl = 'https://flutter.dev'\n           ..repository = 'flutter/cocoon'\n           ..branch = 'master')\n-        ..tasks.add(Task()\n-          ..key = (RootKey()..child = (Key()..name = 'taskKey1'))\n-          ..createTimestamp = Int64(1569353940885)\n-          ..startTimestamp = Int64(1569354594672)\n-          ..endTimestamp = Int64(1569354700642)\n-          ..name = 'linux'\n-          ..attempts = 1\n-          ..isFlaky = false\n-          ..timeoutInMinutes = 0\n-          ..reason = ''\n-          ..requiredCapabilities.add('[linux]')\n-          ..reservedForAgentId = ''\n-          ..stageName = 'chromebot'\n-          ..status = 'Succeeded'\n-          ..isTestFlaky = false\n-          ..buildNumberList = '123'\n-          ..builderName = 'Linux'\n-          ..luciBucket = 'luci.flutter.try');\n+        ..tasks.add(\n+          Task()\n+            ..key = (RootKey()..child = (Key()..name = 'taskKey1'))\n+            ..createTimestamp = Int64(1569353940885)\n+            ..startTimestamp = Int64(1569354594672)\n+            ..endTimestamp = Int64(1569354700642)\n+            ..name = 'linux'\n+            ..attempts = 1\n+            ..isFlaky = false\n+            ..timeoutInMinutes = 0\n+            ..reason = ''\n+            ..requiredCapabilities.add('[linux]')\n+            ..reservedForAgentId = ''\n+            ..stageName = 'chromebot'\n+            ..status = 'Succeeded'\n+            ..isTestFlaky = false\n+            ..buildNumberList = '123'\n+            ..builderName = 'Linux'\n+            ..luciBucket = 'luci.flutter.try',\n+        );\n \n       expect(statuses.data!.length, 1);\n       expect(statuses.data!.first, expectedStatus);\n@@ -90,14 +96,18 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response(jsonBuildStatusTrueResponse, 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response(jsonBuildStatusTrueResponse, 200);\n+        }),\n+      );\n     });\n \n     test('should return CocoonResponse<bool>', () {\n-      expect(service.fetchTreeBuildStatus(repo: 'engine'),\n-          const TypeMatcher<Future<CocoonResponse<BuildStatusResponse>>>());\n+      expect(\n+        service.fetchTreeBuildStatus(repo: 'engine'),\n+        const TypeMatcher<Future<CocoonResponse<BuildStatusResponse>>>(),\n+      );\n     });\n \n     test('data should be true when given Succeeded', () async {\n@@ -107,9 +117,11 @@ void main() {\n     });\n \n     test('data should be false when given Failed', () async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response(jsonBuildStatusFalseResponse, 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response(jsonBuildStatusFalseResponse, 200);\n+        }),\n+      );\n       final CocoonResponse<BuildStatusResponse> treeBuildStatus = await service.fetchTreeBuildStatus(repo: 'engine');\n \n       expect(treeBuildStatus.data!.buildStatus, EnumBuildStatus.failure);\n@@ -135,9 +147,11 @@ void main() {\n     late Task task;\n \n     setUp(() {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response('', 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response('', 200);\n+        }),\n+      );\n       task = Task()\n         ..key = RootKey()\n         ..stageName = StageName.luci;\n@@ -151,45 +165,53 @@ void main() {\n     test('should set error in response if task key is null', () async {\n       final CocoonResponse<bool> response = await service.rerunTask(task, null, 'engine');\n       expect(\n-          response.error,\n-          allOf(<Matcher>[\n-            isNotNull,\n-            contains('Sign in to trigger reruns'),\n-          ]));\n+        response.error,\n+        allOf(<Matcher>[\n+          isNotNull,\n+          contains('Sign in to trigger reruns'),\n+        ]),\n+      );\n     });\n \n     test('should set error in response if bad status code is returned', () async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response('internal server error', 500);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response('internal server error', 500);\n+        }),\n+      );\n \n       final CocoonResponse<bool> response = await service.rerunTask(task, 'fakeAccessToken', 'engine');\n       expect(\n-          response.error,\n-          allOf(<Matcher>[\n-            isNotNull,\n-            contains('HTTP Code: 500, internal server error'),\n-          ]));\n+        response.error,\n+        allOf(<Matcher>[\n+          isNotNull,\n+          contains('HTTP Code: 500, internal server error'),\n+        ]),\n+      );\n     });\n   });\n \n   group('AppEngine CocoonService refresh github commits', () {\n     late AppEngineCocoonService service;\n \n     setUp(() {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response('', 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response('', 200);\n+        }),\n+      );\n     });\n \n     test('should return true if request succeeds', () async {\n       expect(await service.vacuumGitHubCommits('fakeIdToken'), true);\n     });\n \n     test('should return false if request failed', () async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response('', 500);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response('', 500);\n+        }),\n+      );\n       expect(await service.vacuumGitHubCommits('fakeIdToken'), false);\n     });\n   });\n@@ -198,9 +220,11 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response(jsonGetBranchesResponse, 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response(jsonGetBranchesResponse, 200);\n+        }),\n+      );\n     });\n \n     test('should return CocoonResponse<List<Branch>>', () {\n@@ -212,15 +236,20 @@ void main() {\n \n       expect(branches.data!.length, 2);\n       expect(\n-          branches.data,\n-          allOf([\n-            contains(Branch()\n+        branches.data,\n+        allOf([\n+          contains(\n+            Branch()\n               ..repository = 'flutter'\n-              ..branch = 'branch-framework-release'),\n-            contains(Branch()\n+              ..branch = 'branch-framework-release',\n+          ),\n+          contains(\n+            Branch()\n               ..repository = 'engine'\n-              ..branch = 'branch-engine-release')\n-          ]));\n+              ..branch = 'branch-engine-release',\n+          )\n+        ]),\n+      );\n     });\n \n     test('should have error if given non-200 response', () async {\n@@ -242,9 +271,11 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(client: MockClient((Request request) async {\n-        return Response(jsonGetReposResponse, 200);\n-      }));\n+      service = AppEngineCocoonService(\n+        client: MockClient((Request request) async {\n+          return Response(jsonGetReposResponse, 200);\n+        }),\n+      );\n     });\n \n     test('data should be expected list of branches', () async {\n@@ -273,28 +304,35 @@ void main() {\n   });\n \n   group('AppEngine CocoonService apiEndpoint', () {\n-    final AppEngineCocoonService service = AppEngineCocoonService(client: MockClient((Request request) async {\n-      return Response('{\"Token\": \"abc123\"}', 200);\n-    }));\n+    final AppEngineCocoonService service = AppEngineCocoonService(\n+      client: MockClient((Request request) async {\n+        return Response('{\"Token\": \"abc123\"}', 200);\n+      }),\n+    );\n \n     test('handles url suffix', () {\n       expect(service.apiEndpoint('/test').toString(), '$baseApiUrl/test');\n     });\n \n     test('single query parameter', () {\n-      expect(service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value'}).toString(),\n-          '$baseApiUrl/test?key=value');\n+      expect(\n+        service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value'}).toString(),\n+        '$baseApiUrl/test?key=value',\n+      );\n     });\n \n     test('multiple query parameters', () {\n       expect(\n-          service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value', 'another': 'test'}).toString(),\n-          '$baseApiUrl/test?key=value&another=test');\n+        service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value', 'another': 'test'}).toString(),\n+        '$baseApiUrl/test?key=value&another=test',\n+      );\n     });\n \n     test('query parameter with null value', () {\n-      expect(service.apiEndpoint('/test', queryParameters: <String, String?>{'key': null}).toString(),\n-          '$baseApiUrl/test?key');\n+      expect(\n+        service.apiEndpoint('/test', queryParameters: <String, String?>{'key': null}).toString(),\n+        '$baseApiUrl/test?key',\n+      );\n     });\n \n     /// This test requires runs on different platforms."
  },
  {
    "sha": "16f157b767f922cd451a2c8289af6c7ce15a227d",
    "filename": "dashboard/test/service/google_authentication_test.dart",
    "status": "modified",
    "additions": 4,
    "deletions": 2,
    "changes": 6,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fservice%2Fgoogle_authentication_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fservice%2Fgoogle_authentication_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fservice%2Fgoogle_authentication_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -85,8 +85,10 @@ void main() {\n       expect(authService.user!.displayName, 'Dr. Test');\n       expect(authService.user!.email, 'test@flutter.dev');\n       expect(authService.user!.id, 'test123');\n-      expect(authService.user!.photoUrl,\n-          'https://lh3.googleusercontent.com/-ukEAtRyRhw8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfhID9XACtdb9q_xK43VSXQvBV11Q.CMID');\n+      expect(\n+        authService.user!.photoUrl,\n+        'https://lh3.googleusercontent.com/-ukEAtRyRhw8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfhID9XACtdb9q_xK43VSXQvBV11Q.CMID',\n+      );\n     });\n \n     test('id token available with logged in user', () async {"
  },
  {
    "sha": "68ae1d10c9dec0dc029538c9a94e0890883d2e4e",
    "filename": "dashboard/test/state/build_test.dart",
    "status": "modified",
    "additions": 31,
    "deletions": 20,
    "changes": 51,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fstate%2Fbuild_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fstate%2Fbuild_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fstate%2Fbuild_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -33,15 +33,18 @@ void main() {\n       when(mockCocoonService.fetchCommitStatuses(branch: anyNamed('branch'), repo: anyNamed('repo')))\n           .thenAnswer((dynamic _) async => CocoonResponse<List<CommitStatus>>.data(<CommitStatus>[setupCommitStatus]));\n       when(mockCocoonService.fetchTreeBuildStatus(branch: anyNamed('branch'), repo: anyNamed('repo'))).thenAnswer(\n-          (_) async =>\n-              CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success));\n+        (_) async =>\n+            CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success),\n+      );\n       when(mockCocoonService.fetchRepos())\n           .thenAnswer((_) async => const CocoonResponse<List<String>>.data(<String>['flutter']));\n-      when(mockCocoonService.fetchFlutterBranches()).thenAnswer((_) async => CocoonResponse<List<Branch>>.data(<Branch>[\n-            Branch()\n-              ..branch = defaultBranch\n-              ..repository = 'flutter'\n-          ]));\n+      when(mockCocoonService.fetchFlutterBranches()).thenAnswer(\n+        (_) async => CocoonResponse<List<Branch>>.data(<Branch>[\n+          Branch()\n+            ..branch = defaultBranch\n+            ..repository = 'flutter'\n+        ]),\n+      );\n     });\n \n     tearDown(() {\n@@ -257,11 +260,13 @@ void main() {\n \n       expect(buildState.statuses, <CommitStatus?>[setupCommitStatus]);\n \n-      when(mockCocoonService.fetchCommitStatuses(\n-        lastCommitStatus: captureThat(isNotNull, named: 'lastCommitStatus'),\n-        branch: anyNamed('branch'),\n-        repo: anyNamed('repo'),\n-      )).thenAnswer((_) async => const CocoonResponse<List<CommitStatus>>.data(<CommitStatus>[]));\n+      when(\n+        mockCocoonService.fetchCommitStatuses(\n+          lastCommitStatus: captureThat(isNotNull, named: 'lastCommitStatus'),\n+          branch: anyNamed('branch'),\n+          repo: anyNamed('repo'),\n+        ),\n+      ).thenAnswer((_) async => const CocoonResponse<List<CommitStatus>>.data(<CommitStatus>[]));\n \n       await buildState.fetchMoreCommitStatuses();\n \n@@ -281,14 +286,20 @@ void main() {\n         ).then((CocoonResponse<List<CommitStatus>> value) => value),\n       );\n       // Mark tree green on master, red on dev\n-      when(mockCocoonService.fetchTreeBuildStatus(branch: 'master', repo: 'flutter')).thenAnswer((_) =>\n-          Future<CocoonResponse<BuildStatusResponse>>.value(\n-              CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success)));\n-      when(mockCocoonService.fetchTreeBuildStatus(branch: 'dev', repo: 'flutter')).thenAnswer((_) =>\n-          Future<CocoonResponse<BuildStatusResponse>>.value(\n-              CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()\n-                ..buildStatus = EnumBuildStatus.failure\n-                ..failingTasks.addAll(<String>['failing_task_1']))));\n+      when(mockCocoonService.fetchTreeBuildStatus(branch: 'master', repo: 'flutter')).thenAnswer(\n+        (_) => Future<CocoonResponse<BuildStatusResponse>>.value(\n+          CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success),\n+        ),\n+      );\n+      when(mockCocoonService.fetchTreeBuildStatus(branch: 'dev', repo: 'flutter')).thenAnswer(\n+        (_) => Future<CocoonResponse<BuildStatusResponse>>.value(\n+          CocoonResponse<BuildStatusResponse>.data(\n+            BuildStatusResponse()\n+              ..buildStatus = EnumBuildStatus.failure\n+              ..failingTasks.addAll(<String>['failing_task_1']),\n+          ),\n+        ),\n+      );\n       final BuildState buildState = BuildState(\n         authService: MockGoogleSignInService(),\n         cocoonService: mockCocoonService,"
  },
  {
    "sha": "59bd2aa9f4c8d7330af3ca8036ff88696c4d2743",
    "filename": "dashboard/test/utils/fake_build.dart",
    "status": "modified",
    "additions": 10,
    "deletions": 6,
    "changes": 16,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Futils%2Ffake_build.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Futils%2Ffake_build.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Futils%2Ffake_build.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -71,12 +71,16 @@ class FakeBuildState extends ChangeNotifier implements BuildState {\n   List<Branch> get branches {\n     List<Branch> fakeBranches = <Branch>[];\n     for (String repo in ['flutter', 'engine', 'cocoon']) {\n-      fakeBranches.add(Branch()\n-        ..repository = repo\n-        ..branch = defaultBranches[repo]!);\n-      fakeBranches.add(Branch()\n-        ..repository = repo\n-        ..branch = '$repo-release');\n+      fakeBranches.add(\n+        Branch()\n+          ..repository = repo\n+          ..branch = defaultBranches[repo]!,\n+      );\n+      fakeBranches.add(\n+        Branch()\n+          ..repository = repo\n+          ..branch = '$repo-release',\n+      );\n     }\n     return fakeBranches;\n   }"
  },
  {
    "sha": "bd0feab0d8201b6091f4ab1615612641850be1b2",
    "filename": "dashboard/test/utils/golden.dart",
    "status": "modified",
    "additions": 6,
    "deletions": 4,
    "changes": 10,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Futils%2Fgolden.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Futils%2Fgolden.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Futils%2Fgolden.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -22,10 +22,12 @@ Future<void> expectGoldenMatches(\n   dynamic skip = false, // true or a String\n }) {\n   final String goldenPath = path.join('goldens', goldenFileKey);\n-  goldenFileComparator = CocoonFileComparator(path.join(\n-    (goldenFileComparator as LocalFileComparator).basedir.toString(),\n-    goldenFileKey,\n-  ));\n+  goldenFileComparator = CocoonFileComparator(\n+    path.join(\n+      (goldenFileComparator as LocalFileComparator).basedir.toString(),\n+      goldenFileKey,\n+    ),\n+  );\n   return expectLater(actual, matchesGoldenFile(goldenPath), reason: reason, skip: skip || !Platform.isLinux);\n }\n "
  },
  {
    "sha": "642c4c1c75b057e8fb37b3dce6ab4470c2342467",
    "filename": "dashboard/test/widgets/accessibility_test.dart",
    "status": "modified",
    "additions": 22,
    "deletions": 14,
    "changes": 36,
    "blob_url": "https://github.com/flutter/cocoon/blob/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fwidgets%2Faccessibility_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8f2f3d7157345fc1d1c497e1b8106a1d9716fac8/dashboard%2Ftest%2Fwidgets%2Faccessibility_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fwidgets%2Faccessibility_test.dart?ref=8f2f3d7157345fc1d1c497e1b8106a1d9716fac8",
    "patch": "@@ -25,9 +25,11 @@ void main() {\n \n     Widget buildAuthors({required List<String> names, ThemeData? theme}) {\n       final List<Widget> avatars = names\n-          .map((String name) => CommitAuthorAvatar(\n-                commit: Commit()..author = name,\n-              ))\n+          .map(\n+            (String name) => CommitAuthorAvatar(\n+              commit: Commit()..author = name,\n+            ),\n+          )\n           .toList();\n \n       return MaterialApp(\n@@ -44,25 +46,31 @@ void main() {\n     }\n \n     testWidgets('dark theme', (WidgetTester tester) async {\n-      await tester.pumpWidget(buildAuthors(\n-        theme: ThemeData.dark(),\n-        names: generateInitials(),\n-      ));\n+      await tester.pumpWidget(\n+        buildAuthors(\n+          theme: ThemeData.dark(),\n+          names: generateInitials(),\n+        ),\n+      );\n       await expectLater(tester, meetsGuideline(textContrastGuideline));\n     });\n \n     testWidgets('light theme', (WidgetTester tester) async {\n-      await tester.pumpWidget(buildAuthors(\n-        names: generateInitials(),\n-      ));\n+      await tester.pumpWidget(\n+        buildAuthors(\n+          names: generateInitials(),\n+        ),\n+      );\n       await expectLater(tester, meetsGuideline(textContrastGuideline));\n     });\n \n     testWidgets('long names, dark theme', (WidgetTester tester) async {\n-      await tester.pumpWidget(buildAuthors(\n-        theme: ThemeData.dark(),\n-        names: longNames,\n-      ));\n+      await tester.pumpWidget(\n+        buildAuthors(\n+          theme: ThemeData.dark(),\n+          names: longNames,\n+        ),\n+      );\n       await expectLater(tester, meetsGuideline(textContrastGuideline));\n     });\n "
  }
]
