// Mocks generated by Mockito 5.1.0 from annotations
// in auto_submit/test/utilities/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:auto_submit/service/github_service.dart' as _i5;
import 'package:github/src/common.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeActivityService_1 extends _i1.Fake implements _i3.ActivityService {}

class _FakeAuthorizationsService_2 extends _i1.Fake implements _i3.AuthorizationsService {}

class _FakeGistsService_3 extends _i1.Fake implements _i3.GistsService {}

class _FakeGitService_4 extends _i1.Fake implements _i3.GitService {}

class _FakeIssuesService_5 extends _i1.Fake implements _i3.IssuesService {}

class _FakeMiscService_6 extends _i1.Fake implements _i3.MiscService {}

class _FakeOrganizationsService_7 extends _i1.Fake implements _i3.OrganizationsService {}

class _FakePullRequestsService_8 extends _i1.Fake implements _i3.PullRequestsService {}

class _FakeRepositoriesService_9 extends _i1.Fake implements _i3.RepositoriesService {}

class _FakeSearchService_10 extends _i1.Fake implements _i3.SearchService {}

class _FakeUrlShortenerService_11 extends _i1.Fake implements _i3.UrlShortenerService {}

class _FakeUsersService_12 extends _i1.Fake implements _i3.UsersService {}

class _FakeChecksService_13 extends _i1.Fake implements _i3.ChecksService {}

class _FakeResponse_14 extends _i1.Fake implements _i2.Response {}

class _FakeGitHub_15 extends _i1.Fake implements _i3.GitHub {}

class _FakePullRequest_16 extends _i1.Fake implements _i3.PullRequest {}

class _FakePullRequestMerge_17 extends _i1.Fake implements _i3.PullRequestMerge {}

class _FakeIssueComment_18 extends _i1.Fake implements _i3.IssueComment {}

class _FakePullRequestReview_19 extends _i1.Fake implements _i3.PullRequestReview {}

/// A class which mocks [GitHub].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHub extends _i1.Mock implements _i3.GitHub {
  MockGitHub() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set auth(_i3.Authentication? _auth) =>
      super.noSuchMethod(Invocation.setter(#auth, _auth), returnValueForMissingStub: null);
  @override
  String get endpoint => (super.noSuchMethod(Invocation.getter(#endpoint), returnValue: '') as String);
  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client), returnValue: _FakeClient_0()) as _i2.Client);
  @override
  _i3.ActivityService get activity =>
      (super.noSuchMethod(Invocation.getter(#activity), returnValue: _FakeActivityService_1()) as _i3.ActivityService);
  @override
  _i3.AuthorizationsService get authorizations =>
      (super.noSuchMethod(Invocation.getter(#authorizations), returnValue: _FakeAuthorizationsService_2())
          as _i3.AuthorizationsService);
  @override
  _i3.GistsService get gists =>
      (super.noSuchMethod(Invocation.getter(#gists), returnValue: _FakeGistsService_3()) as _i3.GistsService);
  @override
  _i3.GitService get git =>
      (super.noSuchMethod(Invocation.getter(#git), returnValue: _FakeGitService_4()) as _i3.GitService);
  @override
  _i3.IssuesService get issues =>
      (super.noSuchMethod(Invocation.getter(#issues), returnValue: _FakeIssuesService_5()) as _i3.IssuesService);
  @override
  _i3.MiscService get misc =>
      (super.noSuchMethod(Invocation.getter(#misc), returnValue: _FakeMiscService_6()) as _i3.MiscService);
  @override
  _i3.OrganizationsService get organizations =>
      (super.noSuchMethod(Invocation.getter(#organizations), returnValue: _FakeOrganizationsService_7())
          as _i3.OrganizationsService);
  @override
  _i3.PullRequestsService get pullRequests =>
      (super.noSuchMethod(Invocation.getter(#pullRequests), returnValue: _FakePullRequestsService_8())
          as _i3.PullRequestsService);
  @override
  _i3.RepositoriesService get repositories =>
      (super.noSuchMethod(Invocation.getter(#repositories), returnValue: _FakeRepositoriesService_9())
          as _i3.RepositoriesService);
  @override
  _i3.SearchService get search =>
      (super.noSuchMethod(Invocation.getter(#search), returnValue: _FakeSearchService_10()) as _i3.SearchService);
  @override
  _i3.UrlShortenerService get urlShortener =>
      (super.noSuchMethod(Invocation.getter(#urlShortener), returnValue: _FakeUrlShortenerService_11())
          as _i3.UrlShortenerService);
  @override
  _i3.UsersService get users =>
      (super.noSuchMethod(Invocation.getter(#users), returnValue: _FakeUsersService_12()) as _i3.UsersService);
  @override
  _i3.ChecksService get checks =>
      (super.noSuchMethod(Invocation.getter(#checks), returnValue: _FakeChecksService_13()) as _i3.ChecksService);
  @override
  _i4.Future<T> getJSON<S, T>(String? path,
          {int? statusCode,
          void Function(_i2.Response)? fail,
          Map<String, String>? headers,
          Map<String, String>? params,
          _i3.JSONConverter<S, T>? convert,
          String? preview}) =>
      (super.noSuchMethod(
          Invocation.method(#getJSON, [
            path
          ], {
            #statusCode: statusCode,
            #fail: fail,
            #headers: headers,
            #params: params,
            #convert: convert,
            #preview: preview
          }),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> postJSON<S, T>(String? path,
          {int? statusCode,
          void Function(_i2.Response)? fail,
          Map<String, String>? headers,
          Map<String, dynamic>? params,
          _i3.JSONConverter<S, T>? convert,
          dynamic body,
          String? preview}) =>
      (super.noSuchMethod(
          Invocation.method(#postJSON, [
            path
          ], {
            #statusCode: statusCode,
            #fail: fail,
            #headers: headers,
            #params: params,
            #convert: convert,
            #body: body,
            #preview: preview
          }),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> putJSON<S, T>(String? path,
          {int? statusCode,
          void Function(_i2.Response)? fail,
          Map<String, String>? headers,
          Map<String, dynamic>? params,
          _i3.JSONConverter<S, T>? convert,
          dynamic body,
          String? preview}) =>
      (super.noSuchMethod(
          Invocation.method(#putJSON, [
            path
          ], {
            #statusCode: statusCode,
            #fail: fail,
            #headers: headers,
            #params: params,
            #convert: convert,
            #body: body,
            #preview: preview
          }),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> patchJSON<S, T>(String? path,
          {int? statusCode,
          void Function(_i2.Response)? fail,
          Map<String, String>? headers,
          Map<String, dynamic>? params,
          _i3.JSONConverter<S, T>? convert,
          dynamic body,
          String? preview}) =>
      (super.noSuchMethod(
          Invocation.method(#patchJSON, [
            path
          ], {
            #statusCode: statusCode,
            #fail: fail,
            #headers: headers,
            #params: params,
            #convert: convert,
            #body: body,
            #preview: preview
          }),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> requestJson<S, T>(String? method, String? path,
          {int? statusCode,
          void Function(_i2.Response)? fail,
          Map<String, String>? headers,
          Map<String, dynamic>? params,
          _i3.JSONConverter<S, T?>? convert,
          dynamic body,
          String? preview}) =>
      (super.noSuchMethod(
          Invocation.method(#requestJson, [
            method,
            path
          ], {
            #statusCode: statusCode,
            #fail: fail,
            #headers: headers,
            #params: params,
            #convert: convert,
            #body: body,
            #preview: preview
          }),
          returnValue: Future<T>.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<_i2.Response> request(String? method, String? path,
          {Map<String, String>? headers,
          Map<String, dynamic>? params,
          dynamic body,
          int? statusCode,
          void Function(_i2.Response)? fail,
          String? preview}) =>
      (super.noSuchMethod(
          Invocation.method(#request, [
            method,
            path
          ], {
            #headers: headers,
            #params: params,
            #body: body,
            #statusCode: statusCode,
            #fail: fail,
            #preview: preview
          }),
          returnValue: Future<_i2.Response>.value(_FakeResponse_14())) as _i4.Future<_i2.Response>);
  @override
  void handleStatusCode(_i2.Response? response) =>
      super.noSuchMethod(Invocation.method(#handleStatusCode, [response]), returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
}

/// A class which mocks [GithubService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubService extends _i1.Mock implements _i5.GithubService {
  MockGithubService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GitHub get github =>
      (super.noSuchMethod(Invocation.getter(#github), returnValue: _FakeGitHub_15()) as _i3.GitHub);
  @override
  _i4.Future<List<_i3.PullRequestReview>> getReviews(_i3.RepositorySlug? slug, int? prNumber) =>
      (super.noSuchMethod(Invocation.method(#getReviews, [slug, prNumber]),
              returnValue: Future<List<_i3.PullRequestReview>>.value(<_i3.PullRequestReview>[]))
          as _i4.Future<List<_i3.PullRequestReview>>);
  @override
  _i4.Future<List<_i3.CheckRun>> getCheckRuns(_i3.RepositorySlug? slug, String? ref) =>
      (super.noSuchMethod(Invocation.method(#getCheckRuns, [slug, ref]),
          returnValue: Future<List<_i3.CheckRun>>.value(<_i3.CheckRun>[])) as _i4.Future<List<_i3.CheckRun>>);
  @override
  _i4.Future<List<_i3.CheckSuite>> getCheckSuites(_i3.RepositorySlug? slug, String? ref) =>
      (super.noSuchMethod(Invocation.method(#getCheckSuites, [slug, ref]),
          returnValue: Future<List<_i3.CheckSuite>>.value(<_i3.CheckSuite>[])) as _i4.Future<List<_i3.CheckSuite>>);
  @override
  _i4.Future<List<_i3.RepositoryStatus>> getStatuses(_i3.RepositorySlug? slug, String? ref) =>
      (super.noSuchMethod(Invocation.method(#getStatuses, [slug, ref]),
              returnValue: Future<List<_i3.RepositoryStatus>>.value(<_i3.RepositoryStatus>[]))
          as _i4.Future<List<_i3.RepositoryStatus>>);
}

/// A class which mocks [PullRequestsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPullRequestsService extends _i1.Mock implements _i3.PullRequestsService {
  MockPullRequestsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GitHub get github =>
      (super.noSuchMethod(Invocation.getter(#github), returnValue: _FakeGitHub_15()) as _i3.GitHub);
  @override
  _i4.Stream<_i3.PullRequest> list(_i3.RepositorySlug? slug,
          {int? pages,
          String? base,
          String? direction = r'desc',
          String? head,
          String? sort = r'created',
          String? state = r'open'}) =>
      (super.noSuchMethod(
          Invocation.method(#list, [slug],
              {#pages: pages, #base: base, #direction: direction, #head: head, #sort: sort, #state: state}),
          returnValue: Stream<_i3.PullRequest>.empty()) as _i4.Stream<_i3.PullRequest>);
  @override
  _i4.Future<_i3.PullRequest> get(_i3.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(Invocation.method(#get, [slug, number]),
          returnValue: Future<_i3.PullRequest>.value(_FakePullRequest_16())) as _i4.Future<_i3.PullRequest>);
  @override
  _i4.Future<_i3.PullRequest> create(_i3.RepositorySlug? slug, _i3.CreatePullRequest? request) =>
      (super.noSuchMethod(Invocation.method(#create, [slug, request]),
          returnValue: Future<_i3.PullRequest>.value(_FakePullRequest_16())) as _i4.Future<_i3.PullRequest>);
  @override
  _i4.Future<_i3.PullRequest> edit(_i3.RepositorySlug? slug, int? number,
          {String? title, String? body, String? state, String? base}) =>
      (super.noSuchMethod(
          Invocation.method(#edit, [slug, number], {#title: title, #body: body, #state: state, #base: base}),
          returnValue: Future<_i3.PullRequest>.value(_FakePullRequest_16())) as _i4.Future<_i3.PullRequest>);
  @override
  _i4.Stream<_i3.RepositoryCommit> listCommits(_i3.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(Invocation.method(#listCommits, [slug, number]),
          returnValue: Stream<_i3.RepositoryCommit>.empty()) as _i4.Stream<_i3.RepositoryCommit>);
  @override
  _i4.Stream<_i3.PullRequestFile> listFiles(_i3.RepositorySlug? slug, int? number) => (super
          .noSuchMethod(Invocation.method(#listFiles, [slug, number]), returnValue: Stream<_i3.PullRequestFile>.empty())
      as _i4.Stream<_i3.PullRequestFile>);
  @override
  _i4.Stream<_i3.PullRequestReview> listReviews(_i3.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(Invocation.method(#listReviews, [slug, number]),
          returnValue: Stream<_i3.PullRequestReview>.empty()) as _i4.Stream<_i3.PullRequestReview>);
  @override
  _i4.Future<bool> isMerged(_i3.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(Invocation.method(#isMerged, [slug, number]), returnValue: Future<bool>.value(false))
          as _i4.Future<bool>);
  @override
  _i4.Future<_i3.PullRequestMerge> merge(_i3.RepositorySlug? slug, int? number, {String? message}) =>
      (super.noSuchMethod(Invocation.method(#merge, [slug, number], {#message: message}),
              returnValue: Future<_i3.PullRequestMerge>.value(_FakePullRequestMerge_17()))
          as _i4.Future<_i3.PullRequestMerge>);
  @override
  _i4.Stream<_i3.PullRequestComment> listCommentsByPullRequest(_i3.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(Invocation.method(#listCommentsByPullRequest, [slug, number]),
          returnValue: Stream<_i3.PullRequestComment>.empty()) as _i4.Stream<_i3.PullRequestComment>);
  @override
  _i4.Stream<_i3.PullRequestComment> listComments(_i3.RepositorySlug? slug) =>
      (super.noSuchMethod(Invocation.method(#listComments, [slug]), returnValue: Stream<_i3.PullRequestComment>.empty())
          as _i4.Stream<_i3.PullRequestComment>);
  @override
  _i4.Future<_i3.IssueComment> createComment(
          _i3.RepositorySlug? slug, int? number, _i3.CreatePullRequestComment? comment) =>
      (super.noSuchMethod(Invocation.method(#createComment, [slug, number, comment]),
          returnValue: Future<_i3.IssueComment>.value(_FakeIssueComment_18())) as _i4.Future<_i3.IssueComment>);
  @override
  _i4.Future<_i3.PullRequestReview> createReview(_i3.RepositorySlug? slug, _i3.CreatePullRequestReview? review) =>
      (super.noSuchMethod(Invocation.method(#createReview, [slug, review]),
              returnValue: Future<_i3.PullRequestReview>.value(_FakePullRequestReview_19()))
          as _i4.Future<_i3.PullRequestReview>);
}
