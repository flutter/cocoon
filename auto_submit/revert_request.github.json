[
  {
    "sha": "bc8895e9ed973fb86d1f88174c5205ede5b09410",
    "filename": "dashboard/analysis_options.yaml",
    "status": "modified",
    "additions": 0,
    "deletions": 1,
    "changes": 1,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Fanalysis_options.yaml",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Fanalysis_options.yaml",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Fanalysis_options.yaml?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -29,4 +29,3 @@ include: package:flutter_lints/flutter.yaml\n linter:\n   rules:\n     prefer_single_quotes: true\n-    require_trailing_commas: true"
  },
  {
    "sha": "5f48e443db76cc750e436513a5e83858cb80b515",
    "filename": "dashboard/lib/build_dashboard_page.dart",
    "status": "modified",
    "additions": 35,
    "deletions": 45,
    "changes": 80,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fbuild_dashboard_page.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fbuild_dashboard_page.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fbuild_dashboard_page.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -173,12 +173,11 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n     final ThemeData theme = Theme.of(context);\n     return <Widget>[\n       const Padding(\n-        padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n-        child: Text(\n-          'repo: ',\n-          textAlign: TextAlign.center,\n-        ),\n-      ),\n+          padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n+          child: Text(\n+            'repo: ',\n+            textAlign: TextAlign.center,\n+          )),\n       DropdownButton<String>(\n         key: const Key('repo dropdown'),\n         isExpanded: _smallScreen,\n@@ -209,12 +208,11 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n         }).toList(),\n       ),\n       const Padding(\n-        padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n-        child: Text(\n-          'branch: ',\n-          textAlign: TextAlign.center,\n-        ),\n-      ),\n+          padding: EdgeInsets.only(top: 22, left: 5, right: 5),\n+          child: Text(\n+            'branch: ',\n+            textAlign: TextAlign.center,\n+          )),\n       DropdownButton<String>(\n         key: const Key('branch dropdown'),\n         isExpanded: _smallScreen,\n@@ -278,49 +276,42 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n     final List<PopupMenuEntry<String>> key = <PopupMenuEntry<String>>[];\n \n     for (final String status in TaskBox.statusColor.keys) {\n-      key.add(\n-        _getTaskKeyEntry(\n-          box: Container(color: TaskBox.statusColor[status]),\n-          description: status,\n-        ),\n-      );\n+      key.add(_getTaskKeyEntry(\n+        box: Container(color: TaskBox.statusColor[status]),\n+        description: status,\n+      ));\n       key.add(const PopupMenuDivider());\n     }\n \n-    key.add(\n-      _getTaskKeyEntry(\n-        box: Center(\n-          child: Container(\n-            width: TaskBox.cellSize * 0.8,\n-            height: TaskBox.cellSize * 0.8,\n-            decoration: BoxDecoration(\n+    key.add(_getTaskKeyEntry(\n+      box: Center(\n+        child: Container(\n+          width: TaskBox.cellSize * 0.8,\n+          height: TaskBox.cellSize * 0.8,\n+          decoration: BoxDecoration(\n               border: Border.all(\n-                width: 2.0,\n-                color: isDark ? Colors.white : Colors.black,\n-              ),\n-            ),\n-          ),\n+            width: 2.0,\n+            color: isDark ? Colors.white : Colors.black,\n+          )),\n         ),\n-        description: 'Flaky',\n       ),\n-    );\n+      description: 'Flaky',\n+    ));\n \n     key.add(const PopupMenuDivider());\n \n-    key.add(\n-      _getTaskKeyEntry(\n-        box: const Center(\n-          child: Text(\n-            '!',\n-            style: TextStyle(\n-              fontSize: 24.0,\n-              fontWeight: FontWeight.bold,\n-            ),\n+    key.add(_getTaskKeyEntry(\n+      box: const Center(\n+        child: Text(\n+          '!',\n+          style: TextStyle(\n+            fontSize: 24.0,\n+            fontWeight: FontWeight.bold,\n           ),\n         ),\n-        description: 'Ran more than once',\n       ),\n-    );\n+      description: 'Ran more than once',\n+    ));\n \n     key.add(const PopupMenuDivider());\n \n@@ -357,8 +348,7 @@ class BuildDashboardPageState extends State<BuildDashboardPage> {\n     };\n \n     final Uri flutterIssueUrl = Uri.parse(\n-      'https://github.com/flutter/flutter/issues/new?assignees=&labels=team%3A+infra&template=6_infrastructure.md',\n-    );\n+        'https://github.com/flutter/flutter/issues/new?assignees=&labels=team%3A+infra&template=6_infrastructure.md');\n     final BuildState buildState = Provider.of<BuildState>(context);\n     buildState.updateCurrentRepoBranch(repo!, branch!);\n     return AnimatedBuilder("
  },
  {
    "sha": "2cd66e750772d8522404e233d730b00e9dedda72",
    "filename": "dashboard/lib/index_page.dart",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Findex_page.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Findex_page.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Findex_page.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -41,19 +41,17 @@ class IndexPage extends StatelessWidget {\n               children: <Widget>[\n                 const HeaderText('Select a dashboard'),\n                 for (CocoonLink link in cocoonLinks)\n-                  Column(\n-                    children: <Widget>[\n-                      IntrinsicWidth(\n-                        stepWidth: 80.0,\n-                        child: ElevatedButton.icon(\n-                          icon: link.icon!,\n-                          label: Text(link.name!.toUpperCase()),\n-                          onPressed: link.action,\n-                        ),\n+                  Column(children: <Widget>[\n+                    IntrinsicWidth(\n+                      stepWidth: 80.0,\n+                      child: ElevatedButton.icon(\n+                        icon: link.icon!,\n+                        label: Text(link.name!.toUpperCase()),\n+                        onPressed: link.action,\n                       ),\n-                      separator,\n-                    ],\n-                  )\n+                    ),\n+                    separator,\n+                  ])\n               ],\n             ),\n           ),"
  },
  {
    "sha": "eeaad2a410269f50af605e5b648d380ab34d59de",
    "filename": "dashboard/lib/logic/brooks.dart",
    "status": "modified",
    "additions": 18,
    "deletions": 20,
    "changes": 38,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Flogic%2Fbrooks.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Flogic%2Fbrooks.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Flogic%2Fbrooks.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -43,26 +43,24 @@ class BrookSink<T> extends Brook<T> {\n           listener(event);\n         }\n       } catch (exception, stack) {\n-        FlutterError.reportError(\n-          FlutterErrorDetails(\n-            exception: exception,\n-            stack: stack,\n-            library: 'Flutter Dashboard',\n-            context: ErrorDescription('while sending event'),\n-            informationCollector: () sync* {\n-              yield DiagnosticsProperty<BrookSink<T>>(\n-                'The $runtimeType sending the event was',\n-                this,\n-                style: DiagnosticsTreeStyle.errorProperty,\n-              );\n-              yield DiagnosticsProperty<T>(\n-                'The $T event was',\n-                event,\n-                style: DiagnosticsTreeStyle.errorProperty,\n-              );\n-            },\n-          ),\n-        );\n+        FlutterError.reportError(FlutterErrorDetails(\n+          exception: exception,\n+          stack: stack,\n+          library: 'Flutter Dashboard',\n+          context: ErrorDescription('while sending event'),\n+          informationCollector: () sync* {\n+            yield DiagnosticsProperty<BrookSink<T>>(\n+              'The $runtimeType sending the event was',\n+              this,\n+              style: DiagnosticsTreeStyle.errorProperty,\n+            );\n+            yield DiagnosticsProperty<T>(\n+              'The $T event was',\n+              event,\n+              style: DiagnosticsTreeStyle.errorProperty,\n+            );\n+          },\n+        ));\n       }\n     }\n   }"
  },
  {
    "sha": "27337cae353b3bdaeaf1c25916285805e792da20",
    "filename": "dashboard/lib/logic/links.dart",
    "status": "modified",
    "additions": 15,
    "deletions": 18,
    "changes": 33,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Flogic%2Flinks.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Flogic%2Flinks.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Flogic%2Flinks.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -24,26 +24,23 @@ List<CocoonLink> createCocoonLinks(BuildContext context) {\n       action: () => Navigator.pushReplacementNamed(context, BuildDashboardPage.routeName),\n     ),\n     CocoonLink(\n-      name: 'Framework Benchmarks',\n-      icon: const Icon(Icons.show_chart),\n-      action: () {\n-        launchUrl(Uri.parse('https://flutter-flutter-perf.skia.org/'));\n-      },\n-    ),\n+        name: 'Framework Benchmarks',\n+        icon: const Icon(Icons.show_chart),\n+        action: () {\n+          launchUrl(Uri.parse('https://flutter-flutter-perf.skia.org/'));\n+        }),\n     CocoonLink(\n-      name: 'Engine Benchmarks',\n-      icon: const Icon(Icons.show_chart),\n-      action: () {\n-        launchUrl(Uri.parse('https://flutter-engine-perf.skia.org/'));\n-      },\n-    ),\n+        name: 'Engine Benchmarks',\n+        icon: const Icon(Icons.show_chart),\n+        action: () {\n+          launchUrl(Uri.parse('https://flutter-engine-perf.skia.org/'));\n+        }),\n     CocoonLink(\n-      name: 'Source Code',\n-      icon: const Icon(Icons.code),\n-      action: () {\n-        launchUrl(Uri.parse('https://github.com/flutter/cocoon'));\n-      },\n-    ),\n+        name: 'Source Code',\n+        icon: const Icon(Icons.code),\n+        action: () {\n+          launchUrl(Uri.parse('https://github.com/flutter/cocoon'));\n+        }),\n   ];\n }\n "
  },
  {
    "sha": "5fe794e4efe4e580e23e2d40e0ad1ae06afb48ca",
    "filename": "dashboard/lib/logic/task_grid_filter.dart",
    "status": "modified",
    "additions": 4,
    "deletions": 12,
    "changes": 16,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Flogic%2Ftask_grid_filter.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Flogic%2Ftask_grid_filter.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Flogic%2Ftask_grid_filter.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -187,16 +187,9 @@ class TaskGridFilter extends FilterPropertySource {\n   /// Convert the filter into a String map (with or without default values populated) that\n   /// can be used to reconstruct the filter using the [fromMap] constructor and/or inject\n   /// its data into a JSON file or URL query parameter list.\n-  Map<String, String> toMap({bool includeDefaults = true}) => Map<String, String>.fromEntries(\n-        _allProperties.entries\n-            .where(\n-              (MapEntry<String, ValueFilterProperty<dynamic>> element) => includeDefaults || !element.value.isDefault,\n-            )\n-            .map(\n-              (MapEntry<String, ValueFilterProperty<dynamic>> e) =>\n-                  MapEntry<String, String>(e.key, e.value.stringValue),\n-            ),\n-      );\n+  Map<String, String> toMap({bool includeDefaults = true}) => Map<String, String>.fromEntries(_allProperties.entries\n+      .where((MapEntry<String, ValueFilterProperty<dynamic>> element) => includeDefaults || !element.value.isDefault)\n+      .map((MapEntry<String, ValueFilterProperty<dynamic>> e) => MapEntry<String, String>(e.key, e.value.stringValue)));\n \n   /// A string useful for including in a URL as query parameters. The returned string will\n   /// include only non-default filter values separated by the URL parameter separator (`&`).\n@@ -250,8 +243,7 @@ class TaskGridFilter extends FilterPropertySource {\n     }\n     return other is TaskGridFilter &&\n         _allProperties.values.every(\n-          (ValueFilterProperty<dynamic> element) => element.value == other._allProperties[element.fieldName]!.value,\n-        );\n+            (ValueFilterProperty<dynamic> element) => element.value == other._allProperties[element.fieldName]!.value);\n   }\n \n   List<VoidCallback>? _listeners;"
  },
  {
    "sha": "c5a2b4b52f7df3dd667041b798c56f84ddeca1df",
    "filename": "dashboard/lib/main.dart",
    "status": "modified",
    "additions": 6,
    "deletions": 7,
    "changes": 13,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fmain.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fmain.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fmain.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -79,13 +79,12 @@ class MyApp extends StatelessWidget {\n         final Uri uriData = Uri.parse(settings.name!);\n         if (uriData.path == BuildDashboardPage.routeName) {\n           return MaterialPageRoute<void>(\n-            settings: RouteSettings(name: uriData.toString()),\n-            builder: (BuildContext context) {\n-              return BuildDashboardPage(\n-                queryParameters: uriData.queryParameters,\n-              );\n-            },\n-          );\n+              settings: RouteSettings(name: uriData.toString()),\n+              builder: (BuildContext context) {\n+                return BuildDashboardPage(\n+                  queryParameters: uriData.queryParameters,\n+                );\n+              });\n         }\n         return null;\n       },"
  },
  {
    "sha": "e534cec6e7fb9b3d1b439a95bdea8dfc2bc7538d",
    "filename": "dashboard/lib/service/appengine_cocoon.dart",
    "status": "modified",
    "additions": 16,
    "deletions": 23,
    "changes": 39,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fservice%2Fappengine_cocoon.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fservice%2Fappengine_cocoon.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fservice%2Fappengine_cocoon.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -60,8 +60,7 @@ class AppEngineCocoonService implements CocoonService {\n     try {\n       final Map<String, dynamic> jsonResponse = jsonDecode(response.body);\n       return CocoonResponse<List<CommitStatus>>.data(\n-        await compute<List<dynamic>, List<CommitStatus>>(_commitStatusesFromJson, jsonResponse['Statuses']),\n-      );\n+          await compute<List<dynamic>, List<CommitStatus>>(_commitStatusesFromJson, jsonResponse['Statuses']));\n     } catch (error) {\n       return CocoonResponse<List<CommitStatus>>.error(error.toString());\n     }\n@@ -131,11 +130,9 @@ class AppEngineCocoonService implements CocoonService {\n       final List<Branch> branches = <Branch>[];\n       for (final Map<String, dynamic> jsonBranch in jsonResponse) {\n         final Map<String, dynamic> branchInfo = jsonBranch['branch'];\n-        branches.add(\n-          Branch()\n-            ..branch = branchInfo['branch']\n-            ..repository = branchInfo['repository'].split('/')[1],\n-        );\n+        branches.add(Branch()\n+          ..branch = branchInfo['branch']\n+          ..repository = branchInfo['repository'].split('/')[1]);\n       }\n       return CocoonResponse<List<Branch>>.data(branches);\n     } catch (error) {\n@@ -166,16 +163,14 @@ class AppEngineCocoonService implements CocoonService {\n \n     /// This endpoint only returns a status code.\n     final Uri postResetTaskUrl = apiEndpoint('/api/reset-prod-task');\n-    final http.Response response = await _client.post(\n-      postResetTaskUrl,\n-      headers: <String, String>{\n-        'X-Flutter-IdToken': idToken,\n-      },\n-      body: jsonEncode(<String, String>{\n-        'Key': task.key.child.name,\n-        'Repo': repo,\n-      }),\n-    );\n+    final http.Response response = await _client.post(postResetTaskUrl,\n+        headers: <String, String>{\n+          'X-Flutter-IdToken': idToken,\n+        },\n+        body: jsonEncode(<String, String>{\n+          'Key': task.key.child.name,\n+          'Repo': repo,\n+        }));\n \n     if (response.statusCode == HttpStatus.ok) {\n       return const CocoonResponse<bool>.data(true);\n@@ -215,12 +210,10 @@ class AppEngineCocoonService implements CocoonService {\n \n     for (final Map<String, dynamic> jsonCommitStatus in jsonCommitStatuses!) {\n       final Map<String, dynamic> checklist = jsonCommitStatus['Checklist'];\n-      statuses.add(\n-        CommitStatus()\n-          ..commit = _commitFromJson(checklist)\n-          ..branch = _branchFromJson(checklist)!\n-          ..tasks.addAll(_tasksFromStagesJson(jsonCommitStatus['Stages'])),\n-      );\n+      statuses.add(CommitStatus()\n+        ..commit = _commitFromJson(checklist)\n+        ..branch = _branchFromJson(checklist)!\n+        ..tasks.addAll(_tasksFromStagesJson(jsonCommitStatus['Stages'])));\n     }\n \n     return statuses;"
  },
  {
    "sha": "f57cf4662a76412e944703949d25e7e5dac4e3a5",
    "filename": "dashboard/lib/service/dev_cocoon.dart",
    "status": "modified",
    "additions": 8,
    "deletions": 15,
    "changes": 23,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fservice%2Fdev_cocoon.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fservice%2Fdev_cocoon.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fservice%2Fdev_cocoon.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -129,16 +129,12 @@ class DevelopmentCocoonService implements CocoonService {\n   Future<CocoonResponse<List<Branch>>> fetchFlutterBranches() async {\n     List<Branch> fakeBranches = <Branch>[];\n     for (String repo in _repos) {\n-      fakeBranches.add(\n-        Branch()\n-          ..repository = repo\n-          ..branch = defaultBranches[repo]!,\n-      );\n-      fakeBranches.add(\n-        Branch()\n-          ..repository = repo\n-          ..branch = '$repo-release',\n-      );\n+      fakeBranches.add(Branch()\n+        ..repository = repo\n+        ..branch = defaultBranches[repo]!);\n+      fakeBranches.add(Branch()\n+        ..repository = repo\n+        ..branch = '$repo-release');\n     }\n     return CocoonResponse<List<Branch>>.data(fakeBranches);\n   }\n@@ -151,8 +147,7 @@ class DevelopmentCocoonService implements CocoonService {\n   @override\n   Future<CocoonResponse<bool>> rerunTask(Task task, String? accessToken, String repo) async {\n     return const CocoonResponse<bool>.error(\n-      'Unable to retry against fake data. Try building the app to use prod data.',\n-    );\n+        'Unable to retry against fake data. Try building the app to use prod data.');\n   }\n \n   static const int _commitGap = 2 * 60 * 1000; // 2 minutes between commits\n@@ -206,9 +201,7 @@ class DevelopmentCocoonService implements CocoonService {\n       throw Exception('Add ${commit.repository} to _repoTaskCount in DevCocoonService');\n     }\n     return List<Task>.generate(\n-      _repoTaskCount[commit.repository]!,\n-      (int i) => _createFakeTask(commitTimestamp, i, StageName.luci, random),\n-    );\n+        _repoTaskCount[commit.repository]!, (int i) => _createFakeTask(commitTimestamp, i, StageName.luci, random));\n   }\n \n   static const List<String> _statuses = <String>["
  },
  {
    "sha": "758c0376055d1a59f1b837b6c1778bb1f8c046b6",
    "filename": "dashboard/lib/widgets/lattice.dart",
    "status": "modified",
    "additions": 18,
    "deletions": 22,
    "changes": 40,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Flattice.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Flattice.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Flattice.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -215,17 +215,15 @@ class _LatticeBodyElement extends RenderObjectElement implements _LatticeDelegat\n         debugWidgetBuilderValue(widget, newWidget);\n       } catch (exception, stack) {\n         newWidget = ErrorWidget.builder(\n-          _debugReportException(\n-            FlutterErrorDetails(\n-              context: ErrorDescription('building cell $coordinate for $widget'),\n-              exception: exception,\n-              stack: stack,\n-              library: 'Flutter Dashboard',\n-              informationCollector: () sync* {\n-                yield DiagnosticsDebugCreator(DebugCreator(this));\n-              },\n-            ),\n-          ),\n+          _debugReportException(FlutterErrorDetails(\n+            context: ErrorDescription('building cell $coordinate for $widget'),\n+            exception: exception,\n+            stack: stack,\n+            library: 'Flutter Dashboard',\n+            informationCollector: () sync* {\n+              yield DiagnosticsDebugCreator(DebugCreator(this));\n+            },\n+          )),\n         );\n       }\n       Element? oldElement;\n@@ -246,17 +244,15 @@ class _LatticeBodyElement extends RenderObjectElement implements _LatticeDelegat\n         newElement = updateChild(oldElement, newWidget, coordinate);\n       } catch (e, stack) {\n         newWidget = ErrorWidget.builder(\n-          _debugReportException(\n-            FlutterErrorDetails(\n-              context: ErrorDescription('building widget $newWidget at cell $coordinate for $widget'),\n-              exception: e,\n-              stack: stack,\n-              library: 'Flutter Dashboard',\n-              informationCollector: () sync* {\n-                yield DiagnosticsDebugCreator(DebugCreator(this));\n-              },\n-            ),\n-          ),\n+          _debugReportException(FlutterErrorDetails(\n+            context: ErrorDescription('building widget $newWidget at cell $coordinate for $widget'),\n+            exception: e,\n+            stack: stack,\n+            library: 'Flutter Dashboard',\n+            informationCollector: () sync* {\n+              yield DiagnosticsDebugCreator(DebugCreator(this));\n+            },\n+          )),\n         );\n         newElement = updateChild(null, newWidget, slot);\n       }"
  },
  {
    "sha": "f3ad500b77843eb9cd88837736f2b87ec9055202",
    "filename": "dashboard/lib/widgets/luci_task_attempt_summary.dart",
    "status": "modified",
    "additions": 4,
    "deletions": 5,
    "changes": 9,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Fluci_task_attempt_summary.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Fluci_task_attempt_summary.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Fluci_task_attempt_summary.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -29,11 +29,10 @@ class LuciTaskAttemptSummary extends StatelessWidget {\n     return ListBody(\n       children: List<Widget>.generate(buildNumberList.length, (int i) {\n         return ElevatedButton(\n-          child: Text('OPEN LOG FOR BUILD #${buildNumberList[i]}'),\n-          onPressed: () {\n-            launchUrl(_luciProdLogUrl(task.builderName, buildNumberList[i]));\n-          },\n-        );\n+            child: Text('OPEN LOG FOR BUILD #${buildNumberList[i]}'),\n+            onPressed: () {\n+              launchUrl(_luciProdLogUrl(task.builderName, buildNumberList[i]));\n+            });\n       }),\n     );\n   }"
  },
  {
    "sha": "1cb427d46630b1e491705a3895b3bfe001fa524c",
    "filename": "dashboard/lib/widgets/sign_in_button.dart",
    "status": "modified",
    "additions": 10,
    "deletions": 12,
    "changes": 22,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Fsign_in_button.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Fsign_in_button.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Fsign_in_button.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -52,19 +52,17 @@ class SignInButton extends StatelessWidget {\n               }\n             },\n             iconSize: Scaffold.of(context).appBarMaxHeight,\n-            icon: Builder(\n-              builder: (BuildContext context) {\n-                if (!kIsWeb && Platform.environment.containsKey('FLUTTER_TEST')) {\n-                  return Padding(\n-                    padding: const EdgeInsets.only(right: 10.0, top: 20.0),\n-                    child: Text(authService.user!.email),\n-                  );\n-                }\n-                return GoogleUserCircleAvatar(\n-                  identity: authService.user!,\n+            icon: Builder(builder: (BuildContext context) {\n+              if (!kIsWeb && Platform.environment.containsKey('FLUTTER_TEST')) {\n+                return Padding(\n+                  padding: const EdgeInsets.only(right: 10.0, top: 20.0),\n+                  child: Text(authService.user!.email),\n                 );\n-              },\n-            ),\n+              }\n+              return GoogleUserCircleAvatar(\n+                identity: authService.user!,\n+              );\n+            }),\n           );\n         }\n         return TextButton("
  },
  {
    "sha": "77ecfcae0b7d98bdcb1a6e0dbee541c78d15015e",
    "filename": "dashboard/lib/widgets/task_grid.dart",
    "status": "modified",
    "additions": 13,
    "deletions": 17,
    "changes": 30,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Ftask_grid.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Ftask_grid.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Ftask_grid.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -269,10 +269,8 @@ class _TaskGridState extends State<TaskGrid> {\n     return <List<LatticeCell>>[\n       <LatticeCell>[\n         const LatticeCell(),\n-        ...tasks.map<LatticeCell>(\n-          (QualifiedTask task) =>\n-              LatticeCell(builder: (BuildContext context) => TaskIcon(qualifiedTask: task), taskName: task.stage),\n-        ),\n+        ...tasks.map<LatticeCell>((QualifiedTask task) =>\n+            LatticeCell(builder: (BuildContext context) => TaskIcon(qualifiedTask: task), taskName: task.stage)),\n       ],\n       ...rows.map<List<LatticeCell>>(\n         (_Row row) => <LatticeCell>[\n@@ -325,19 +323,17 @@ class _TaskGridState extends State<TaskGrid> {\n \n   List<LatticeCell> _generateLoadingRow(int length) {\n     return <LatticeCell>[\n-      LatticeCell(\n-        builder: (BuildContext context) {\n-          return FittedBox(\n-            fit: BoxFit.contain,\n-            child: Padding(\n-              padding: const EdgeInsets.all(12),\n-              child: widget.useAnimatedLoading\n-                  ? const RepaintBoundary(child: CircularProgressIndicator())\n-                  : const Icon(Icons.refresh),\n-            ),\n-          );\n-        },\n-      ),\n+      LatticeCell(builder: (BuildContext context) {\n+        return FittedBox(\n+          fit: BoxFit.contain,\n+          child: Padding(\n+            padding: const EdgeInsets.all(12),\n+            child: widget.useAnimatedLoading\n+                ? const RepaintBoundary(child: CircularProgressIndicator())\n+                : const Icon(Icons.refresh),\n+          ),\n+        );\n+      }),\n       for (int index = 0; index < max(length, _loadingMessage.length); index++)\n         LatticeCell(\n           builder: (BuildContext context) {"
  },
  {
    "sha": "adf6b1ae17c5dca6c741f7d2a9961c6becac4182",
    "filename": "dashboard/lib/widgets/task_overlay.dart",
    "status": "modified",
    "additions": 2,
    "deletions": 3,
    "changes": 5,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Ftask_overlay.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Flib%2Fwidgets%2Ftask_overlay.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Flib%2Fwidgets%2Ftask_overlay.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -284,9 +284,8 @@ class TaskOverlayContents extends StatelessWidget {\n                   Padding(\n                     padding: const EdgeInsets.only(left: 8.0),\n                     child: ProgressButton(\n-                      child: const Text('VIEW LOGS'),\n-                      onPressed: () => launchUrl(Uri.parse(logUrl(task, commit: commit))),\n-                    ),\n+                        child: const Text('VIEW LOGS'),\n+                        onPressed: () => launchUrl(Uri.parse(logUrl(task, commit: commit)))),\n                   ),\n                   if (qualifiedTask.isLuci)\n                     Padding("
  },
  {
    "sha": "20761e3bc19d8858d70fdbaf1d5cf16504cc5fee",
    "filename": "dashboard/pubspec.lock",
    "status": "modified",
    "additions": 1,
    "deletions": 1,
    "changes": 2,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Fpubspec.lock",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Fpubspec.lock",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Fpubspec.lock?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -454,7 +454,7 @@ packages:\n       name: source_span\n       url: \"https://pub.dartlang.org\"\n     source: hosted\n-    version: \"1.9.1\"\n+    version: \"1.9.0\"\n   stack_trace:\n     dependency: transitive\n     description:"
  },
  {
    "sha": "8b21f73e04741ed9535a4d4dd764d1f0b86d5c34",
    "filename": "dashboard/test/build_dashboard_page_test.dart",
    "status": "modified",
    "additions": 21,
    "deletions": 33,
    "changes": 54,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fbuild_dashboard_page_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fbuild_dashboard_page_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fbuild_dashboard_page_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -53,18 +53,14 @@ void main() {\n     throwOnMissingStub(fakeCocoonService);\n     when(fakeCocoonService.fetchFlutterBranches()).thenAnswer((_) => Completer<CocoonResponse<List<Branch>>>().future);\n     when(fakeCocoonService.fetchRepos()).thenAnswer((_) => Completer<CocoonResponse<List<String>>>().future);\n-    when(\n-      fakeCocoonService.fetchCommitStatuses(\n-        branch: anyNamed('branch'),\n-        repo: anyNamed('repo'),\n-      ),\n-    ).thenAnswer((_) => Completer<CocoonResponse<List<CommitStatus>>>().future);\n-    when(\n-      fakeCocoonService.fetchTreeBuildStatus(\n-        branch: anyNamed('branch'),\n-        repo: anyNamed('repo'),\n-      ),\n-    ).thenAnswer((_) => Completer<CocoonResponse<BuildStatusResponse>>().future);\n+    when(fakeCocoonService.fetchCommitStatuses(\n+      branch: anyNamed('branch'),\n+      repo: anyNamed('repo'),\n+    )).thenAnswer((_) => Completer<CocoonResponse<List<CommitStatus>>>().future);\n+    when(fakeCocoonService.fetchTreeBuildStatus(\n+      branch: anyNamed('branch'),\n+      repo: anyNamed('repo'),\n+    )).thenAnswer((_) => Completer<CocoonResponse<BuildStatusResponse>>().future);\n \n     final BuildState buildState = BuildState(\n       cocoonService: fakeCocoonService,\n@@ -460,12 +456,10 @@ void main() {\n \n   testWidgets('ensure smooth transition between invalid states', (WidgetTester tester) async {\n     final BuildState fakeBuildState = FakeBuildState()..authService = fakeAuthService;\n-    BuildDashboardPage controlledBuildDashboardPage = const BuildDashboardPage(\n-      queryParameters: {\n-        'repo': 'flutter',\n-        'branch': 'flutter-release',\n-      },\n-    );\n+    BuildDashboardPage controlledBuildDashboardPage = const BuildDashboardPage(queryParameters: {\n+      'repo': 'flutter',\n+      'branch': 'flutter-release',\n+    });\n \n     await tester.pumpWidget(\n       MaterialApp(\n@@ -481,24 +475,18 @@ void main() {\n \n     expect(find.byType(dropdownButtonType), findsNWidgets(2));\n     // simulate a url request, which retriggers a rebuild of the widget\n-    controlledBuildDashboardPage = const BuildDashboardPage(\n-      queryParameters: {\n-        'repo': 'engine',\n-      },\n-    );\n-    expect(\n-      (tester.widget(find.byKey(const Key('branch dropdown'))) as DropdownButton).value,\n-      equals('flutter-release'),\n-    ); //invalid state: engine + flutter-release\n+    controlledBuildDashboardPage = const BuildDashboardPage(queryParameters: {\n+      'repo': 'engine',\n+    });\n+    expect((tester.widget(find.byKey(const Key('branch dropdown'))) as DropdownButton).value,\n+        equals('flutter-release')); //invalid state: engine + flutter-release\n     await tester.pump(); //an invalid state will generate delayed network responses\n \n     //if a delayed network request come in, from a previous invalid state: cocoon + engine - release, no exceptions should be raised\n-    controlledBuildDashboardPage = const BuildDashboardPage(\n-      queryParameters: {\n-        'repo': 'cocoon',\n-        'branch': 'engine-release',\n-      },\n-    );\n+    controlledBuildDashboardPage = const BuildDashboardPage(queryParameters: {\n+      'repo': 'cocoon',\n+      'branch': 'engine-release',\n+    });\n   });\n \n   testWidgets('shows branch and repo dropdown button in settings when screen is small', (WidgetTester tester) async {"
  },
  {
    "sha": "318f21c0055a839610cffbb13a22ef5d88a13b26",
    "filename": "dashboard/test/index_page_test.dart",
    "status": "modified",
    "additions": 4,
    "deletions": 7,
    "changes": 11,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Findex_page_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Findex_page_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Findex_page_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -28,14 +28,11 @@ void main() {\n   });\n \n   testWidgets('shows menu for navigation drawer', (WidgetTester tester) async {\n-    await tester.pumpWidget(\n-      const MaterialApp(\n+    await tester.pumpWidget(const MaterialApp(\n         home: FakeInserter(\n-          signedIn: false,\n-          child: IndexPage(),\n-        ),\n-      ),\n-    );\n+      signedIn: false,\n+      child: IndexPage(),\n+    )));\n \n     expect(find.byIcon(Icons.menu), findsOneWidget);\n "
  },
  {
    "sha": "755ac8d7c62ed8049dc030f810dbcb6bb3e04a28",
    "filename": "dashboard/test/logic/qualified_task_test.dart",
    "status": "modified",
    "additions": 9,
    "deletions": 16,
    "changes": 25,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Flogic%2Fqualified_task_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Flogic%2Fqualified_task_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Flogic%2Fqualified_task_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -19,14 +19,11 @@ void main() {\n     final Task cirrusTask = Task()..stageName = 'cirrus';\n \n     expect(\n-      logUrl(\n-        cirrusTask,\n-        commit: Commit()\n-          ..sha = 'abc123'\n-          ..branch = 'master',\n-      ),\n-      'https://cirrus-ci.com/build/flutter/flutter/abc123?branch=master',\n-    );\n+        logUrl(cirrusTask,\n+            commit: Commit()\n+              ..sha = 'abc123'\n+              ..branch = 'master'),\n+        'https://cirrus-ci.com/build/flutter/flutter/abc123?branch=master');\n \n     expect(logUrl(cirrusTask), 'https://cirrus-ci.com/github/flutter/flutter/master');\n \n@@ -40,19 +37,15 @@ void main() {\n       ..name = 'abc'\n       ..builderName = 'def';\n \n-    expect(\n-      QualifiedTask.fromTask(luciTask).sourceConfigurationUrl,\n-      'https://ci.chromium.org/p/flutter/builders/luci.flutter.prod/def',\n-    );\n+    expect(QualifiedTask.fromTask(luciTask).sourceConfigurationUrl,\n+        'https://ci.chromium.org/p/flutter/builders/luci.flutter.prod/def');\n   });\n \n   test('QualifiedTask.sourceConfigurationUrl for cirrus', () {\n     final Task cirrusTask = Task()..stageName = 'cirrus';\n \n-    expect(\n-      QualifiedTask.fromTask(cirrusTask).sourceConfigurationUrl,\n-      'https://cirrus-ci.com/github/flutter/flutter/master',\n-    );\n+    expect(QualifiedTask.fromTask(cirrusTask).sourceConfigurationUrl,\n+        'https://cirrus-ci.com/github/flutter/flutter/master');\n   });\n \n   test('QualifiedTask.sourceConfigurationUrl for google test', () {"
  },
  {
    "sha": "ca17069465a954e10bb556925a92594b699ff93e",
    "filename": "dashboard/test/logic/task_grid_filter_test.dart",
    "status": "modified",
    "additions": 11,
    "deletions": 18,
    "changes": 29,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Flogic%2Ftask_grid_filter_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Flogic%2Ftask_grid_filter_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Flogic%2Ftask_grid_filter_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -51,14 +51,10 @@ void main() {\n   test('map constructor result matches field setters', () {\n     expect(TaskGridFilter.fromMap(<String, String>{}), TaskGridFilter());\n     expect(TaskGridFilter.fromMap(<String, String>{'taskFilter': 'foo'}), TaskGridFilter()..taskFilter = RegExp('foo'));\n-    expect(\n-      TaskGridFilter.fromMap(<String, String>{'authorFilter': 'foo'}),\n-      TaskGridFilter()..authorFilter = RegExp('foo'),\n-    );\n-    expect(\n-      TaskGridFilter.fromMap(<String, String>{'messageFilter': 'foo'}),\n-      TaskGridFilter()..messageFilter = RegExp('foo'),\n-    );\n+    expect(TaskGridFilter.fromMap(<String, String>{'authorFilter': 'foo'}),\n+        TaskGridFilter()..authorFilter = RegExp('foo'));\n+    expect(TaskGridFilter.fromMap(<String, String>{'messageFilter': 'foo'}),\n+        TaskGridFilter()..messageFilter = RegExp('foo'));\n     expect(TaskGridFilter.fromMap(<String, String>{'hashFilter': 'foo'}), TaskGridFilter()..hashFilter = RegExp('foo'));\n     expect(TaskGridFilter.fromMap(<String, String>{'showMac': 'false'}), TaskGridFilter()..showMac = false);\n     expect(TaskGridFilter.fromMap(<String, String>{'showStaging': 'false'}), TaskGridFilter()..showStaging = false);\n@@ -120,10 +116,8 @@ void main() {\n       expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'Staging_build_linux task')), false);\n       expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'Staging_build_mac task')), false);\n       expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'Linux_android staging_build')), true);\n-      expect(\n-        filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'linux_android_staging_build_linux task')),\n-        true,\n-      );\n+      expect(filter.matchesTask(QualifiedTask.fromTask(Task()..builderName = 'linux_android_staging_build_linux task')),\n+          true);\n     }\n   });\n \n@@ -170,12 +164,11 @@ void main() {\n     }\n   });\n \n-  void testStage({\n-    required String taskName,\n-    required String fieldName,\n-    required TaskGridFilter trueFilter,\n-    required TaskGridFilter falseFilter,\n-  }) {\n+  void testStage(\n+      {required String taskName,\n+      required String fieldName,\n+      required TaskGridFilter trueFilter,\n+      required TaskGridFilter falseFilter}) {\n     final TaskGridFilter trueFilterMap = TaskGridFilter.fromMap(<String, String>{fieldName: 'true'});\n     final TaskGridFilter falseFilterMap = TaskGridFilter.fromMap(<String, String>{fieldName: 'false'});\n "
  },
  {
    "sha": "8d4b213a7c7848524e63dab012860cbfc0ff75fb",
    "filename": "dashboard/test/service/appengine_cocoon_test.dart",
    "status": "modified",
    "additions": 74,
    "deletions": 112,
    "changes": 186,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fservice%2Fappengine_cocoon_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fservice%2Fappengine_cocoon_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fservice%2Fappengine_cocoon_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -25,18 +25,14 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response(luciJsonGetStatsResponse, 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response(luciJsonGetStatsResponse, 200);\n+      }));\n     });\n \n     test('should return CocoonResponse<List<CommitStatus>>', () {\n       expect(\n-        service.fetchCommitStatuses(repo: 'engine'),\n-        const TypeMatcher<Future<CocoonResponse<List<CommitStatus>>>>(),\n-      );\n+          service.fetchCommitStatuses(repo: 'engine'), const TypeMatcher<Future<CocoonResponse<List<CommitStatus>>>>());\n     });\n \n     test('should return expected List<CommitStatus>', () async {\n@@ -52,26 +48,24 @@ void main() {\n           ..authorAvatarUrl = 'https://flutter.dev'\n           ..repository = 'flutter/cocoon'\n           ..branch = 'master')\n-        ..tasks.add(\n-          Task()\n-            ..key = (RootKey()..child = (Key()..name = 'taskKey1'))\n-            ..createTimestamp = Int64(1569353940885)\n-            ..startTimestamp = Int64(1569354594672)\n-            ..endTimestamp = Int64(1569354700642)\n-            ..name = 'linux'\n-            ..attempts = 1\n-            ..isFlaky = false\n-            ..timeoutInMinutes = 0\n-            ..reason = ''\n-            ..requiredCapabilities.add('[linux]')\n-            ..reservedForAgentId = ''\n-            ..stageName = 'chromebot'\n-            ..status = 'Succeeded'\n-            ..isTestFlaky = false\n-            ..buildNumberList = '123'\n-            ..builderName = 'Linux'\n-            ..luciBucket = 'luci.flutter.try',\n-        );\n+        ..tasks.add(Task()\n+          ..key = (RootKey()..child = (Key()..name = 'taskKey1'))\n+          ..createTimestamp = Int64(1569353940885)\n+          ..startTimestamp = Int64(1569354594672)\n+          ..endTimestamp = Int64(1569354700642)\n+          ..name = 'linux'\n+          ..attempts = 1\n+          ..isFlaky = false\n+          ..timeoutInMinutes = 0\n+          ..reason = ''\n+          ..requiredCapabilities.add('[linux]')\n+          ..reservedForAgentId = ''\n+          ..stageName = 'chromebot'\n+          ..status = 'Succeeded'\n+          ..isTestFlaky = false\n+          ..buildNumberList = '123'\n+          ..builderName = 'Linux'\n+          ..luciBucket = 'luci.flutter.try');\n \n       expect(statuses.data!.length, 1);\n       expect(statuses.data!.first, expectedStatus);\n@@ -96,18 +90,14 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response(jsonBuildStatusTrueResponse, 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response(jsonBuildStatusTrueResponse, 200);\n+      }));\n     });\n \n     test('should return CocoonResponse<bool>', () {\n-      expect(\n-        service.fetchTreeBuildStatus(repo: 'engine'),\n-        const TypeMatcher<Future<CocoonResponse<BuildStatusResponse>>>(),\n-      );\n+      expect(service.fetchTreeBuildStatus(repo: 'engine'),\n+          const TypeMatcher<Future<CocoonResponse<BuildStatusResponse>>>());\n     });\n \n     test('data should be true when given Succeeded', () async {\n@@ -117,11 +107,9 @@ void main() {\n     });\n \n     test('data should be false when given Failed', () async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response(jsonBuildStatusFalseResponse, 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response(jsonBuildStatusFalseResponse, 200);\n+      }));\n       final CocoonResponse<BuildStatusResponse> treeBuildStatus = await service.fetchTreeBuildStatus(repo: 'engine');\n \n       expect(treeBuildStatus.data!.buildStatus, EnumBuildStatus.failure);\n@@ -147,11 +135,9 @@ void main() {\n     late Task task;\n \n     setUp(() {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response('', 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response('', 200);\n+      }));\n       task = Task()\n         ..key = RootKey()\n         ..stageName = StageName.luci;\n@@ -165,53 +151,45 @@ void main() {\n     test('should set error in response if task key is null', () async {\n       final CocoonResponse<bool> response = await service.rerunTask(task, null, 'engine');\n       expect(\n-        response.error,\n-        allOf(<Matcher>[\n-          isNotNull,\n-          contains('Sign in to trigger reruns'),\n-        ]),\n-      );\n+          response.error,\n+          allOf(<Matcher>[\n+            isNotNull,\n+            contains('Sign in to trigger reruns'),\n+          ]));\n     });\n \n     test('should set error in response if bad status code is returned', () async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response('internal server error', 500);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response('internal server error', 500);\n+      }));\n \n       final CocoonResponse<bool> response = await service.rerunTask(task, 'fakeAccessToken', 'engine');\n       expect(\n-        response.error,\n-        allOf(<Matcher>[\n-          isNotNull,\n-          contains('HTTP Code: 500, internal server error'),\n-        ]),\n-      );\n+          response.error,\n+          allOf(<Matcher>[\n+            isNotNull,\n+            contains('HTTP Code: 500, internal server error'),\n+          ]));\n     });\n   });\n \n   group('AppEngine CocoonService refresh github commits', () {\n     late AppEngineCocoonService service;\n \n     setUp(() {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response('', 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response('', 200);\n+      }));\n     });\n \n     test('should return true if request succeeds', () async {\n       expect(await service.vacuumGitHubCommits('fakeIdToken'), true);\n     });\n \n     test('should return false if request failed', () async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response('', 500);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response('', 500);\n+      }));\n       expect(await service.vacuumGitHubCommits('fakeIdToken'), false);\n     });\n   });\n@@ -220,11 +198,9 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response(jsonGetBranchesResponse, 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response(jsonGetBranchesResponse, 200);\n+      }));\n     });\n \n     test('should return CocoonResponse<List<Branch>>', () {\n@@ -236,20 +212,15 @@ void main() {\n \n       expect(branches.data!.length, 2);\n       expect(\n-        branches.data,\n-        allOf([\n-          contains(\n-            Branch()\n+          branches.data,\n+          allOf([\n+            contains(Branch()\n               ..repository = 'flutter'\n-              ..branch = 'branch-framework-release',\n-          ),\n-          contains(\n-            Branch()\n+              ..branch = 'branch-framework-release'),\n+            contains(Branch()\n               ..repository = 'engine'\n-              ..branch = 'branch-engine-release',\n-          )\n-        ]),\n-      );\n+              ..branch = 'branch-engine-release')\n+          ]));\n     });\n \n     test('should have error if given non-200 response', () async {\n@@ -271,11 +242,9 @@ void main() {\n     late AppEngineCocoonService service;\n \n     setUp(() async {\n-      service = AppEngineCocoonService(\n-        client: MockClient((Request request) async {\n-          return Response(jsonGetReposResponse, 200);\n-        }),\n-      );\n+      service = AppEngineCocoonService(client: MockClient((Request request) async {\n+        return Response(jsonGetReposResponse, 200);\n+      }));\n     });\n \n     test('data should be expected list of branches', () async {\n@@ -304,35 +273,28 @@ void main() {\n   });\n \n   group('AppEngine CocoonService apiEndpoint', () {\n-    final AppEngineCocoonService service = AppEngineCocoonService(\n-      client: MockClient((Request request) async {\n-        return Response('{\"Token\": \"abc123\"}', 200);\n-      }),\n-    );\n+    final AppEngineCocoonService service = AppEngineCocoonService(client: MockClient((Request request) async {\n+      return Response('{\"Token\": \"abc123\"}', 200);\n+    }));\n \n     test('handles url suffix', () {\n       expect(service.apiEndpoint('/test').toString(), '$baseApiUrl/test');\n     });\n \n     test('single query parameter', () {\n-      expect(\n-        service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value'}).toString(),\n-        '$baseApiUrl/test?key=value',\n-      );\n+      expect(service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value'}).toString(),\n+          '$baseApiUrl/test?key=value');\n     });\n \n     test('multiple query parameters', () {\n       expect(\n-        service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value', 'another': 'test'}).toString(),\n-        '$baseApiUrl/test?key=value&another=test',\n-      );\n+          service.apiEndpoint('/test', queryParameters: <String, String>{'key': 'value', 'another': 'test'}).toString(),\n+          '$baseApiUrl/test?key=value&another=test');\n     });\n \n     test('query parameter with null value', () {\n-      expect(\n-        service.apiEndpoint('/test', queryParameters: <String, String?>{'key': null}).toString(),\n-        '$baseApiUrl/test?key',\n-      );\n+      expect(service.apiEndpoint('/test', queryParameters: <String, String?>{'key': null}).toString(),\n+          '$baseApiUrl/test?key');\n     });\n \n     /// This test requires runs on different platforms."
  },
  {
    "sha": "eb541933d670cc4e1a1ec21a5ce3c12bf1e96f60",
    "filename": "dashboard/test/service/google_authentication_test.dart",
    "status": "modified",
    "additions": 2,
    "deletions": 4,
    "changes": 6,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fservice%2Fgoogle_authentication_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fservice%2Fgoogle_authentication_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fservice%2Fgoogle_authentication_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -85,10 +85,8 @@ void main() {\n       expect(authService.user!.displayName, 'Dr. Test');\n       expect(authService.user!.email, 'test@flutter.dev');\n       expect(authService.user!.id, 'test123');\n-      expect(\n-        authService.user!.photoUrl,\n-        'https://lh3.googleusercontent.com/-ukEAtRyRhw8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfhID9XACtdb9q_xK43VSXQvBV11Q.CMID',\n-      );\n+      expect(authService.user!.photoUrl,\n+          'https://lh3.googleusercontent.com/-ukEAtRyRhw8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rfhID9XACtdb9q_xK43VSXQvBV11Q.CMID');\n     });\n \n     test('id token available with logged in user', () async {"
  },
  {
    "sha": "7f927f7b5af5bc703363b4178e938f0f5b452e6c",
    "filename": "dashboard/test/state/build_test.dart",
    "status": "modified",
    "additions": 20,
    "deletions": 31,
    "changes": 51,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fstate%2Fbuild_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fstate%2Fbuild_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fstate%2Fbuild_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -33,18 +33,15 @@ void main() {\n       when(mockCocoonService.fetchCommitStatuses(branch: anyNamed('branch'), repo: anyNamed('repo')))\n           .thenAnswer((dynamic _) async => CocoonResponse<List<CommitStatus>>.data(<CommitStatus>[setupCommitStatus]));\n       when(mockCocoonService.fetchTreeBuildStatus(branch: anyNamed('branch'), repo: anyNamed('repo'))).thenAnswer(\n-        (_) async =>\n-            CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success),\n-      );\n+          (_) async =>\n+              CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success));\n       when(mockCocoonService.fetchRepos())\n           .thenAnswer((_) async => const CocoonResponse<List<String>>.data(<String>['flutter']));\n-      when(mockCocoonService.fetchFlutterBranches()).thenAnswer(\n-        (_) async => CocoonResponse<List<Branch>>.data(<Branch>[\n-          Branch()\n-            ..branch = defaultBranch\n-            ..repository = 'flutter'\n-        ]),\n-      );\n+      when(mockCocoonService.fetchFlutterBranches()).thenAnswer((_) async => CocoonResponse<List<Branch>>.data(<Branch>[\n+            Branch()\n+              ..branch = defaultBranch\n+              ..repository = 'flutter'\n+          ]));\n     });\n \n     tearDown(() {\n@@ -260,13 +257,11 @@ void main() {\n \n       expect(buildState.statuses, <CommitStatus?>[setupCommitStatus]);\n \n-      when(\n-        mockCocoonService.fetchCommitStatuses(\n-          lastCommitStatus: captureThat(isNotNull, named: 'lastCommitStatus'),\n-          branch: anyNamed('branch'),\n-          repo: anyNamed('repo'),\n-        ),\n-      ).thenAnswer((_) async => const CocoonResponse<List<CommitStatus>>.data(<CommitStatus>[]));\n+      when(mockCocoonService.fetchCommitStatuses(\n+        lastCommitStatus: captureThat(isNotNull, named: 'lastCommitStatus'),\n+        branch: anyNamed('branch'),\n+        repo: anyNamed('repo'),\n+      )).thenAnswer((_) async => const CocoonResponse<List<CommitStatus>>.data(<CommitStatus>[]));\n \n       await buildState.fetchMoreCommitStatuses();\n \n@@ -286,20 +281,14 @@ void main() {\n         ).then((CocoonResponse<List<CommitStatus>> value) => value),\n       );\n       // Mark tree green on master, red on dev\n-      when(mockCocoonService.fetchTreeBuildStatus(branch: 'master', repo: 'flutter')).thenAnswer(\n-        (_) => Future<CocoonResponse<BuildStatusResponse>>.value(\n-          CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success),\n-        ),\n-      );\n-      when(mockCocoonService.fetchTreeBuildStatus(branch: 'dev', repo: 'flutter')).thenAnswer(\n-        (_) => Future<CocoonResponse<BuildStatusResponse>>.value(\n-          CocoonResponse<BuildStatusResponse>.data(\n-            BuildStatusResponse()\n-              ..buildStatus = EnumBuildStatus.failure\n-              ..failingTasks.addAll(<String>['failing_task_1']),\n-          ),\n-        ),\n-      );\n+      when(mockCocoonService.fetchTreeBuildStatus(branch: 'master', repo: 'flutter')).thenAnswer((_) =>\n+          Future<CocoonResponse<BuildStatusResponse>>.value(\n+              CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()..buildStatus = EnumBuildStatus.success)));\n+      when(mockCocoonService.fetchTreeBuildStatus(branch: 'dev', repo: 'flutter')).thenAnswer((_) =>\n+          Future<CocoonResponse<BuildStatusResponse>>.value(\n+              CocoonResponse<BuildStatusResponse>.data(BuildStatusResponse()\n+                ..buildStatus = EnumBuildStatus.failure\n+                ..failingTasks.addAll(<String>['failing_task_1']))));\n       final BuildState buildState = BuildState(\n         authService: MockGoogleSignInService(),\n         cocoonService: mockCocoonService,"
  },
  {
    "sha": "89afa7ccb46d81dfeb320d876d80a520e8a891b4",
    "filename": "dashboard/test/utils/fake_build.dart",
    "status": "modified",
    "additions": 6,
    "deletions": 10,
    "changes": 16,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Futils%2Ffake_build.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Futils%2Ffake_build.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Futils%2Ffake_build.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -71,16 +71,12 @@ class FakeBuildState extends ChangeNotifier implements BuildState {\n   List<Branch> get branches {\n     List<Branch> fakeBranches = <Branch>[];\n     for (String repo in ['flutter', 'engine', 'cocoon']) {\n-      fakeBranches.add(\n-        Branch()\n-          ..repository = repo\n-          ..branch = defaultBranches[repo]!,\n-      );\n-      fakeBranches.add(\n-        Branch()\n-          ..repository = repo\n-          ..branch = '$repo-release',\n-      );\n+      fakeBranches.add(Branch()\n+        ..repository = repo\n+        ..branch = defaultBranches[repo]!);\n+      fakeBranches.add(Branch()\n+        ..repository = repo\n+        ..branch = '$repo-release');\n     }\n     return fakeBranches;\n   }"
  },
  {
    "sha": "8b967d8a8070ac340bc54dbd7da39b65291a0c4d",
    "filename": "dashboard/test/utils/golden.dart",
    "status": "modified",
    "additions": 4,
    "deletions": 6,
    "changes": 10,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Futils%2Fgolden.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Futils%2Fgolden.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Futils%2Fgolden.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -22,12 +22,10 @@ Future<void> expectGoldenMatches(\n   dynamic skip = false, // true or a String\n }) {\n   final String goldenPath = path.join('goldens', goldenFileKey);\n-  goldenFileComparator = CocoonFileComparator(\n-    path.join(\n-      (goldenFileComparator as LocalFileComparator).basedir.toString(),\n-      goldenFileKey,\n-    ),\n-  );\n+  goldenFileComparator = CocoonFileComparator(path.join(\n+    (goldenFileComparator as LocalFileComparator).basedir.toString(),\n+    goldenFileKey,\n+  ));\n   return expectLater(actual, matchesGoldenFile(goldenPath), reason: reason, skip: skip || !Platform.isLinux);\n }\n "
  },
  {
    "sha": "ac5bb6fc18061a1a6936b86e1f0b3179671c97e2",
    "filename": "dashboard/test/widgets/accessibility_test.dart",
    "status": "modified",
    "additions": 14,
    "deletions": 22,
    "changes": 36,
    "blob_url": "https://github.com/flutter/cocoon/blob/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fwidgets%2Faccessibility_test.dart",
    "raw_url": "https://github.com/flutter/cocoon/raw/8c8d14b5eda928e25b43fc76da94f78ab11d99d7/dashboard%2Ftest%2Fwidgets%2Faccessibility_test.dart",
    "contents_url": "https://api.github.com/repos/flutter/cocoon/contents/dashboard%2Ftest%2Fwidgets%2Faccessibility_test.dart?ref=8c8d14b5eda928e25b43fc76da94f78ab11d99d7",
    "patch": "@@ -25,11 +25,9 @@ void main() {\n \n     Widget buildAuthors({required List<String> names, ThemeData? theme}) {\n       final List<Widget> avatars = names\n-          .map(\n-            (String name) => CommitAuthorAvatar(\n-              commit: Commit()..author = name,\n-            ),\n-          )\n+          .map((String name) => CommitAuthorAvatar(\n+                commit: Commit()..author = name,\n+              ))\n           .toList();\n \n       return MaterialApp(\n@@ -46,31 +44,25 @@ void main() {\n     }\n \n     testWidgets('dark theme', (WidgetTester tester) async {\n-      await tester.pumpWidget(\n-        buildAuthors(\n-          theme: ThemeData.dark(),\n-          names: generateInitials(),\n-        ),\n-      );\n+      await tester.pumpWidget(buildAuthors(\n+        theme: ThemeData.dark(),\n+        names: generateInitials(),\n+      ));\n       await expectLater(tester, meetsGuideline(textContrastGuideline));\n     });\n \n     testWidgets('light theme', (WidgetTester tester) async {\n-      await tester.pumpWidget(\n-        buildAuthors(\n-          names: generateInitials(),\n-        ),\n-      );\n+      await tester.pumpWidget(buildAuthors(\n+        names: generateInitials(),\n+      ));\n       await expectLater(tester, meetsGuideline(textContrastGuideline));\n     });\n \n     testWidgets('long names, dark theme', (WidgetTester tester) async {\n-      await tester.pumpWidget(\n-        buildAuthors(\n-          theme: ThemeData.dark(),\n-          names: longNames,\n-        ),\n-      );\n+      await tester.pumpWidget(buildAuthors(\n+        theme: ThemeData.dark(),\n+        names: longNames,\n+      ));\n       await expectLater(tester, meetsGuideline(textContrastGuideline));\n     });\n "
  }
]
