// Copyright 2020 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'package:github/github.dart' show CheckSuite, PullRequest, User, Repository;
import 'package:github/hooks.dart' show HookEvent;
import 'package:json_annotation/json_annotation.dart';

part 'checks.g.dart';

/// Data models for json messages coming from GitHub Checks API.
///
/// See more:
///  * https://docs.github.com/en/webhooks/webhook-events-and-payloads#check_run.
@JsonSerializable(fieldRename: FieldRename.snake)
class CheckRunEvent extends HookEvent {
  CheckRunEvent({
    this.action,
    this.checkRun,
    this.sender,
    this.repository,
  });

  factory CheckRunEvent.fromJson(Map<String, dynamic> input) => _$CheckRunEventFromJson(input);
  CheckRun? checkRun;
  String? action;
  User? sender;
  Repository? repository;

  Map<String, dynamic> toJson() => _$CheckRunEventToJson(this);
}

@JsonSerializable(fieldRename: FieldRename.snake)
class CheckRun {
  const CheckRun({
    this.conclusion,
    this.headSha,
    this.id,
    this.pullRequests,
    this.name,
    this.checkSuite,
  });

  factory CheckRun.fromJson(Map<String, dynamic> input) => _$CheckRunFromJson(input);
  final int? id;
  final String? headSha;
  final String? conclusion;
  final String? name;
  final CheckSuite? checkSuite;
  @JsonKey(name: 'pull_requests', defaultValue: <PullRequest>[])
  final List<PullRequest>? pullRequests;

  Map<String, dynamic> toJson() => _$CheckRunToJson(this);
}

/// Data model for a `merge_group` event.
///
/// The event may request one of two actions:
///
/// * `checks_requested`: request to create checks and kick of CI tasks.
/// * `destroyed`: a notification that a `merge_group` is no longer neede and CI
///   jobs can be stopped.
///
/// See more:
///  * https://docs.github.com/en/webhooks/webhook-events-and-payloads#merge_group.
@JsonSerializable(fieldRename: FieldRename.snake)
class MergeGroupEvent extends HookEvent {
  MergeGroupEvent({
    required this.action,
    required this.mergeGroup,
    this.repository,
    this.sender,
  });

  factory MergeGroupEvent.fromJson(Map<String, dynamic> input) => _$MergeGroupEventFromJson(input);

  String action;
  MergeGroup mergeGroup;
  Repository? repository;
  User? sender;

  Map<String, dynamic> toJson() => _$MergeGroupEventToJson(this);
}

/// Data model for a `merge_group`.
///
/// This object is supplied by [MergeGroupEvent].
@JsonSerializable(fieldRename: FieldRename.snake)
class MergeGroup {
  const MergeGroup({
    required this.headSha,
    required this.headRef,
    required this.baseSha,
    required this.baseRef,
  });

  factory MergeGroup.fromJson(Map<String, dynamic> input) => _$MergeGroupFromJson(input);

  /// The commit SHA generated for the candidate PR to be merged.
  ///
  /// This is the SHA that must be checked by the CI.
  final String headSha;

  /// The ref to the read-only branch generated by Github for the respective PR.
  final String headRef;

  /// The SHA of the parent commit of the [headSha] commit.
  final String baseSha;

  /// The full ref of the branch the merge group will be merged into.
  final String baseRef;

  Map<String, dynamic> toJson() => _$MergeGroupToJson(this);
}
