// Copyright 2019 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:convert';

import 'package:cocoon_service/cocoon_service.dart';
import 'package:cocoon_service/src/model/luci/pubsub_message_v2.dart';
import 'package:cocoon_service/src/model/luci/user_data.dart';
import 'package:cocoon_service/src/request_handlers/scheduler/scheduler_request_subscription.dart';
import 'package:cocoon_service/src/request_handling/exceptions.dart';
import 'package:fixnum/fixnum.dart';
import 'package:mockito/mockito.dart';
import 'package:retry/retry.dart';
import 'package:test/test.dart';
import 'package:buildbucket/buildbucket_pb.dart' as bbv2;

import '../../src/datastore/fake_config.dart';
import '../../src/request_handling/fake_authentication.dart';
import '../../src/request_handling/fake_http.dart';
import '../../src/request_handling/subscription_v2_tester.dart';
import '../../src/utilities/mocks.dart';

void main() {
  late SchedulerRequestSubscriptionV2 handler;
  late SubscriptionV2Tester tester;

  late MockBuildBucketV2Client buildBucketV2Client;

  setUp(() async {
    buildBucketV2Client = MockBuildBucketV2Client();
    handler = SchedulerRequestSubscriptionV2(
      cache: CacheService(inMemory: true),
      config: FakeConfig(),
      authProvider: FakeAuthenticationProvider(),
      buildBucketClient: buildBucketV2Client,
      retryOptions: const RetryOptions(
        maxAttempts: 3,
        maxDelay: Duration.zero,
      ),
    );

    tester = SubscriptionV2Tester(
      request: FakeHttpRequest(),
    );
  });

  test('throws exception when BatchRequest cannot be decoded', () async {
    tester.message = const PushMessageV2();
    expect(() => tester.post(handler), throwsA(isA<BadRequestException>()));
  });

  test('Push Message v2 decoding', () {
    // we get this after calling utf8 decode and transforming into messagev2
    // object comes in proto 3 form.
    const String message = '''
      {"message":{"data":"","messageId":"9540536530549731","publishTime":"2023-11-02T00:17:00.467Z"},"subscription":"projects/flutter-dashboard/subscriptions/scheduler-requests-sub"}
''';

    String message_2 = '''
{"message":{"attributes":{"bucket":"try","builder":"Linux_web web_build_all_packages master","is_completed":"false","project":"flutter","version":"v2"},"data":"","messageId":"10771934691919436","message_id":"10771934691919436","publishTime":"2024-03-24T14:38:05.338Z","publish_time":"2024-03-24T14:38:05.338Z"},"subscription":"projects/flutter-dashboard/subscriptions/build-bucket-presubmit-sub"}
''';

    final PubSubPushMessageV2 pushMessageV2 = PubSubPushMessageV2.fromJson(json.decode(message));

    final PubSubPushMessageV2 pushMessageV2_2 = PubSubPushMessageV2.fromJson(json.decode(message_2));
    print(pushMessageV2_2.message!.data!);

    final bbv2.PubSubCallBack pubSubCallBack = bbv2.PubSubCallBack();
    Map<String, dynamic> mapJson = jsonDecode(pushMessageV2_2.message!.data!) as Map<String, dynamic>;

    // print(mapJson);

    pubSubCallBack.mergeFromProto3Json(jsonDecode(pushMessageV2_2.message!.data!) as Map<String, dynamic>);
    final List<int> uD = pubSubCallBack.userData;
    String dt = String.fromCharCodes(pubSubCallBack.userData);
    print(dt);

    // String userDataString = String.fromCharCodes(pubSubCallBack.userData);

    // final bbv2.BuildsV2PubSub buildsV2PubSub = bbv2.BuildsV2PubSub.create();
    // buildsV2PubSub.mergeFromProto3Json(json.decode(pushMessageV2_2.message!.data!));

    // print(pubSubCallBack.hasUserData());

    // pubSubCallBack.mergeFromProto3Json(jsonDecode(message) as Map<String, dynamic>);
    // print('...');
    // print(String.fromCharCodes(base64Decode(String.fromCharCodes(pubSubCallBack.userData))));
    // print('...');

    // print(String.fromCharCodes((base64.decode(pushMessageV2.message!.data!))));

    // print(pushMessageV2.message!.data!.toString());

    // final String unencodedData = String.fromCharCodes((base64.decode(pushMessageV2_2.message!.data!)));
    // print(unencodedData);
    // final bbv2.BatchRequest batchRequest = bbv2.BatchRequest.create();

    // batchRequest.mergeFromProto3Json(jsonDecode(pushMessageV2.message!.data!));

    // print(jsonEncode(batchRequest.toProto3Json()));

    // expect(batchRequest.requests.length, 5);
    // Absolutely need this Encode call before sending over https to prpc.
    // print(jsonEncode(batchRequest.toProto3Json()));
  });

  test('schedules request to buildbucket', () async {
    final bbv2.BuilderID responseBuilderID = bbv2.BuilderID();
    responseBuilderID.builder = 'Linux A';

    final bbv2.Build responseBuild = bbv2.Build();
    responseBuild.id = Int64(12345);
    responseBuild.builder = responseBuilderID;

    // has a list of BatchResponse_Response
    final bbv2.BatchResponse batchResponse = bbv2.BatchResponse();
    final bbv2.BatchResponse_Response batchResponseResponse = bbv2.BatchResponse_Response();
    batchResponseResponse.scheduleBuild = responseBuild;
    batchResponse.responses.add(batchResponseResponse);

    when(buildBucketV2Client.batch(any)).thenAnswer((_) async => batchResponse);

    // We cannot construct the object manually with the protos as we cannot write out
    // the json with all the required double quotes and testing fails.
    const String messageData = '''
{
  "requests": [
    {
      "scheduleBuild": {
        "builder": {
          "builder": "Linux A"
        }
      }
    }
  ]
}
''';

    const PushMessageV2 pushMessageV2 = PushMessageV2(data: messageData, messageId: '798274983');
    tester.message = pushMessageV2;
    final Body body = await tester.post(handler);
    expect(body, Body.empty);
  });

  test('retries schedule build if no response comes back', () async {
    final bbv2.BuilderID responseBuilderID = bbv2.BuilderID();
    responseBuilderID.builder = 'Linux A';

    final bbv2.Build responseBuild = bbv2.Build();
    responseBuild.id = Int64(12345);
    responseBuild.builder = responseBuilderID;

    // has a list of BatchResponse_Response
    final bbv2.BatchResponse batchResponse = bbv2.BatchResponse();

    final bbv2.BatchResponse_Response batchResponseResponse = bbv2.BatchResponse_Response();
    batchResponseResponse.scheduleBuild = responseBuild;

    batchResponse.responses.add(batchResponseResponse);

    int attempt = 0;

    when(buildBucketV2Client.batch(any)).thenAnswer((_) async {
      attempt += 1;
      if (attempt == 2) {
        return batchResponse;
      }

      return bbv2.BatchResponse().createEmptyInstance();
    });

    const String messageData = '''
{
  "requests": [
    {
      "scheduleBuild": {
        "builder": {
          "builder": "Linux A"
        }
      }
    }
  ]
}
''';

    const PushMessageV2 pushMessageV2 = PushMessageV2(data: messageData, messageId: '798274983');
    tester.message = pushMessageV2;
    final Body body = await tester.post(handler);

    expect(body, Body.empty);
    expect(verify(buildBucketV2Client.batch(any)).callCount, 2);
  });

  test('acking message and logging error when no response comes back after retry limit', () async {
    when(buildBucketV2Client.batch(any)).thenAnswer((_) async {
      return bbv2.BatchResponse().createEmptyInstance();
    });

    const String messageData = '''
{
  "requests": [
    {
      "scheduleBuild": {
        "builder": {
          "builder": "Linux A"
        }
      }
    }
  ]
}
''';

    const PushMessageV2 pushMessageV2 = PushMessageV2(data: messageData, messageId: '798274983');
    tester.message = pushMessageV2;
    final Body body = await tester.post(handler);

    expect(body, isNotNull);
    expect(verify(buildBucketV2Client.batch(any)).callCount, 3);
  });
}
