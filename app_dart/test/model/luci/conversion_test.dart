import 'dart:convert';

import 'package:buildbucket/buildbucket_pb.dart' as bbv2;
import 'package:cocoon_service/src/model/luci/pubsub_message_v2.dart';
import 'package:cocoon_service/src/model/luci/user_data.dart';
import 'package:test/test.dart';

void main() {
  test('Push Message v2 decoding', () {
    // we get this after calling utf8 decode and transforming into messagev2
    // object comes in proto 3 form.
     const String message = '''
       {"message":{"attributes":{"bucket":"flutter","builder":"Mac Production Engine Drone","is_completed":"false","project":"dart-internal","version":"v2"},"data":"","messageId":"10796770224949327","message_id":"10796770224949327","publishTime":"2024-03-27T23:36:19.194Z","publish_time":"2024-03-27T23:36:19.194Z"},"subscription":"projects/flutter-dashboard/subscriptions/dart-internal-build-results-sub"}
''';

    // String message_2 = '''{"message":{"attributes":{"bucket":"try","builder":"Linux web_tests_2","is_completed":"false","project":"flutter","version":"v2"},"data":"","messageId":"9447412202989944","message_id":"9447412202989944","publishTime":"2024-03-27T18:43:39.231Z","publish_time":"2024-03-27T18:43:39.231Z"},"subscription":"projects/flutter-dashboard/subscriptions/build-bucket-presubmit-sub"}''';

    // final PubSubPushMessageV2 pushMessageV2 = PubSubPushMessageV2.fromJson(json.decode(message));

    final PubSubPushMessageV2 pushMessageV2_2 = PubSubPushMessageV2.fromJson(json.decode(message));
    print(pushMessageV2_2.message!.data!);


    final bbv2.PubSubCallBack pubSubCallBack = bbv2.PubSubCallBack();
    // Map<String, dynamic> mapJson = jsonDecode(pushMessageV2_2.message!.data!) as Map<String, dynamic>;

    // print(mapJson);

    pubSubCallBack.mergeFromProto3Json(jsonDecode(pushMessageV2_2.message!.data!) as Map<String, dynamic>);
    
    final List<int> uD = pubSubCallBack.userData;
    final String dt = String.fromCharCodes(pubSubCallBack.userData);
    // print(dt);
    final List<int> decoded = base64Decode(dt);
    print(String.fromCharCodes(decoded));

    // String userDataString = String.fromCharCodes(pubSubCallBack.userData);

    // final bbv2.BuildsV2PubSub buildsV2PubSub = bbv2.BuildsV2PubSub.create();
    // buildsV2PubSub.mergeFromProto3Json(json.decode(pushMessageV2_2.message!.data!));

    // print(pubSubCallBack.hasUserData());

    // pubSubCallBack.mergeFromProto3Json(jsonDecode(message) as Map<String, dynamic>);
    // print('...');
    // print(String.fromCharCodes(base64Decode(String.fromCharCodes(pubSubCallBack.userData))));
    // print('...');

    // print(String.fromCharCodes((base64.decode(pushMessageV2.message!.data!))));

    // print(pushMessageV2.message!.data!.toString());

    // final String unencodedData = String.fromCharCodes((base64.decode(pushMessageV2_2.message!.data!)));
    // print(unencodedData);
    // final bbv2.BatchRequest batchRequest = bbv2.BatchRequest.create();

    // batchRequest.mergeFromProto3Json(jsonDecode(pushMessageV2.message!.data!));

    // print(jsonEncode(batchRequest.toProto3Json()));

    // expect(batchRequest.requests.length, 5);
    // Absolutely need this Encode call before sending over https to prpc.
    // print(jsonEncode(batchRequest.toProto3Json()));
  });

  test('encoding path', () {
    final Map<String, dynamic> userDataMap = {};
    userDataMap['repo_owner'] = 'ricardo';
    userDataMap['url'] = 'https://github.com/flutter/flutter/issues';

    final List<int> userDataBytes = UserData.encodeUserDataToBytes(userDataMap)!;

    final Map<String, dynamic> userDataMapAgain = UserData.decodeUserDataBytes(userDataBytes);
    print(userDataMapAgain);

    final List<int> bytes = UserData.encodeUserDataToBytes(userDataMapAgain)!;
    final Map<String, dynamic> userDataMap3 = UserData.decodeUserDataBytes(bytes);
    print(userDataMap3);
  });
}