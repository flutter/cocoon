// Mocks generated by Mockito 5.4.5 from annotations
// in cocoon_service/test/src/utilities/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;
import 'dart:convert' as _i23;
import 'dart:io' as _i22;
import 'dart:typed_data' as _i38;

import 'package:appengine/appengine.dart' as _i9;
import 'package:buildbucket/buildbucket_pb.dart' as _i7;
import 'package:cocoon_server/access_client_provider.dart' as _i4;
import 'package:cocoon_service/cocoon_service.dart' as _i14;
import 'package:cocoon_service/src/foundation/github_checks_util.dart' as _i21;
import 'package:cocoon_service/src/model/appengine/branch.dart' as _i33;
import 'package:cocoon_service/src/model/appengine/commit.dart' as _i35;
import 'package:cocoon_service/src/model/appengine/key_helper.dart' as _i11;
import 'package:cocoon_service/src/model/appengine/task.dart' as _i36;
import 'package:cocoon_service/src/model/ci_yaml/target.dart' as _i42;
import 'package:cocoon_service/src/model/firestore/ci_staging.dart' as _i26;
import 'package:cocoon_service/src/model/firestore/commit.dart' as _i39;
import 'package:cocoon_service/src/model/firestore/github_build_status.dart'
    as _i20;
import 'package:cocoon_service/src/model/firestore/github_gold_status.dart'
    as _i19;
import 'package:cocoon_service/src/model/firestore/task.dart' as _i40;
import 'package:cocoon_service/src/model/github/checks.dart' as _i44;
import 'package:cocoon_service/src/service/access_token_provider.dart' as _i28;
import 'package:cocoon_service/src/service/bigquery.dart' as _i15;
import 'package:cocoon_service/src/service/commit_service.dart' as _i30;
import 'package:cocoon_service/src/service/config.dart' as _i2;
import 'package:cocoon_service/src/service/datastore.dart' as _i8;
import 'package:cocoon_service/src/service/gerrit_service.dart' as _i24;
import 'package:cocoon_service/src/service/github_service.dart' as _i16;
import 'package:cocoon_service/src/service/luci_build_service/build_tags.dart'
    as _i41;
import 'package:cocoon_service/src/service/luci_build_service/cipd_version.dart'
    as _i32;
import 'package:cocoon_service/src/service/luci_build_service/engine_artifacts.dart'
    as _i43;
import 'package:cocoon_service/src/service/luci_build_service/pending_task.dart'
    as _i46;
import 'package:fixnum/fixnum.dart' as _i45;
import 'package:gcloud/db.dart' as _i10;
import 'package:github/github.dart' as _i12;
import 'package:github/hooks.dart' as _i31;
import 'package:googleapis/bigquery/v2.dart' as _i5;
import 'package:googleapis/firestore/v1.dart' as _i18;
import 'package:googleapis/shared.dart' as _i25;
import 'package:googleapis_auth/auth_io.dart' as _i3;
import 'package:graphql/client.dart' as _i13;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i29;
import 'package:neat_cache/neat_cache.dart' as _i27;
import 'package:process/process.dart' as _i47;
import 'package:retry/retry.dart' as _i34;

import '../../service/cache_service_test.dart' as _i37;
import 'mocks.dart' as _i48;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConfig_0 extends _i1.SmartFake implements _i2.Config {
  _FakeConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccessToken_1 extends _i1.SmartFake implements _i3.AccessToken {
  _FakeAccessToken_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccessClientProvider_2 extends _i1.SmartFake
    implements _i4.AccessClientProvider {
  _FakeAccessClientProvider_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTabledataResource_3 extends _i1.SmartFake
    implements _i5.TabledataResource {
  _FakeTabledataResource_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJobsResource_4 extends _i1.SmartFake implements _i5.JobsResource {
  _FakeJobsResource_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClient_5 extends _i1.SmartFake implements _i6.Client {
  _FakeClient_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBuild_6 extends _i1.SmartFake implements _i7.Build {
  _FakeBuild_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSearchBuildsResponse_7 extends _i1.SmartFake
    implements _i7.SearchBuildsResponse {
  _FakeSearchBuildsResponse_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBatchResponse_8 extends _i1.SmartFake implements _i7.BatchResponse {
  _FakeBatchResponse_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeListBuildersResponse_9 extends _i1.SmartFake
    implements _i7.ListBuildersResponse {
  _FakeListBuildersResponse_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatastoreService_10 extends _i1.SmartFake
    implements _i8.DatastoreService {
  _FakeDatastoreService_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogging_11 extends _i1.SmartFake implements _i9.Logging {
  _FakeLogging_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatastoreDB_12 extends _i1.SmartFake implements _i10.DatastoreDB {
  _FakeDatastoreDB_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeKeyHelper_13 extends _i1.SmartFake implements _i11.KeyHelper {
  _FakeKeyHelper_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_14 extends _i1.SmartFake implements Duration {
  _FakeDuration_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitHub_15 extends _i1.SmartFake implements _i12.GitHub {
  _FakeGitHub_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGraphQLClient_16 extends _i1.SmartFake
    implements _i13.GraphQLClient {
  _FakeGraphQLClient_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirestoreService_17 extends _i1.SmartFake
    implements _i14.FirestoreService {
  _FakeFirestoreService_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBigqueryService_18 extends _i1.SmartFake
    implements _i15.BigqueryService {
  _FakeBigqueryService_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGithubService_19 extends _i1.SmartFake
    implements _i16.GithubService {
  _FakeGithubService_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_20<T1> extends _i1.SmartFake implements _i17.Future<T1> {
  _FakeFuture_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProjectsDatabasesDocumentsResource_21 extends _i1.SmartFake
    implements _i18.ProjectsDatabasesDocumentsResource {
  _FakeProjectsDatabasesDocumentsResource_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeDocument_22 extends _i1.SmartFake implements _i18.Document {
  _FakeDocument_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBatchWriteResponse_23 extends _i1.SmartFake
    implements _i18.BatchWriteResponse {
  _FakeBatchWriteResponse_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCommitResponse_24 extends _i1.SmartFake
    implements _i18.CommitResponse {
  _FakeCommitResponse_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGithubGoldStatus_25 extends _i1.SmartFake
    implements _i19.GithubGoldStatus {
  _FakeGithubGoldStatus_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGithubBuildStatus_26 extends _i1.SmartFake
    implements _i20.GithubBuildStatus {
  _FakeGithubBuildStatus_26(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeValue_27 extends _i1.SmartFake implements _i18.Value {
  _FakeValue_27(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFilter_28 extends _i1.SmartFake implements _i18.Filter {
  _FakeFilter_28(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIssue_29 extends _i1.SmartFake implements _i12.Issue {
  _FakeIssue_29(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIssueComment_30 extends _i1.SmartFake implements _i12.IssueComment {
  _FakeIssueComment_30(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIssueLabel_31 extends _i1.SmartFake implements _i12.IssueLabel {
  _FakeIssueLabel_31(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMilestone_32 extends _i1.SmartFake implements _i12.Milestone {
  _FakeMilestone_32(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGithubChecksUtil_33 extends _i1.SmartFake
    implements _i21.GithubChecksUtil {
  _FakeGithubChecksUtil_33(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCheckRunConclusion_34 extends _i1.SmartFake
    implements _i12.CheckRunConclusion {
  _FakeCheckRunConclusion_34(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCheckRunStatus_35 extends _i1.SmartFake
    implements _i12.CheckRunStatus {
  _FakeCheckRunStatus_35(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCheckSuite_36 extends _i1.SmartFake implements _i12.CheckSuite {
  _FakeCheckSuite_36(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCheckRun_37 extends _i1.SmartFake implements _i12.CheckRun {
  _FakeCheckRun_37(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePullRequest_38 extends _i1.SmartFake implements _i12.PullRequest {
  _FakePullRequest_38(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitReference_39 extends _i1.SmartFake implements _i12.GitReference {
  _FakeGitReference_39(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRateLimit_40 extends _i1.SmartFake implements _i12.RateLimit {
  _FakeRateLimit_40(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitBlob_41 extends _i1.SmartFake implements _i12.GitBlob {
  _FakeGitBlob_41(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitCommit_42 extends _i1.SmartFake implements _i12.GitCommit {
  _FakeGitCommit_42(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitTag_43 extends _i1.SmartFake implements _i12.GitTag {
  _FakeGitTag_43(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGitTree_44 extends _i1.SmartFake implements _i12.GitTree {
  _FakeGitTree_44(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDefaultPolicies_45 extends _i1.SmartFake
    implements _i13.DefaultPolicies {
  _FakeDefaultPolicies_45(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLink_46 extends _i1.SmartFake implements _i13.Link {
  _FakeLink_46(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGraphQLCache_47 extends _i1.SmartFake implements _i13.GraphQLCache {
  _FakeGraphQLCache_47(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryManager_48 extends _i1.SmartFake implements _i13.QueryManager {
  _FakeQueryManager_48(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeObservableQuery_49<TParsed1> extends _i1.SmartFake
    implements _i13.ObservableQuery<TParsed1> {
  _FakeObservableQuery_49(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryResult_50<TParsed1 extends Object?> extends _i1.SmartFake
    implements _i13.QueryResult<TParsed1> {
  _FakeQueryResult_50(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpClientRequest_51 extends _i1.SmartFake
    implements _i22.HttpClientRequest {
  _FakeHttpClientRequest_51(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_52 extends _i1.SmartFake implements Uri {
  _FakeUri_52(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpHeaders_53 extends _i1.SmartFake implements _i22.HttpHeaders {
  _FakeHttpHeaders_53(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpClientResponse_54 extends _i1.SmartFake
    implements _i22.HttpClientResponse {
  _FakeHttpClientResponse_54(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEncoding_55 extends _i1.SmartFake implements _i23.Encoding {
  _FakeEncoding_55(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSocket_56 extends _i1.SmartFake implements _i22.Socket {
  _FakeSocket_56(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamSubscription_57<T> extends _i1.SmartFake
    implements _i17.StreamSubscription<T> {
  _FakeStreamSubscription_57(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFusionTester_58 extends _i1.SmartFake implements _i14.FusionTester {
  _FakeFusionTester_58(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBuildBucketClient_59 extends _i1.SmartFake
    implements _i14.BuildBucketClient {
  _FakeBuildBucketClient_59(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCacheService_60 extends _i1.SmartFake implements _i14.CacheService {
  _FakeCacheService_60(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGerritService_61 extends _i1.SmartFake
    implements _i24.GerritService {
  _FakeGerritService_61(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePubSub_62 extends _i1.SmartFake implements _i14.PubSub {
  _FakePubSub_62(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProcess_63 extends _i1.SmartFake implements _i22.Process {
  _FakeProcess_63(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTableDataInsertAllResponse_64 extends _i1.SmartFake
    implements _i5.TableDataInsertAllResponse {
  _FakeTableDataInsertAllResponse_64(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTableDataList_65 extends _i1.SmartFake implements _i5.TableDataList {
  _FakeTableDataList_65(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUser_66 extends _i1.SmartFake implements _i12.User {
  _FakeUser_66(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCurrentUser_67 extends _i1.SmartFake implements _i12.CurrentUser {
  _FakeCurrentUser_67(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePublicKey_68 extends _i1.SmartFake implements _i12.PublicKey {
  _FakePublicKey_68(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBeginTransactionResponse_69 extends _i1.SmartFake
    implements _i18.BeginTransactionResponse {
  _FakeBeginTransactionResponse_69(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$Empty_70 extends _i1.SmartFake implements _i25.$Empty {
  _Fake$Empty_70(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeListDocumentsResponse_71 extends _i1.SmartFake
    implements _i18.ListDocumentsResponse {
  _FakeListDocumentsResponse_71(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeListCollectionIdsResponse_72 extends _i1.SmartFake
    implements _i18.ListCollectionIdsResponse {
  _FakeListCollectionIdsResponse_72(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePartitionQueryResponse_73 extends _i1.SmartFake
    implements _i18.PartitionQueryResponse {
  _FakePartitionQueryResponse_73(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWriteResponse_74 extends _i1.SmartFake
    implements _i18.WriteResponse {
  _FakeWriteResponse_74(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStagingConclusion_75 extends _i1.SmartFake
    implements _i26.StagingConclusion {
  _FakeStagingConclusion_75(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRepositorySlug_76 extends _i1.SmartFake
    implements _i12.RepositorySlug {
  _FakeRepositorySlug_76(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEntry_77<T> extends _i1.SmartFake implements _i27.Entry<T> {
  _FakeEntry_77(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCache_78<T> extends _i1.SmartFake implements _i27.Cache<T> {
  _FakeCache_78(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AccessTokenService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccessTokenService extends _i1.Mock
    implements _i28.AccessTokenService {
  MockAccessTokenService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Config get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.Config);

  @override
  _i17.Future<_i3.AccessToken> createAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#createAccessToken, []),
            returnValue: _i17.Future<_i3.AccessToken>.value(
              _FakeAccessToken_1(
                this,
                Invocation.method(#createAccessToken, []),
              ),
            ),
          )
          as _i17.Future<_i3.AccessToken>);
}

/// A class which mocks [BigqueryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBigqueryService extends _i1.Mock implements _i15.BigqueryService {
  MockBigqueryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AccessClientProvider get accessClientProvider =>
      (super.noSuchMethod(
            Invocation.getter(#accessClientProvider),
            returnValue: _FakeAccessClientProvider_2(
              this,
              Invocation.getter(#accessClientProvider),
            ),
          )
          as _i4.AccessClientProvider);

  @override
  _i17.Future<_i5.TabledataResource> defaultTabledata() =>
      (super.noSuchMethod(
            Invocation.method(#defaultTabledata, []),
            returnValue: _i17.Future<_i5.TabledataResource>.value(
              _FakeTabledataResource_3(
                this,
                Invocation.method(#defaultTabledata, []),
              ),
            ),
          )
          as _i17.Future<_i5.TabledataResource>);

  @override
  _i17.Future<_i5.JobsResource> defaultJobs() =>
      (super.noSuchMethod(
            Invocation.method(#defaultJobs, []),
            returnValue: _i17.Future<_i5.JobsResource>.value(
              _FakeJobsResource_4(this, Invocation.method(#defaultJobs, [])),
            ),
          )
          as _i17.Future<_i5.JobsResource>);

  @override
  _i17.Future<List<_i15.BuilderStatistic>> listBuilderStatistic(
    String? projectId, {
    int? limit = 100,
    String? bucket = 'prod',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listBuilderStatistic,
              [projectId],
              {#limit: limit, #bucket: bucket},
            ),
            returnValue: _i17.Future<List<_i15.BuilderStatistic>>.value(
              <_i15.BuilderStatistic>[],
            ),
          )
          as _i17.Future<List<_i15.BuilderStatistic>>);

  @override
  _i17.Future<List<_i15.BuilderRecord>> listRecentBuildRecordsForBuilder(
    String? projectId, {
    String? builder,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listRecentBuildRecordsForBuilder,
              [projectId],
              {#builder: builder, #limit: limit},
            ),
            returnValue: _i17.Future<List<_i15.BuilderRecord>>.value(
              <_i15.BuilderRecord>[],
            ),
          )
          as _i17.Future<List<_i15.BuilderRecord>>);
}

/// A class which mocks [BranchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBranchService extends _i1.Mock implements _i14.BranchService {
  MockBranchService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<void> branchFlutterRecipes(String? branch, String? engineSha) =>
      (super.noSuchMethod(
            Invocation.method(#branchFlutterRecipes, [branch, engineSha]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<List<_i14.ReleaseBranch>> getReleaseBranches({
    required _i12.RepositorySlug? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getReleaseBranches, [], {#slug: slug}),
            returnValue: _i17.Future<List<_i14.ReleaseBranch>>.value(
              <_i14.ReleaseBranch>[],
            ),
          )
          as _i17.Future<List<_i14.ReleaseBranch>>);
}

/// A class which mocks [BuildBucketClient].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockBuildBucketClient extends _i1.Mock implements _i14.BuildBucketClient {
  MockBuildBucketClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get buildBucketBuildUri =>
      (super.noSuchMethod(
            Invocation.getter(#buildBucketBuildUri),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#buildBucketBuildUri),
            ),
          )
          as String);

  @override
  String get buildBucketBuilderUri =>
      (super.noSuchMethod(
            Invocation.getter(#buildBucketBuilderUri),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#buildBucketBuilderUri),
            ),
          )
          as String);

  @override
  _i6.Client get httpClient =>
      (super.noSuchMethod(
            Invocation.getter(#httpClient),
            returnValue: _FakeClient_5(this, Invocation.getter(#httpClient)),
          )
          as _i6.Client);

  @override
  _i17.Future<_i7.Build> scheduleBuild(
    _i7.ScheduleBuildRequest? request, {
    String? buildBucketUri =
        'https://cr-buildbucket.appspot.com/prpc/buildbucket.v2.Builds',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #scheduleBuild,
              [request],
              {#buildBucketUri: buildBucketUri},
            ),
            returnValue: _i17.Future<_i7.Build>.value(
              _FakeBuild_6(
                this,
                Invocation.method(
                  #scheduleBuild,
                  [request],
                  {#buildBucketUri: buildBucketUri},
                ),
              ),
            ),
          )
          as _i17.Future<_i7.Build>);

  @override
  _i17.Future<_i7.SearchBuildsResponse> searchBuilds(
    _i7.SearchBuildsRequest? request, {
    String? buildBucketUri =
        'https://cr-buildbucket.appspot.com/prpc/buildbucket.v2.Builds',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchBuilds,
              [request],
              {#buildBucketUri: buildBucketUri},
            ),
            returnValue: _i17.Future<_i7.SearchBuildsResponse>.value(
              _FakeSearchBuildsResponse_7(
                this,
                Invocation.method(
                  #searchBuilds,
                  [request],
                  {#buildBucketUri: buildBucketUri},
                ),
              ),
            ),
          )
          as _i17.Future<_i7.SearchBuildsResponse>);

  @override
  _i17.Future<_i7.BatchResponse> batch(
    _i7.BatchRequest? request, {
    String? buildBucketUri =
        'https://cr-buildbucket.appspot.com/prpc/buildbucket.v2.Builds',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #batch,
              [request],
              {#buildBucketUri: buildBucketUri},
            ),
            returnValue: _i17.Future<_i7.BatchResponse>.value(
              _FakeBatchResponse_8(
                this,
                Invocation.method(
                  #batch,
                  [request],
                  {#buildBucketUri: buildBucketUri},
                ),
              ),
            ),
          )
          as _i17.Future<_i7.BatchResponse>);

  @override
  _i17.Future<_i7.Build> cancelBuild(
    _i7.CancelBuildRequest? request, {
    String? buildBucketUri =
        'https://cr-buildbucket.appspot.com/prpc/buildbucket.v2.Builds',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #cancelBuild,
              [request],
              {#buildBucketUri: buildBucketUri},
            ),
            returnValue: _i17.Future<_i7.Build>.value(
              _FakeBuild_6(
                this,
                Invocation.method(
                  #cancelBuild,
                  [request],
                  {#buildBucketUri: buildBucketUri},
                ),
              ),
            ),
          )
          as _i17.Future<_i7.Build>);

  @override
  _i17.Future<_i7.Build> getBuild(
    _i7.GetBuildRequest? request, {
    String? buildBucketUri =
        'https://cr-buildbucket.appspot.com/prpc/buildbucket.v2.Builds',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getBuild,
              [request],
              {#buildBucketUri: buildBucketUri},
            ),
            returnValue: _i17.Future<_i7.Build>.value(
              _FakeBuild_6(
                this,
                Invocation.method(
                  #getBuild,
                  [request],
                  {#buildBucketUri: buildBucketUri},
                ),
              ),
            ),
          )
          as _i17.Future<_i7.Build>);

  @override
  _i17.Future<_i7.ListBuildersResponse> listBuilders(
    _i7.ListBuildersRequest? request, {
    String? buildBucketUri =
        'https://cr-buildbucket.appspot.com/prpc/buildbucket.v2.Builders',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listBuilders,
              [request],
              {#buildBucketUri: buildBucketUri},
            ),
            returnValue: _i17.Future<_i7.ListBuildersResponse>.value(
              _FakeListBuildersResponse_9(
                this,
                Invocation.method(
                  #listBuilders,
                  [request],
                  {#buildBucketUri: buildBucketUri},
                ),
              ),
            ),
          )
          as _i17.Future<_i7.ListBuildersResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CommitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCommitService extends _i1.Mock implements _i30.CommitService {
  MockCommitService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Config get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.Config);

  @override
  _i8.DatastoreServiceProvider get datastoreProvider =>
      (super.noSuchMethod(
            Invocation.getter(#datastoreProvider),
            returnValue:
                (_i10.DatastoreDB db) => _FakeDatastoreService_10(
                  this,
                  Invocation.getter(#datastoreProvider),
                ),
          )
          as _i8.DatastoreServiceProvider);

  @override
  _i17.Future<void> handleCreateGithubRequest(_i31.CreateEvent? createEvent) =>
      (super.noSuchMethod(
            Invocation.method(#handleCreateGithubRequest, [createEvent]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<void> handlePushGithubRequest(Map<String, dynamic>? pushEvent) =>
      (super.noSuchMethod(
            Invocation.method(#handlePushGithubRequest, [pushEvent]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);
}

/// A class which mocks [Config].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfig extends _i1.Mock implements _i2.Config {
  MockConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<_i12.RepositorySlug> get supportedRepos =>
      (super.noSuchMethod(
            Invocation.getter(#supportedRepos),
            returnValue: <_i12.RepositorySlug>{},
          )
          as Set<_i12.RepositorySlug>);

  @override
  Set<_i12.RepositorySlug> get postsubmitSupportedRepos =>
      (super.noSuchMethod(
            Invocation.getter(#postsubmitSupportedRepos),
            returnValue: <_i12.RepositorySlug>{},
          )
          as Set<_i12.RepositorySlug>);

  @override
  String get autosubmitBot =>
      (super.noSuchMethod(
            Invocation.getter(#autosubmitBot),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#autosubmitBot),
            ),
          )
          as String);

  @override
  _i9.Logging get loggingService =>
      (super.noSuchMethod(
            Invocation.getter(#loggingService),
            returnValue: _FakeLogging_11(
              this,
              Invocation.getter(#loggingService),
            ),
          )
          as _i9.Logging);

  @override
  _i17.Future<String> get githubPrivateKey =>
      (super.noSuchMethod(
            Invocation.getter(#githubPrivateKey),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.getter(#githubPrivateKey),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<String> get githubPublicKey =>
      (super.noSuchMethod(
            Invocation.getter(#githubPublicKey),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.getter(#githubPublicKey),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<String> get githubAppId =>
      (super.noSuchMethod(
            Invocation.getter(#githubAppId),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(this, Invocation.getter(#githubAppId)),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<Map<String, dynamic>> get githubAppInstallations =>
      (super.noSuchMethod(
            Invocation.getter(#githubAppInstallations),
            returnValue: _i17.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i17.Future<Map<String, dynamic>>);

  @override
  _i32.CipdVersion get defaultRecipeBundleRef =>
      (super.noSuchMethod(
            Invocation.getter(#defaultRecipeBundleRef),
            returnValue: _i29.dummyValue<_i32.CipdVersion>(
              this,
              Invocation.getter(#defaultRecipeBundleRef),
            ),
          )
          as _i32.CipdVersion);

  @override
  List<String> get releaseBranches =>
      (super.noSuchMethod(
            Invocation.getter(#releaseBranches),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  String get releaseCandidateBranchPath =>
      (super.noSuchMethod(
            Invocation.getter(#releaseCandidateBranchPath),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#releaseCandidateBranchPath),
            ),
          )
          as String);

  @override
  _i10.DatastoreDB get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _FakeDatastoreDB_12(this, Invocation.getter(#db)),
          )
          as _i10.DatastoreDB);

  @override
  int get schedulingShardSize =>
      (super.noSuchMethod(
            Invocation.getter(#schedulingShardSize),
            returnValue: 0,
          )
          as int);

  @override
  int get batchSize =>
      (super.noSuchMethod(Invocation.getter(#batchSize), returnValue: 0)
          as int);

  @override
  int get backfillerTargetLimit =>
      (super.noSuchMethod(
            Invocation.getter(#backfillerTargetLimit),
            returnValue: 0,
          )
          as int);

  @override
  int get backfillerCommitLimit =>
      (super.noSuchMethod(
            Invocation.getter(#backfillerCommitLimit),
            returnValue: 0,
          )
          as int);

  @override
  int get issueAndPRLimit =>
      (super.noSuchMethod(Invocation.getter(#issueAndPRLimit), returnValue: 0)
          as int);

  @override
  _i17.Future<List<String>> get releaseAccounts =>
      (super.noSuchMethod(
            Invocation.getter(#releaseAccounts),
            returnValue: _i17.Future<List<String>>.value(<String>[]),
          )
          as _i17.Future<List<String>>);

  @override
  _i17.Future<String> get oauthClientId =>
      (super.noSuchMethod(
            Invocation.getter(#oauthClientId),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(this, Invocation.getter(#oauthClientId)),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<String> get frobWebhookKey =>
      (super.noSuchMethod(
            Invocation.getter(#frobWebhookKey),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(this, Invocation.getter(#frobWebhookKey)),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<String> get githubOAuthToken =>
      (super.noSuchMethod(
            Invocation.getter(#githubOAuthToken),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.getter(#githubOAuthToken),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  String get wrongBaseBranchPullRequestMessage =>
      (super.noSuchMethod(
            Invocation.getter(#wrongBaseBranchPullRequestMessage),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#wrongBaseBranchPullRequestMessage),
            ),
          )
          as String);

  @override
  String get releaseBranchPullRequestMessage =>
      (super.noSuchMethod(
            Invocation.getter(#releaseBranchPullRequestMessage),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#releaseBranchPullRequestMessage),
            ),
          )
          as String);

  @override
  _i17.Future<String> get webhookKey =>
      (super.noSuchMethod(
            Invocation.getter(#webhookKey),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(this, Invocation.getter(#webhookKey)),
            ),
          )
          as _i17.Future<String>);

  @override
  String get mergeConflictPullRequestMessage =>
      (super.noSuchMethod(
            Invocation.getter(#mergeConflictPullRequestMessage),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#mergeConflictPullRequestMessage),
            ),
          )
          as String);

  @override
  String get missingTestsPullRequestMessage =>
      (super.noSuchMethod(
            Invocation.getter(#missingTestsPullRequestMessage),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#missingTestsPullRequestMessage),
            ),
          )
          as String);

  @override
  String get flutterGoldPending =>
      (super.noSuchMethod(
            Invocation.getter(#flutterGoldPending),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterGoldPending),
            ),
          )
          as String);

  @override
  String get flutterGoldSuccess =>
      (super.noSuchMethod(
            Invocation.getter(#flutterGoldSuccess),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterGoldSuccess),
            ),
          )
          as String);

  @override
  String get flutterGoldChanges =>
      (super.noSuchMethod(
            Invocation.getter(#flutterGoldChanges),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterGoldChanges),
            ),
          )
          as String);

  @override
  String get flutterGoldStalePR =>
      (super.noSuchMethod(
            Invocation.getter(#flutterGoldStalePR),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterGoldStalePR),
            ),
          )
          as String);

  @override
  String get flutterGoldDraftChange =>
      (super.noSuchMethod(
            Invocation.getter(#flutterGoldDraftChange),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterGoldDraftChange),
            ),
          )
          as String);

  @override
  int get maxFilesChangedForSkippingEnginePhase =>
      (super.noSuchMethod(
            Invocation.getter(#maxFilesChangedForSkippingEnginePhase),
            returnValue: 0,
          )
          as int);

  @override
  int get maxLuciTaskRetries =>
      (super.noSuchMethod(
            Invocation.getter(#maxLuciTaskRetries),
            returnValue: 0,
          )
          as int);

  @override
  int get commitNumber =>
      (super.noSuchMethod(Invocation.getter(#commitNumber), returnValue: 0)
          as int);

  @override
  _i11.KeyHelper get keyHelper =>
      (super.noSuchMethod(
            Invocation.getter(#keyHelper),
            returnValue: _FakeKeyHelper_13(this, Invocation.getter(#keyHelper)),
          )
          as _i11.KeyHelper);

  @override
  int get maxRecords =>
      (super.noSuchMethod(Invocation.getter(#maxRecords), returnValue: 0)
          as int);

  @override
  Duration get githubRequestDelay =>
      (super.noSuchMethod(
            Invocation.getter(#githubRequestDelay),
            returnValue: _FakeDuration_14(
              this,
              Invocation.getter(#githubRequestDelay),
            ),
          )
          as Duration);

  @override
  String get flutterBuild =>
      (super.noSuchMethod(
            Invocation.getter(#flutterBuild),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterBuild),
            ),
          )
          as String);

  @override
  String get flutterTreeStatusRed =>
      (super.noSuchMethod(
            Invocation.getter(#flutterTreeStatusRed),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterTreeStatusRed),
            ),
          )
          as String);

  @override
  String get flutterTreeStatusEmergency =>
      (super.noSuchMethod(
            Invocation.getter(#flutterTreeStatusEmergency),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#flutterTreeStatusEmergency),
            ),
          )
          as String);

  @override
  String get waitingForTreeToGoGreenLabelName =>
      (super.noSuchMethod(
            Invocation.getter(#waitingForTreeToGoGreenLabelName),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#waitingForTreeToGoGreenLabelName),
            ),
          )
          as String);

  @override
  Set<String> get rollerAccounts =>
      (super.noSuchMethod(
            Invocation.getter(#rollerAccounts),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  _i17.Future<Iterable<_i33.Branch>> getBranches(_i12.RepositorySlug? slug) =>
      (super.noSuchMethod(
            Invocation.method(#getBranches, [slug]),
            returnValue: _i17.Future<Iterable<_i33.Branch>>.value(
              <_i33.Branch>[],
            ),
          )
          as _i17.Future<Iterable<_i33.Branch>>);

  @override
  String wrongHeadBranchPullRequestMessage(String? branch) =>
      (super.noSuchMethod(
            Invocation.method(#wrongHeadBranchPullRequestMessage, [branch]),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.method(#wrongHeadBranchPullRequestMessage, [branch]),
            ),
          )
          as String);

  @override
  String flutterGoldInitialAlert(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#flutterGoldInitialAlert, [url]),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.method(#flutterGoldInitialAlert, [url]),
            ),
          )
          as String);

  @override
  String flutterGoldFollowUpAlert(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#flutterGoldFollowUpAlert, [url]),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.method(#flutterGoldFollowUpAlert, [url]),
            ),
          )
          as String);

  @override
  String flutterGoldAlertConstant(_i12.RepositorySlug? slug) =>
      (super.noSuchMethod(
            Invocation.method(#flutterGoldAlertConstant, [slug]),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.method(#flutterGoldAlertConstant, [slug]),
            ),
          )
          as String);

  @override
  String flutterGoldCommentID(_i12.PullRequest? pr) =>
      (super.noSuchMethod(
            Invocation.method(#flutterGoldCommentID, [pr]),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.method(#flutterGoldCommentID, [pr]),
            ),
          )
          as String);

  @override
  _i17.Future<String> generateJsonWebToken() =>
      (super.noSuchMethod(
            Invocation.method(#generateJsonWebToken, []),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.method(#generateJsonWebToken, []),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<String> generateGithubToken(_i12.RepositorySlug? slug) =>
      (super.noSuchMethod(
            Invocation.method(#generateGithubToken, [slug]),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.method(#generateGithubToken, [slug]),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<_i12.GitHub> createGitHubClient({
    _i12.PullRequest? pullRequest,
    _i12.RepositorySlug? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createGitHubClient, [], {
              #pullRequest: pullRequest,
              #slug: slug,
            }),
            returnValue: _i17.Future<_i12.GitHub>.value(
              _FakeGitHub_15(
                this,
                Invocation.method(#createGitHubClient, [], {
                  #pullRequest: pullRequest,
                  #slug: slug,
                }),
              ),
            ),
          )
          as _i17.Future<_i12.GitHub>);

  @override
  _i12.GitHub createGitHubClientWithToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#createGitHubClientWithToken, [token]),
            returnValue: _FakeGitHub_15(
              this,
              Invocation.method(#createGitHubClientWithToken, [token]),
            ),
          )
          as _i12.GitHub);

  @override
  _i17.Future<_i13.GraphQLClient> createGitHubGraphQLClient() =>
      (super.noSuchMethod(
            Invocation.method(#createGitHubGraphQLClient, []),
            returnValue: _i17.Future<_i13.GraphQLClient>.value(
              _FakeGraphQLClient_16(
                this,
                Invocation.method(#createGitHubGraphQLClient, []),
              ),
            ),
          )
          as _i17.Future<_i13.GraphQLClient>);

  @override
  _i17.Future<_i14.FirestoreService> createFirestoreService() =>
      (super.noSuchMethod(
            Invocation.method(#createFirestoreService, []),
            returnValue: _i17.Future<_i14.FirestoreService>.value(
              _FakeFirestoreService_17(
                this,
                Invocation.method(#createFirestoreService, []),
              ),
            ),
          )
          as _i17.Future<_i14.FirestoreService>);

  @override
  _i17.Future<_i15.BigqueryService> createBigQueryService() =>
      (super.noSuchMethod(
            Invocation.method(#createBigQueryService, []),
            returnValue: _i17.Future<_i15.BigqueryService>.value(
              _FakeBigqueryService_18(
                this,
                Invocation.method(#createBigQueryService, []),
              ),
            ),
          )
          as _i17.Future<_i15.BigqueryService>);

  @override
  _i17.Future<_i5.TabledataResource> createTabledataResourceApi() =>
      (super.noSuchMethod(
            Invocation.method(#createTabledataResourceApi, []),
            returnValue: _i17.Future<_i5.TabledataResource>.value(
              _FakeTabledataResource_3(
                this,
                Invocation.method(#createTabledataResourceApi, []),
              ),
            ),
          )
          as _i17.Future<_i5.TabledataResource>);

  @override
  _i17.Future<_i16.GithubService> createDefaultGitHubService() =>
      (super.noSuchMethod(
            Invocation.method(#createDefaultGitHubService, []),
            returnValue: _i17.Future<_i16.GithubService>.value(
              _FakeGithubService_19(
                this,
                Invocation.method(#createDefaultGitHubService, []),
              ),
            ),
          )
          as _i17.Future<_i16.GithubService>);

  @override
  _i17.Future<_i16.GithubService> createGithubService(
    _i12.RepositorySlug? slug,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createGithubService, [slug]),
            returnValue: _i17.Future<_i16.GithubService>.value(
              _FakeGithubService_19(
                this,
                Invocation.method(#createGithubService, [slug]),
              ),
            ),
          )
          as _i17.Future<_i16.GithubService>);

  @override
  _i16.GithubService createGithubServiceWithToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#createGithubServiceWithToken, [token]),
            returnValue: _FakeGithubService_19(
              this,
              Invocation.method(#createGithubServiceWithToken, [token]),
            ),
          )
          as _i16.GithubService);
}

/// A class which mocks [DatastoreService].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDatastoreService extends _i1.Mock implements _i8.DatastoreService {
  MockDatastoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get maxEntityGroups =>
      (super.noSuchMethod(Invocation.getter(#maxEntityGroups), returnValue: 0)
          as int);

  @override
  _i10.DatastoreDB get db =>
      (super.noSuchMethod(
            Invocation.getter(#db),
            returnValue: _FakeDatastoreDB_12(this, Invocation.getter(#db)),
          )
          as _i10.DatastoreDB);

  @override
  _i34.RetryOptions get retryOptions =>
      (super.noSuchMethod(
            Invocation.getter(#retryOptions),
            returnValue: _i29.dummyValue<_i34.RetryOptions>(
              this,
              Invocation.getter(#retryOptions),
            ),
          )
          as _i34.RetryOptions);

  @override
  _i17.Stream<_i35.Commit> queryRecentCommits({
    int? limit = 100,
    int? timestamp,
    String? branch,
    required _i12.RepositorySlug? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#queryRecentCommits, [], {
              #limit: limit,
              #timestamp: timestamp,
              #branch: branch,
              #slug: slug,
            }),
            returnValue: _i17.Stream<_i35.Commit>.empty(),
          )
          as _i17.Stream<_i35.Commit>);

  @override
  _i17.Stream<_i33.Branch> queryBranches() =>
      (super.noSuchMethod(
            Invocation.method(#queryBranches, []),
            returnValue: _i17.Stream<_i33.Branch>.empty(),
          )
          as _i17.Stream<_i33.Branch>);

  @override
  _i17.Stream<_i36.Task> queryRecentTasksByName({
    int? limit = 100,
    required String? name,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#queryRecentTasksByName, [], {
              #limit: limit,
              #name: name,
            }),
            returnValue: _i17.Stream<_i36.Task>.empty(),
          )
          as _i17.Stream<_i36.Task>);

  @override
  _i17.Stream<_i36.FullTask> queryRecentTasks({
    String? taskName,
    int? commitLimit = 20,
    String? branch,
    required _i12.RepositorySlug? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#queryRecentTasks, [], {
              #taskName: taskName,
              #commitLimit: commitLimit,
              #branch: branch,
              #slug: slug,
            }),
            returnValue: _i17.Stream<_i36.FullTask>.empty(),
          )
          as _i17.Stream<_i36.FullTask>);

  @override
  _i17.Future<List<List<_i10.Model<dynamic>>>> shard(
    List<_i10.Model<dynamic>>? rows,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#shard, [rows]),
            returnValue: _i17.Future<List<List<_i10.Model<dynamic>>>>.value(
              <List<_i10.Model<dynamic>>>[],
            ),
          )
          as _i17.Future<List<List<_i10.Model<dynamic>>>>);

  @override
  _i17.Future<void> insert(List<_i10.Model<dynamic>>? rows) =>
      (super.noSuchMethod(
            Invocation.method(#insert, [rows]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<List<T?>> lookupByKey<T extends _i10.Model<dynamic>>(
    List<_i10.Key<dynamic>>? keys,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#lookupByKey, [keys]),
            returnValue: _i17.Future<List<T?>>.value(<T?>[]),
          )
          as _i17.Future<List<T?>>);

  @override
  _i17.Future<T> lookupByValue<T extends _i10.Model<dynamic>>(
    _i10.Key<dynamic>? key, {
    T Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lookupByValue, [key], {#orElse: orElse}),
            returnValue:
                _i29.ifNotNull(
                  _i29.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#lookupByValue, [key], {#orElse: orElse}),
                  ),
                  (T v) => _i17.Future<T>.value(v),
                ) ??
                _FakeFuture_20<T>(
                  this,
                  Invocation.method(#lookupByValue, [key], {#orElse: orElse}),
                ),
          )
          as _i17.Future<T>);

  @override
  _i17.Future<T?> withTransaction<T>(
    _i17.Future<T> Function(_i10.Transaction)? handler,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#withTransaction, [handler]),
            returnValue: _i17.Future<T?>.value(),
          )
          as _i17.Future<T?>);

  @override
  _i17.Future<_i36.Task?> getTaskFromBuildbucketBuild(
    _i7.Build? build, {
    String? customName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getTaskFromBuildbucketBuild,
              [build],
              {#customName: customName},
            ),
            returnValue: _i17.Future<_i36.Task?>.value(),
          )
          as _i17.Future<_i36.Task?>);
}

/// A class which mocks [FakeEntry].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeEntry extends _i1.Mock implements _i37.FakeEntry {
  MockFakeEntry() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i38.Uint8List get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: _i38.Uint8List(0),
          )
          as _i38.Uint8List);

  @override
  set value(_i38.Uint8List? _value) => super.noSuchMethod(
    Invocation.setter(#value, _value),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<_i38.Uint8List> get([
    _i17.Future<_i38.Uint8List?> Function()? create,
    Duration? ttl,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#get, [create, ttl]),
            returnValue: _i17.Future<_i38.Uint8List>.value(_i38.Uint8List(0)),
          )
          as _i17.Future<_i38.Uint8List>);

  @override
  _i17.Future<void> purge({int? retries = 0}) =>
      (super.noSuchMethod(
            Invocation.method(#purge, [], {#retries: retries}),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<_i38.Uint8List?> set(_i38.Uint8List? value, [Duration? ttl]) =>
      (super.noSuchMethod(
            Invocation.method(#set, [value, ttl]),
            returnValue: _i17.Future<_i38.Uint8List?>.value(),
          )
          as _i17.Future<_i38.Uint8List?>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i14.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AccessClientProvider get accessClientProvider =>
      (super.noSuchMethod(
            Invocation.getter(#accessClientProvider),
            returnValue: _FakeAccessClientProvider_2(
              this,
              Invocation.getter(#accessClientProvider),
            ),
          )
          as _i4.AccessClientProvider);

  @override
  _i17.Future<_i18.ProjectsDatabasesDocumentsResource> documentResource() =>
      (super.noSuchMethod(
            Invocation.method(#documentResource, []),
            returnValue:
                _i17.Future<_i18.ProjectsDatabasesDocumentsResource>.value(
                  _FakeProjectsDatabasesDocumentsResource_21(
                    this,
                    Invocation.method(#documentResource, []),
                  ),
                ),
          )
          as _i17.Future<_i18.ProjectsDatabasesDocumentsResource>);

  @override
  _i17.Future<_i18.Document> getDocument(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [name]),
            returnValue: _i17.Future<_i18.Document>.value(
              _FakeDocument_22(this, Invocation.method(#getDocument, [name])),
            ),
          )
          as _i17.Future<_i18.Document>);

  @override
  _i17.Future<_i18.BatchWriteResponse> batchWriteDocuments(
    _i18.BatchWriteRequest? request,
    String? database,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#batchWriteDocuments, [request, database]),
            returnValue: _i17.Future<_i18.BatchWriteResponse>.value(
              _FakeBatchWriteResponse_23(
                this,
                Invocation.method(#batchWriteDocuments, [request, database]),
              ),
            ),
          )
          as _i17.Future<_i18.BatchWriteResponse>);

  @override
  _i17.Future<_i18.CommitResponse> writeViaTransaction(
    List<_i18.Write>? writes,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#writeViaTransaction, [writes]),
            returnValue: _i17.Future<_i18.CommitResponse>.value(
              _FakeCommitResponse_24(
                this,
                Invocation.method(#writeViaTransaction, [writes]),
              ),
            ),
          )
          as _i17.Future<_i18.CommitResponse>);

  @override
  _i17.Future<List<_i39.Commit>> queryRecentCommits({
    int? limit = 100,
    int? timestamp,
    String? branch,
    required _i12.RepositorySlug? slug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#queryRecentCommits, [], {
              #limit: limit,
              #timestamp: timestamp,
              #branch: branch,
              #slug: slug,
            }),
            returnValue: _i17.Future<List<_i39.Commit>>.value(<_i39.Commit>[]),
          )
          as _i17.Future<List<_i39.Commit>>);

  @override
  _i17.Future<List<_i40.Task>> queryRecentTasksByName({
    int? limit = 100,
    required String? name,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#queryRecentTasksByName, [], {
              #limit: limit,
              #name: name,
            }),
            returnValue: _i17.Future<List<_i40.Task>>.value(<_i40.Task>[]),
          )
          as _i17.Future<List<_i40.Task>>);

  @override
  _i17.Future<List<_i40.Task>> queryCommitTasks(String? commitSha) =>
      (super.noSuchMethod(
            Invocation.method(#queryCommitTasks, [commitSha]),
            returnValue: _i17.Future<List<_i40.Task>>.value(<_i40.Task>[]),
          )
          as _i17.Future<List<_i40.Task>>);

  @override
  _i17.Future<_i19.GithubGoldStatus> queryLastGoldStatus(
    _i12.RepositorySlug? slug,
    int? prNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryLastGoldStatus, [slug, prNumber]),
            returnValue: _i17.Future<_i19.GithubGoldStatus>.value(
              _FakeGithubGoldStatus_25(
                this,
                Invocation.method(#queryLastGoldStatus, [slug, prNumber]),
              ),
            ),
          )
          as _i17.Future<_i19.GithubGoldStatus>);

  @override
  _i17.Future<_i20.GithubBuildStatus> queryLastBuildStatus(
    _i12.RepositorySlug? slug,
    int? prNumber,
    String? head,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryLastBuildStatus, [slug, prNumber, head]),
            returnValue: _i17.Future<_i20.GithubBuildStatus>.value(
              _FakeGithubBuildStatus_26(
                this,
                Invocation.method(#queryLastBuildStatus, [
                  slug,
                  prNumber,
                  head,
                ]),
              ),
            ),
          )
          as _i17.Future<_i20.GithubBuildStatus>);

  @override
  _i18.Value getValueFromFilter(Object? comparisonOject) =>
      (super.noSuchMethod(
            Invocation.method(#getValueFromFilter, [comparisonOject]),
            returnValue: _FakeValue_27(
              this,
              Invocation.method(#getValueFromFilter, [comparisonOject]),
            ),
          )
          as _i18.Value);

  @override
  _i18.Filter generateFilter(
    Map<String, Object>? filterMap,
    String? compositeFilterOp,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateFilter, [filterMap, compositeFilterOp]),
            returnValue: _FakeFilter_28(
              this,
              Invocation.method(#generateFilter, [
                filterMap,
                compositeFilterOp,
              ]),
            ),
          )
          as _i18.Filter);

  @override
  _i17.Future<List<_i18.Document>> query(
    String? collectionId,
    Map<String, Object>? filterMap, {
    int? limit,
    Map<String, String>? orderMap,
    String? compositeFilterOp = 'AND',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #query,
              [collectionId, filterMap],
              {
                #limit: limit,
                #orderMap: orderMap,
                #compositeFilterOp: compositeFilterOp,
              },
            ),
            returnValue: _i17.Future<List<_i18.Document>>.value(
              <_i18.Document>[],
            ),
          )
          as _i17.Future<List<_i18.Document>>);

  @override
  List<_i18.Document> documentsFromQueryResponse(
    List<_i18.RunQueryResponseElement>? runQueryResponseElements,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#documentsFromQueryResponse, [
              runQueryResponseElements,
            ]),
            returnValue: <_i18.Document>[],
          )
          as List<_i18.Document>);
}

/// A class which mocks [IssuesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIssuesService extends _i1.Mock implements _i12.IssuesService {
  MockIssuesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GitHub get github =>
      (super.noSuchMethod(
            Invocation.getter(#github),
            returnValue: _FakeGitHub_15(this, Invocation.getter(#github)),
          )
          as _i12.GitHub);

  @override
  _i17.Stream<_i12.Issue> listAll({
    int? milestoneNumber,
    String? state,
    String? direction,
    String? sort,
    DateTime? since,
    int? perPage,
    List<String>? labels,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listAll, [], {
              #milestoneNumber: milestoneNumber,
              #state: state,
              #direction: direction,
              #sort: sort,
              #since: since,
              #perPage: perPage,
              #labels: labels,
            }),
            returnValue: _i17.Stream<_i12.Issue>.empty(),
          )
          as _i17.Stream<_i12.Issue>);

  @override
  _i17.Stream<_i12.Issue> listByUser({
    int? milestoneNumber,
    String? state,
    String? direction,
    String? sort,
    DateTime? since,
    int? perPage,
    List<String>? labels,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listByUser, [], {
              #milestoneNumber: milestoneNumber,
              #state: state,
              #direction: direction,
              #sort: sort,
              #since: since,
              #perPage: perPage,
              #labels: labels,
            }),
            returnValue: _i17.Stream<_i12.Issue>.empty(),
          )
          as _i17.Stream<_i12.Issue>);

  @override
  _i17.Stream<_i12.Issue> listByOrg(
    String? org, {
    int? milestoneNumber,
    String? state,
    String? direction,
    String? sort,
    DateTime? since,
    int? perPage,
    List<String>? labels,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listByOrg,
              [org],
              {
                #milestoneNumber: milestoneNumber,
                #state: state,
                #direction: direction,
                #sort: sort,
                #since: since,
                #perPage: perPage,
                #labels: labels,
              },
            ),
            returnValue: _i17.Stream<_i12.Issue>.empty(),
          )
          as _i17.Stream<_i12.Issue>);

  @override
  _i17.Stream<_i12.Issue> listByRepo(
    _i12.RepositorySlug? slug, {
    int? milestoneNumber,
    String? state,
    String? direction,
    String? sort,
    DateTime? since,
    int? perPage,
    List<String>? labels,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listByRepo,
              [slug],
              {
                #milestoneNumber: milestoneNumber,
                #state: state,
                #direction: direction,
                #sort: sort,
                #since: since,
                #perPage: perPage,
                #labels: labels,
              },
            ),
            returnValue: _i17.Stream<_i12.Issue>.empty(),
          )
          as _i17.Stream<_i12.Issue>);

  @override
  _i17.Stream<_i12.Reaction> listReactions(
    _i12.RepositorySlug? slug,
    int? issueNumber, {
    _i12.ReactionType? content,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listReactions,
              [slug, issueNumber],
              {#content: content},
            ),
            returnValue: _i17.Stream<_i12.Reaction>.empty(),
          )
          as _i17.Stream<_i12.Reaction>);

  @override
  _i17.Future<_i12.Issue> edit(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    _i12.IssueRequest? issue,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#edit, [slug, issueNumber, issue]),
            returnValue: _i17.Future<_i12.Issue>.value(
              _FakeIssue_29(
                this,
                Invocation.method(#edit, [slug, issueNumber, issue]),
              ),
            ),
          )
          as _i17.Future<_i12.Issue>);

  @override
  _i17.Future<_i12.Issue> get(_i12.RepositorySlug? slug, int? issueNumber) =>
      (super.noSuchMethod(
            Invocation.method(#get, [slug, issueNumber]),
            returnValue: _i17.Future<_i12.Issue>.value(
              _FakeIssue_29(this, Invocation.method(#get, [slug, issueNumber])),
            ),
          )
          as _i17.Future<_i12.Issue>);

  @override
  _i17.Future<_i12.Issue> create(
    _i12.RepositorySlug? slug,
    _i12.IssueRequest? issue,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#create, [slug, issue]),
            returnValue: _i17.Future<_i12.Issue>.value(
              _FakeIssue_29(this, Invocation.method(#create, [slug, issue])),
            ),
          )
          as _i17.Future<_i12.Issue>);

  @override
  _i17.Stream<_i12.User> listAssignees(_i12.RepositorySlug? slug) =>
      (super.noSuchMethod(
            Invocation.method(#listAssignees, [slug]),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);

  @override
  _i17.Future<bool> isAssignee(_i12.RepositorySlug? slug, String? repoName) =>
      (super.noSuchMethod(
            Invocation.method(#isAssignee, [slug, repoName]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.IssueComment> listCommentsByIssue(
    _i12.RepositorySlug? slug,
    int? issueNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listCommentsByIssue, [slug, issueNumber]),
            returnValue: _i17.Stream<_i12.IssueComment>.empty(),
          )
          as _i17.Stream<_i12.IssueComment>);

  @override
  _i17.Stream<_i12.IssueComment> listCommentsByRepo(
    _i12.RepositorySlug? slug,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listCommentsByRepo, [slug]),
            returnValue: _i17.Stream<_i12.IssueComment>.empty(),
          )
          as _i17.Stream<_i12.IssueComment>);

  @override
  _i17.Future<_i12.IssueComment> getComment(
    _i12.RepositorySlug? slug,
    int? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getComment, [slug, id]),
            returnValue: _i17.Future<_i12.IssueComment>.value(
              _FakeIssueComment_30(
                this,
                Invocation.method(#getComment, [slug, id]),
              ),
            ),
          )
          as _i17.Future<_i12.IssueComment>);

  @override
  _i17.Future<_i12.IssueComment> createComment(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    String? body,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createComment, [slug, issueNumber, body]),
            returnValue: _i17.Future<_i12.IssueComment>.value(
              _FakeIssueComment_30(
                this,
                Invocation.method(#createComment, [slug, issueNumber, body]),
              ),
            ),
          )
          as _i17.Future<_i12.IssueComment>);

  @override
  _i17.Future<_i12.IssueComment> updateComment(
    _i12.RepositorySlug? slug,
    int? id,
    String? body,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateComment, [slug, id, body]),
            returnValue: _i17.Future<_i12.IssueComment>.value(
              _FakeIssueComment_30(
                this,
                Invocation.method(#updateComment, [slug, id, body]),
              ),
            ),
          )
          as _i17.Future<_i12.IssueComment>);

  @override
  _i17.Future<bool> deleteComment(_i12.RepositorySlug? slug, int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteComment, [slug, id]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.IssueLabel> listLabels(_i12.RepositorySlug? slug) =>
      (super.noSuchMethod(
            Invocation.method(#listLabels, [slug]),
            returnValue: _i17.Stream<_i12.IssueLabel>.empty(),
          )
          as _i17.Stream<_i12.IssueLabel>);

  @override
  _i17.Future<_i12.IssueLabel> getLabel(
    _i12.RepositorySlug? slug,
    String? name,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLabel, [slug, name]),
            returnValue: _i17.Future<_i12.IssueLabel>.value(
              _FakeIssueLabel_31(
                this,
                Invocation.method(#getLabel, [slug, name]),
              ),
            ),
          )
          as _i17.Future<_i12.IssueLabel>);

  @override
  _i17.Future<_i12.IssueLabel> createLabel(
    _i12.RepositorySlug? slug,
    String? name, {
    String? color,
    String? description,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createLabel,
              [slug, name],
              {#color: color, #description: description},
            ),
            returnValue: _i17.Future<_i12.IssueLabel>.value(
              _FakeIssueLabel_31(
                this,
                Invocation.method(
                  #createLabel,
                  [slug, name],
                  {#color: color, #description: description},
                ),
              ),
            ),
          )
          as _i17.Future<_i12.IssueLabel>);

  @override
  _i17.Future<_i12.IssueLabel> editLabel(
    _i12.RepositorySlug? slug,
    String? name,
    String? color,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#editLabel, [slug, name, color]),
            returnValue: _i17.Future<_i12.IssueLabel>.value(
              _FakeIssueLabel_31(
                this,
                Invocation.method(#editLabel, [slug, name, color]),
              ),
            ),
          )
          as _i17.Future<_i12.IssueLabel>);

  @override
  _i17.Future<_i12.IssueLabel> updateLabel(
    _i12.RepositorySlug? slug,
    String? name, {
    String? newName,
    String? color,
    String? description,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateLabel,
              [slug, name],
              {#newName: newName, #color: color, #description: description},
            ),
            returnValue: _i17.Future<_i12.IssueLabel>.value(
              _FakeIssueLabel_31(
                this,
                Invocation.method(
                  #updateLabel,
                  [slug, name],
                  {#newName: newName, #color: color, #description: description},
                ),
              ),
            ),
          )
          as _i17.Future<_i12.IssueLabel>);

  @override
  _i17.Future<bool> deleteLabel(_i12.RepositorySlug? slug, String? name) =>
      (super.noSuchMethod(
            Invocation.method(#deleteLabel, [slug, name]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.IssueLabel> listLabelsByIssue(
    _i12.RepositorySlug? slug,
    int? issueNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listLabelsByIssue, [slug, issueNumber]),
            returnValue: _i17.Stream<_i12.IssueLabel>.empty(),
          )
          as _i17.Stream<_i12.IssueLabel>);

  @override
  _i17.Future<List<_i12.IssueLabel>> addLabelsToIssue(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    List<String>? labels,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addLabelsToIssue, [slug, issueNumber, labels]),
            returnValue: _i17.Future<List<_i12.IssueLabel>>.value(
              <_i12.IssueLabel>[],
            ),
          )
          as _i17.Future<List<_i12.IssueLabel>>);

  @override
  _i17.Future<List<_i12.IssueLabel>> replaceLabelsForIssue(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    List<String>? labels,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#replaceLabelsForIssue, [
              slug,
              issueNumber,
              labels,
            ]),
            returnValue: _i17.Future<List<_i12.IssueLabel>>.value(
              <_i12.IssueLabel>[],
            ),
          )
          as _i17.Future<List<_i12.IssueLabel>>);

  @override
  _i17.Future<bool> removeLabelForIssue(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    String? label,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeLabelForIssue, [slug, issueNumber, label]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<bool> removeAllLabelsForIssue(
    _i12.RepositorySlug? slug,
    int? issueNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeAllLabelsForIssue, [slug, issueNumber]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.Milestone> listMilestones(_i12.RepositorySlug? slug) =>
      (super.noSuchMethod(
            Invocation.method(#listMilestones, [slug]),
            returnValue: _i17.Stream<_i12.Milestone>.empty(),
          )
          as _i17.Stream<_i12.Milestone>);

  @override
  _i17.Future<_i12.Milestone> createMilestone(
    _i12.RepositorySlug? slug,
    _i12.CreateMilestone? request,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createMilestone, [slug, request]),
            returnValue: _i17.Future<_i12.Milestone>.value(
              _FakeMilestone_32(
                this,
                Invocation.method(#createMilestone, [slug, request]),
              ),
            ),
          )
          as _i17.Future<_i12.Milestone>);

  @override
  _i17.Future<bool> deleteMilestone(_i12.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMilestone, [slug, number]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.TimelineEvent> listTimeline(
    _i12.RepositorySlug? slug,
    int? issueNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listTimeline, [slug, issueNumber]),
            returnValue: _i17.Stream<_i12.TimelineEvent>.empty(),
          )
          as _i17.Stream<_i12.TimelineEvent>);

  @override
  _i17.Future<void> lock(
    _i12.RepositorySlug? slug,
    int? number, {
    String? lockReason,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lock, [slug, number], {#lockReason: lockReason}),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<void> unlock(_i12.RepositorySlug? slug, int? number) =>
      (super.noSuchMethod(
            Invocation.method(#unlock, [slug, number]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);
}

/// A class which mocks [GithubChecksService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubChecksService extends _i1.Mock
    implements _i14.GithubChecksService {
  MockGithubChecksService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Config get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.Config);

  @override
  set config(_i2.Config? _config) => super.noSuchMethod(
    Invocation.setter(#config, _config),
    returnValueForMissingStub: null,
  );

  @override
  _i21.GithubChecksUtil get githubChecksUtil =>
      (super.noSuchMethod(
            Invocation.getter(#githubChecksUtil),
            returnValue: _FakeGithubChecksUtil_33(
              this,
              Invocation.getter(#githubChecksUtil),
            ),
          )
          as _i21.GithubChecksUtil);

  @override
  set githubChecksUtil(_i21.GithubChecksUtil? _githubChecksUtil) =>
      super.noSuchMethod(
        Invocation.setter(#githubChecksUtil, _githubChecksUtil),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<bool> updateCheckStatus({
    required _i7.Build? build,
    required _i14.LuciBuildService? luciBuildService,
    required _i12.RepositorySlug? slug,
    required int? checkRunId,
    bool? rescheduled = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateCheckStatus, [], {
              #build: build,
              #luciBuildService: luciBuildService,
              #slug: slug,
              #checkRunId: checkRunId,
              #rescheduled: rescheduled,
            }),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  bool taskFailed(_i7.Status? status) =>
      (super.noSuchMethod(
            Invocation.method(#taskFailed, [status]),
            returnValue: false,
          )
          as bool);

  @override
  String getGithubSummary(String? summary) =>
      (super.noSuchMethod(
            Invocation.method(#getGithubSummary, [summary]),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.method(#getGithubSummary, [summary]),
            ),
          )
          as String);

  @override
  _i12.CheckRunConclusion conclusionForResult(_i7.Status? status) =>
      (super.noSuchMethod(
            Invocation.method(#conclusionForResult, [status]),
            returnValue: _FakeCheckRunConclusion_34(
              this,
              Invocation.method(#conclusionForResult, [status]),
            ),
          )
          as _i12.CheckRunConclusion);

  @override
  _i12.CheckRunStatus statusForResult(_i7.Status? status) =>
      (super.noSuchMethod(
            Invocation.method(#statusForResult, [status]),
            returnValue: _FakeCheckRunStatus_35(
              this,
              Invocation.method(#statusForResult, [status]),
            ),
          )
          as _i12.CheckRunStatus);

  @override
  _i17.Future<_i12.PullRequest?> findMatchingPullRequest(
    _i12.RepositorySlug? slug,
    String? headSha,
    int? checkSuiteId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findMatchingPullRequest, [
              slug,
              headSha,
              checkSuiteId,
            ]),
            returnValue: _i17.Future<_i12.PullRequest?>.value(),
          )
          as _i17.Future<_i12.PullRequest?>);
}

/// A class which mocks [GithubChecksUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubChecksUtil extends _i1.Mock implements _i21.GithubChecksUtil {
  MockGithubChecksUtil() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<Map<String, _i12.CheckRun>> allCheckRuns(
    _i12.GitHub? gitHubClient,
    _i31.CheckSuiteEvent? checkSuiteEvent,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#allCheckRuns, [gitHubClient, checkSuiteEvent]),
            returnValue: _i17.Future<Map<String, _i12.CheckRun>>.value(
              <String, _i12.CheckRun>{},
            ),
          )
          as _i17.Future<Map<String, _i12.CheckRun>>);

  @override
  _i17.Future<_i12.CheckSuite> getCheckSuite(
    _i12.GitHub? gitHubClient,
    _i12.RepositorySlug? slug,
    int? checkSuiteId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCheckSuite, [
              gitHubClient,
              slug,
              checkSuiteId,
            ]),
            returnValue: _i17.Future<_i12.CheckSuite>.value(
              _FakeCheckSuite_36(
                this,
                Invocation.method(#getCheckSuite, [
                  gitHubClient,
                  slug,
                  checkSuiteId,
                ]),
              ),
            ),
          )
          as _i17.Future<_i12.CheckSuite>);

  @override
  _i17.Future<List<_i12.CheckSuite>> listCheckSuitesForRef(
    _i12.GitHub? gitHubClient,
    _i12.RepositorySlug? slug, {
    required String? ref,
    int? appId,
    String? checkName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listCheckSuitesForRef,
              [gitHubClient, slug],
              {#ref: ref, #appId: appId, #checkName: checkName},
            ),
            returnValue: _i17.Future<List<_i12.CheckSuite>>.value(
              <_i12.CheckSuite>[],
            ),
          )
          as _i17.Future<List<_i12.CheckSuite>>);

  @override
  _i17.Future<void> updateCheckRun(
    _i2.Config? config,
    _i12.RepositorySlug? slug,
    _i12.CheckRun? checkRun, {
    _i12.CheckRunStatus? status = _i12.CheckRunStatus.queued,
    _i12.CheckRunConclusion? conclusion,
    String? detailsUrl,
    _i12.CheckRunOutput? output,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #updateCheckRun,
              [config, slug, checkRun],
              {
                #status: status,
                #conclusion: conclusion,
                #detailsUrl: detailsUrl,
                #output: output,
              },
            ),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<_i12.CheckRun> getCheckRun(
    _i2.Config? config,
    _i12.RepositorySlug? slug,
    int? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCheckRun, [config, slug, id]),
            returnValue: _i17.Future<_i12.CheckRun>.value(
              _FakeCheckRun_37(
                this,
                Invocation.method(#getCheckRun, [config, slug, id]),
              ),
            ),
          )
          as _i17.Future<_i12.CheckRun>);

  @override
  _i17.Future<_i12.CheckRun> createCheckRun(
    _i2.Config? config,
    _i12.RepositorySlug? slug,
    String? sha,
    String? name, {
    _i12.CheckRunOutput? output,
    _i12.CheckRunConclusion? conclusion,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createCheckRun,
              [config, slug, sha, name],
              {#output: output, #conclusion: conclusion},
            ),
            returnValue: _i17.Future<_i12.CheckRun>.value(
              _FakeCheckRun_37(
                this,
                Invocation.method(
                  #createCheckRun,
                  [config, slug, sha, name],
                  {#output: output, #conclusion: conclusion},
                ),
              ),
            ),
          )
          as _i17.Future<_i12.CheckRun>);
}

/// A class which mocks [GithubService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubService extends _i1.Mock implements _i16.GithubService {
  MockGithubService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GitHub get github =>
      (super.noSuchMethod(
            Invocation.getter(#github),
            returnValue: _FakeGitHub_15(this, Invocation.getter(#github)),
          )
          as _i12.GitHub);

  @override
  _i17.Future<List<_i12.RepositoryCommit>> listBranchedCommits(
    _i12.RepositorySlug? slug,
    String? branch,
    int? lastCommitTimestampMills,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listBranchedCommits, [
              slug,
              branch,
              lastCommitTimestampMills,
            ]),
            returnValue: _i17.Future<List<_i12.RepositoryCommit>>.value(
              <_i12.RepositoryCommit>[],
            ),
          )
          as _i17.Future<List<_i12.RepositoryCommit>>);

  @override
  _i17.Future<bool> deleteBranch(
    _i12.RepositorySlug? slug,
    String? branchName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBranch, [slug, branchName]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<List<_i12.PullRequest>> listPullRequests(
    _i12.RepositorySlug? slug,
    String? branch,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listPullRequests, [slug, branch]),
            returnValue: _i17.Future<List<_i12.PullRequest>>.value(
              <_i12.PullRequest>[],
            ),
          )
          as _i17.Future<List<_i12.PullRequest>>);

  @override
  _i17.Future<_i12.PullRequest> createPullRequest(
    _i12.RepositorySlug? slug, {
    required String? title,
    String? body,
    String? commitMessage,
    required _i12.GitReference? baseRef,
    List<_i12.CreateGitTreeEntry>? entries,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createPullRequest,
              [slug],
              {
                #title: title,
                #body: body,
                #commitMessage: commitMessage,
                #baseRef: baseRef,
                #entries: entries,
              },
            ),
            returnValue: _i17.Future<_i12.PullRequest>.value(
              _FakePullRequest_38(
                this,
                Invocation.method(
                  #createPullRequest,
                  [slug],
                  {
                    #title: title,
                    #body: body,
                    #commitMessage: commitMessage,
                    #baseRef: baseRef,
                    #entries: entries,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i12.PullRequest>);

  @override
  _i17.Future<void> assignReviewer(
    _i12.RepositorySlug? slug, {
    int? pullRequestNumber,
    String? reviewer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #assignReviewer,
              [slug],
              {#pullRequestNumber: pullRequestNumber, #reviewer: reviewer},
            ),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<List<_i12.CheckRun>> getCheckRuns(
    _i12.RepositorySlug? slug,
    String? ref,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCheckRuns, [slug, ref]),
            returnValue: _i17.Future<List<_i12.CheckRun>>.value(
              <_i12.CheckRun>[],
            ),
          )
          as _i17.Future<List<_i12.CheckRun>>);

  @override
  _i17.Future<List<_i12.CheckRun>> getCheckRunsFiltered({
    required _i12.RepositorySlug? slug,
    required String? ref,
    String? checkName,
    _i12.CheckRunStatus? status,
    _i12.CheckRunFilter? filter,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCheckRunsFiltered, [], {
              #slug: slug,
              #ref: ref,
              #checkName: checkName,
              #status: status,
              #filter: filter,
            }),
            returnValue: _i17.Future<List<_i12.CheckRun>>.value(
              <_i12.CheckRun>[],
            ),
          )
          as _i17.Future<List<_i12.CheckRun>>);

  @override
  _i17.Future<_i12.CheckRun> updateCheckRun({
    required _i12.RepositorySlug? slug,
    required _i12.CheckRun? checkRun,
    String? name,
    String? detailsUrl,
    String? externalId,
    DateTime? startedAt,
    _i12.CheckRunStatus? status = _i12.CheckRunStatus.queued,
    _i12.CheckRunConclusion? conclusion,
    DateTime? completedAt,
    _i12.CheckRunOutput? output,
    List<_i12.CheckRunAction>? actions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateCheckRun, [], {
              #slug: slug,
              #checkRun: checkRun,
              #name: name,
              #detailsUrl: detailsUrl,
              #externalId: externalId,
              #startedAt: startedAt,
              #status: status,
              #conclusion: conclusion,
              #completedAt: completedAt,
              #output: output,
              #actions: actions,
            }),
            returnValue: _i17.Future<_i12.CheckRun>.value(
              _FakeCheckRun_37(
                this,
                Invocation.method(#updateCheckRun, [], {
                  #slug: slug,
                  #checkRun: checkRun,
                  #name: name,
                  #detailsUrl: detailsUrl,
                  #externalId: externalId,
                  #startedAt: startedAt,
                  #status: status,
                  #conclusion: conclusion,
                  #completedAt: completedAt,
                  #output: output,
                  #actions: actions,
                }),
              ),
            ),
          )
          as _i17.Future<_i12.CheckRun>);

  @override
  _i17.Future<List<_i12.IssueLabel>> getIssueLabels(
    _i12.RepositorySlug? slug,
    int? issueNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getIssueLabels, [slug, issueNumber]),
            returnValue: _i17.Future<List<_i12.IssueLabel>>.value(
              <_i12.IssueLabel>[],
            ),
          )
          as _i17.Future<List<_i12.IssueLabel>>);

  @override
  _i17.Future<List<_i12.IssueLabel>> addIssueLabels(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    List<String>? labels,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addIssueLabels, [slug, issueNumber, labels]),
            returnValue: _i17.Future<List<_i12.IssueLabel>>.value(
              <_i12.IssueLabel>[],
            ),
          )
          as _i17.Future<List<_i12.IssueLabel>>);

  @override
  _i17.Future<List<_i12.Issue>> listIssues(
    _i12.RepositorySlug? slug, {
    List<String>? labels,
    String? state = 'open',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listIssues,
              [slug],
              {#labels: labels, #state: state},
            ),
            returnValue: _i17.Future<List<_i12.Issue>>.value(<_i12.Issue>[]),
          )
          as _i17.Future<List<_i12.Issue>>);

  @override
  _i17.Future<bool> removeLabel(
    _i12.RepositorySlug? slug,
    int? issueNumber,
    String? label,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeLabel, [slug, issueNumber, label]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<_i12.Issue>? getIssue(
    _i12.RepositorySlug? slug, {
    required int? issueNumber,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getIssue, [slug], {#issueNumber: issueNumber}),
          )
          as _i17.Future<_i12.Issue>?);

  @override
  _i17.Future<void> assignIssue(
    _i12.RepositorySlug? slug, {
    required int? issueNumber,
    required String? assignee,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #assignIssue,
              [slug],
              {#issueNumber: issueNumber, #assignee: assignee},
            ),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<_i12.Issue> createIssue(
    _i12.RepositorySlug? slug, {
    String? title,
    String? body,
    List<String>? labels,
    String? assignee,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createIssue,
              [slug],
              {
                #title: title,
                #body: body,
                #labels: labels,
                #assignee: assignee,
              },
            ),
            returnValue: _i17.Future<_i12.Issue>.value(
              _FakeIssue_29(
                this,
                Invocation.method(
                  #createIssue,
                  [slug],
                  {
                    #title: title,
                    #body: body,
                    #labels: labels,
                    #assignee: assignee,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i12.Issue>);

  @override
  _i17.Future<_i12.IssueComment?> createComment(
    _i12.RepositorySlug? slug, {
    required int? issueNumber,
    required String? body,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createComment,
              [slug],
              {#issueNumber: issueNumber, #body: body},
            ),
            returnValue: _i17.Future<_i12.IssueComment?>.value(),
          )
          as _i17.Future<_i12.IssueComment?>);

  @override
  _i17.Future<List<_i12.IssueLabel>> replaceLabelsForIssue(
    _i12.RepositorySlug? slug, {
    required int? issueNumber,
    required List<String>? labels,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #replaceLabelsForIssue,
              [slug],
              {#issueNumber: issueNumber, #labels: labels},
            ),
            returnValue: _i17.Future<List<_i12.IssueLabel>>.value(
              <_i12.IssueLabel>[],
            ),
          )
          as _i17.Future<List<_i12.IssueLabel>>);

  @override
  _i17.Future<List<String>> listFiles(
    _i12.RepositorySlug? slug,
    int? pullRequestNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#listFiles, [slug, pullRequestNumber]),
            returnValue: _i17.Future<List<String>>.value(<String>[]),
          )
          as _i17.Future<List<String>>);

  @override
  _i17.Future<String> getFileContent(
    _i12.RepositorySlug? slug,
    String? path, {
    String? ref,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFileContent, [slug, path], {#ref: ref}),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.method(#getFileContent, [slug, path], {#ref: ref}),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<_i12.GitReference> getReference(
    _i12.RepositorySlug? slug,
    String? ref,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getReference, [slug, ref]),
            returnValue: _i17.Future<_i12.GitReference>.value(
              _FakeGitReference_39(
                this,
                Invocation.method(#getReference, [slug, ref]),
              ),
            ),
          )
          as _i17.Future<_i12.GitReference>);

  @override
  _i17.Future<_i12.RateLimit> getRateLimit() =>
      (super.noSuchMethod(
            Invocation.method(#getRateLimit, []),
            returnValue: _i17.Future<_i12.RateLimit>.value(
              _FakeRateLimit_40(this, Invocation.method(#getRateLimit, [])),
            ),
          )
          as _i17.Future<_i12.RateLimit>);

  @override
  _i17.Future<List<_i12.Issue>> searchIssuesAndPRs(
    _i12.RepositorySlug? slug,
    String? query, {
    String? sort,
    int? pages = 2,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchIssuesAndPRs,
              [slug, query],
              {#sort: sort, #pages: pages},
            ),
            returnValue: _i17.Future<List<_i12.Issue>>.value(<_i12.Issue>[]),
          )
          as _i17.Future<List<_i12.Issue>>);

  @override
  _i17.Future<_i12.PullRequest> getPullRequest(
    _i12.RepositorySlug? slug,
    int? number,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPullRequest, [slug, number]),
            returnValue: _i17.Future<_i12.PullRequest>.value(
              _FakePullRequest_38(
                this,
                Invocation.method(#getPullRequest, [slug, number]),
              ),
            ),
          )
          as _i17.Future<_i12.PullRequest>);

  @override
  _i17.Future<bool> commentExists(
    _i12.RepositorySlug? slug,
    int? issue,
    String? body,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#commentExists, [slug, issue, body]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);
}

/// A class which mocks [GitService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitService extends _i1.Mock implements _i12.GitService {
  MockGitService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GitHub get github =>
      (super.noSuchMethod(
            Invocation.getter(#github),
            returnValue: _FakeGitHub_15(this, Invocation.getter(#github)),
          )
          as _i12.GitHub);

  @override
  _i17.Future<_i12.GitBlob> getBlob(_i12.RepositorySlug? slug, String? sha) =>
      (super.noSuchMethod(
            Invocation.method(#getBlob, [slug, sha]),
            returnValue: _i17.Future<_i12.GitBlob>.value(
              _FakeGitBlob_41(this, Invocation.method(#getBlob, [slug, sha])),
            ),
          )
          as _i17.Future<_i12.GitBlob>);

  @override
  _i17.Future<_i12.GitBlob> createBlob(
    _i12.RepositorySlug? slug,
    _i12.CreateGitBlob? blob,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createBlob, [slug, blob]),
            returnValue: _i17.Future<_i12.GitBlob>.value(
              _FakeGitBlob_41(
                this,
                Invocation.method(#createBlob, [slug, blob]),
              ),
            ),
          )
          as _i17.Future<_i12.GitBlob>);

  @override
  _i17.Future<_i12.GitCommit> getCommit(
    _i12.RepositorySlug? slug,
    String? sha,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCommit, [slug, sha]),
            returnValue: _i17.Future<_i12.GitCommit>.value(
              _FakeGitCommit_42(
                this,
                Invocation.method(#getCommit, [slug, sha]),
              ),
            ),
          )
          as _i17.Future<_i12.GitCommit>);

  @override
  _i17.Future<_i12.GitCommit> createCommit(
    _i12.RepositorySlug? slug,
    _i12.CreateGitCommit? commit,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createCommit, [slug, commit]),
            returnValue: _i17.Future<_i12.GitCommit>.value(
              _FakeGitCommit_42(
                this,
                Invocation.method(#createCommit, [slug, commit]),
              ),
            ),
          )
          as _i17.Future<_i12.GitCommit>);

  @override
  _i17.Future<_i12.GitReference> getReference(
    _i12.RepositorySlug? slug,
    String? ref,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getReference, [slug, ref]),
            returnValue: _i17.Future<_i12.GitReference>.value(
              _FakeGitReference_39(
                this,
                Invocation.method(#getReference, [slug, ref]),
              ),
            ),
          )
          as _i17.Future<_i12.GitReference>);

  @override
  _i17.Stream<_i12.GitReference> listReferences(
    _i12.RepositorySlug? slug, {
    String? type,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listReferences, [slug], {#type: type}),
            returnValue: _i17.Stream<_i12.GitReference>.empty(),
          )
          as _i17.Stream<_i12.GitReference>);

  @override
  _i17.Future<_i12.GitReference> createReference(
    _i12.RepositorySlug? slug,
    String? ref,
    String? sha,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createReference, [slug, ref, sha]),
            returnValue: _i17.Future<_i12.GitReference>.value(
              _FakeGitReference_39(
                this,
                Invocation.method(#createReference, [slug, ref, sha]),
              ),
            ),
          )
          as _i17.Future<_i12.GitReference>);

  @override
  _i17.Future<_i12.GitReference> editReference(
    _i12.RepositorySlug? slug,
    String? ref,
    String? sha, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #editReference,
              [slug, ref, sha],
              {#force: force},
            ),
            returnValue: _i17.Future<_i12.GitReference>.value(
              _FakeGitReference_39(
                this,
                Invocation.method(
                  #editReference,
                  [slug, ref, sha],
                  {#force: force},
                ),
              ),
            ),
          )
          as _i17.Future<_i12.GitReference>);

  @override
  _i17.Future<bool> deleteReference(_i12.RepositorySlug? slug, String? ref) =>
      (super.noSuchMethod(
            Invocation.method(#deleteReference, [slug, ref]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<_i12.GitTag> getTag(_i12.RepositorySlug? slug, String? sha) =>
      (super.noSuchMethod(
            Invocation.method(#getTag, [slug, sha]),
            returnValue: _i17.Future<_i12.GitTag>.value(
              _FakeGitTag_43(this, Invocation.method(#getTag, [slug, sha])),
            ),
          )
          as _i17.Future<_i12.GitTag>);

  @override
  _i17.Future<_i12.GitTag> createTag(
    _i12.RepositorySlug? slug,
    _i12.CreateGitTag? tag,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTag, [slug, tag]),
            returnValue: _i17.Future<_i12.GitTag>.value(
              _FakeGitTag_43(this, Invocation.method(#createTag, [slug, tag])),
            ),
          )
          as _i17.Future<_i12.GitTag>);

  @override
  _i17.Future<_i12.GitTree> getTree(
    _i12.RepositorySlug? slug,
    String? sha, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTree, [slug, sha], {#recursive: recursive}),
            returnValue: _i17.Future<_i12.GitTree>.value(
              _FakeGitTree_44(
                this,
                Invocation.method(
                  #getTree,
                  [slug, sha],
                  {#recursive: recursive},
                ),
              ),
            ),
          )
          as _i17.Future<_i12.GitTree>);

  @override
  _i17.Future<_i12.GitTree> createTree(
    _i12.RepositorySlug? slug,
    _i12.CreateGitTree? tree,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTree, [slug, tree]),
            returnValue: _i17.Future<_i12.GitTree>.value(
              _FakeGitTree_44(
                this,
                Invocation.method(#createTree, [slug, tree]),
              ),
            ),
          )
          as _i17.Future<_i12.GitTree>);
}

/// A class which mocks [GraphQLClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLClient extends _i1.Mock implements _i13.GraphQLClient {
  MockGraphQLClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.DefaultPolicies get defaultPolicies =>
      (super.noSuchMethod(
            Invocation.getter(#defaultPolicies),
            returnValue: _FakeDefaultPolicies_45(
              this,
              Invocation.getter(#defaultPolicies),
            ),
          )
          as _i13.DefaultPolicies);

  @override
  set defaultPolicies(_i13.DefaultPolicies? _defaultPolicies) =>
      super.noSuchMethod(
        Invocation.setter(#defaultPolicies, _defaultPolicies),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Link get link =>
      (super.noSuchMethod(
            Invocation.getter(#link),
            returnValue: _FakeLink_46(this, Invocation.getter(#link)),
          )
          as _i13.Link);

  @override
  _i13.GraphQLCache get cache =>
      (super.noSuchMethod(
            Invocation.getter(#cache),
            returnValue: _FakeGraphQLCache_47(this, Invocation.getter(#cache)),
          )
          as _i13.GraphQLCache);

  @override
  _i13.QueryManager get queryManager =>
      (super.noSuchMethod(
            Invocation.getter(#queryManager),
            returnValue: _FakeQueryManager_48(
              this,
              Invocation.getter(#queryManager),
            ),
          )
          as _i13.QueryManager);

  @override
  set queryManager(_i13.QueryManager? _queryManager) => super.noSuchMethod(
    Invocation.setter(#queryManager, _queryManager),
    returnValueForMissingStub: null,
  );

  @override
  _i13.GraphQLClient copyWith({
    _i13.Link? link,
    _i13.GraphQLCache? cache,
    _i13.DefaultPolicies? defaultPolicies,
    bool? alwaysRebroadcast,
    Duration? queryRequestTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #link: link,
              #cache: cache,
              #defaultPolicies: defaultPolicies,
              #alwaysRebroadcast: alwaysRebroadcast,
              #queryRequestTimeout: queryRequestTimeout,
            }),
            returnValue: _FakeGraphQLClient_16(
              this,
              Invocation.method(#copyWith, [], {
                #link: link,
                #cache: cache,
                #defaultPolicies: defaultPolicies,
                #alwaysRebroadcast: alwaysRebroadcast,
                #queryRequestTimeout: queryRequestTimeout,
              }),
            ),
          )
          as _i13.GraphQLClient);

  @override
  _i13.ObservableQuery<TParsed> watchQuery<TParsed>(
    _i13.WatchQueryOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchQuery, [options]),
            returnValue: _FakeObservableQuery_49<TParsed>(
              this,
              Invocation.method(#watchQuery, [options]),
            ),
          )
          as _i13.ObservableQuery<TParsed>);

  @override
  _i13.ObservableQuery<TParsed> watchMutation<TParsed>(
    _i13.WatchQueryOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#watchMutation, [options]),
            returnValue: _FakeObservableQuery_49<TParsed>(
              this,
              Invocation.method(#watchMutation, [options]),
            ),
          )
          as _i13.ObservableQuery<TParsed>);

  @override
  _i17.Future<_i13.QueryResult<TParsed>> query<TParsed>(
    _i13.QueryOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#query, [options]),
            returnValue: _i17.Future<_i13.QueryResult<TParsed>>.value(
              _FakeQueryResult_50<TParsed>(
                this,
                Invocation.method(#query, [options]),
              ),
            ),
          )
          as _i17.Future<_i13.QueryResult<TParsed>>);

  @override
  _i17.Future<_i13.QueryResult<TParsed>> mutate<TParsed>(
    _i13.MutationOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#mutate, [options]),
            returnValue: _i17.Future<_i13.QueryResult<TParsed>>.value(
              _FakeQueryResult_50<TParsed>(
                this,
                Invocation.method(#mutate, [options]),
              ),
            ),
          )
          as _i17.Future<_i13.QueryResult<TParsed>>);

  @override
  _i17.Stream<_i13.QueryResult<TParsed>> subscribe<TParsed>(
    _i13.SubscriptionOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#subscribe, [options]),
            returnValue: _i17.Stream<_i13.QueryResult<TParsed>>.empty(),
          )
          as _i17.Stream<_i13.QueryResult<TParsed>>);

  @override
  _i17.Future<_i13.QueryResult<TParsed>> fetchMore<TParsed>(
    _i13.FetchMoreOptions? fetchMoreOptions, {
    required _i13.QueryOptions<TParsed>? originalOptions,
    required _i13.QueryResult<TParsed>? previousResult,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchMore,
              [fetchMoreOptions],
              {
                #originalOptions: originalOptions,
                #previousResult: previousResult,
              },
            ),
            returnValue: _i17.Future<_i13.QueryResult<TParsed>>.value(
              _FakeQueryResult_50<TParsed>(
                this,
                Invocation.method(
                  #fetchMore,
                  [fetchMoreOptions],
                  {
                    #originalOptions: originalOptions,
                    #previousResult: previousResult,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i13.QueryResult<TParsed>>);

  @override
  Map<String, dynamic>? readQuery(
    _i13.Request? request, {
    bool? optimistic = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readQuery, [request], {#optimistic: optimistic}),
          )
          as Map<String, dynamic>?);

  @override
  Map<String, dynamic>? readFragment(
    _i13.FragmentRequest? fragmentRequest, {
    bool? optimistic = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #readFragment,
              [fragmentRequest],
              {#optimistic: optimistic},
            ),
          )
          as Map<String, dynamic>?);

  @override
  void writeQuery(
    _i13.Request? request, {
    required Map<String, dynamic>? data,
    bool? broadcast = true,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeQuery,
      [request],
      {#data: data, #broadcast: broadcast},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void writeFragment(
    _i13.FragmentRequest? fragmentRequest, {
    bool? broadcast = true,
    required Map<String, dynamic>? data,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeFragment,
      [fragmentRequest],
      {#broadcast: broadcast, #data: data},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<List<_i13.QueryResult<Object?>?>>? resetStore({
    bool? refetchQueries = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#resetStore, [], {
              #refetchQueries: refetchQueries,
            }),
          )
          as _i17.Future<List<_i13.QueryResult<Object?>?>>?);
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i22.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#idleTimeout),
            returnValue: _FakeDuration_14(
              this,
              Invocation.getter(#idleTimeout),
            ),
          )
          as Duration);

  @override
  set idleTimeout(Duration? _idleTimeout) => super.noSuchMethod(
    Invocation.setter(#idleTimeout, _idleTimeout),
    returnValueForMissingStub: null,
  );

  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
    Invocation.setter(#connectionTimeout, _connectionTimeout),
    returnValueForMissingStub: null,
  );

  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
    Invocation.setter(#maxConnectionsPerHost, _maxConnectionsPerHost),
    returnValueForMissingStub: null,
  );

  @override
  bool get autoUncompress =>
      (super.noSuchMethod(
            Invocation.getter(#autoUncompress),
            returnValue: false,
          )
          as bool);

  @override
  set autoUncompress(bool? _autoUncompress) => super.noSuchMethod(
    Invocation.setter(#autoUncompress, _autoUncompress),
    returnValueForMissingStub: null,
  );

  @override
  set userAgent(String? _userAgent) => super.noSuchMethod(
    Invocation.setter(#userAgent, _userAgent),
    returnValueForMissingStub: null,
  );

  @override
  set authenticate(_i17.Future<bool> Function(Uri, String, String?)? f) =>
      super.noSuchMethod(
        Invocation.setter(#authenticate, f),
        returnValueForMissingStub: null,
      );

  @override
  set connectionFactory(
    _i17.Future<_i22.ConnectionTask<_i22.Socket>> Function(Uri, String?, int?)?
    f,
  ) => super.noSuchMethod(
    Invocation.setter(#connectionFactory, f),
    returnValueForMissingStub: null,
  );

  @override
  set findProxy(String Function(Uri)? f) => super.noSuchMethod(
    Invocation.setter(#findProxy, f),
    returnValueForMissingStub: null,
  );

  @override
  set authenticateProxy(
    _i17.Future<bool> Function(String, int, String, String?)? f,
  ) => super.noSuchMethod(
    Invocation.setter(#authenticateProxy, f),
    returnValueForMissingStub: null,
  );

  @override
  set badCertificateCallback(
    bool Function(_i22.X509Certificate, String, int)? callback,
  ) => super.noSuchMethod(
    Invocation.setter(#badCertificateCallback, callback),
    returnValueForMissingStub: null,
  );

  @override
  set keyLog(dynamic Function(String)? callback) => super.noSuchMethod(
    Invocation.setter(#keyLog, callback),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<_i22.HttpClientRequest> open(
    String? method,
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#open, [method, host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#open, [method, host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#openUrl, [method, url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#openUrl, [method, url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> get(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#get, [host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#get, [host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> getUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#getUrl, [url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#getUrl, [url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> post(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#post, [host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#post, [host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> postUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#postUrl, [url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#postUrl, [url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> put(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#put, [host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#put, [host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> putUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#putUrl, [url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#putUrl, [url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> delete(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#delete, [host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> deleteUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUrl, [url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#deleteUrl, [url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> patch(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#patch, [host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#patch, [host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> patchUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#patchUrl, [url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#patchUrl, [url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> head(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#head, [host, port, path]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#head, [host, port, path]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  _i17.Future<_i22.HttpClientRequest> headUrl(Uri? url) =>
      (super.noSuchMethod(
            Invocation.method(#headUrl, [url]),
            returnValue: _i17.Future<_i22.HttpClientRequest>.value(
              _FakeHttpClientRequest_51(
                this,
                Invocation.method(#headUrl, [url]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientRequest>);

  @override
  void addCredentials(
    Uri? url,
    String? realm,
    _i22.HttpClientCredentials? credentials,
  ) => super.noSuchMethod(
    Invocation.method(#addCredentials, [url, realm, credentials]),
    returnValueForMissingStub: null,
  );

  @override
  void addProxyCredentials(
    String? host,
    int? port,
    String? realm,
    _i22.HttpClientCredentials? credentials,
  ) => super.noSuchMethod(
    Invocation.method(#addProxyCredentials, [host, port, realm, credentials]),
    returnValueForMissingStub: null,
  );

  @override
  void close({bool? force = false}) => super.noSuchMethod(
    Invocation.method(#close, [], {#force: force}),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i22.HttpClientRequest {
  MockHttpClientRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(
            Invocation.getter(#persistentConnection),
            returnValue: false,
          )
          as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
    Invocation.setter(#persistentConnection, _persistentConnection),
    returnValueForMissingStub: null,
  );

  @override
  bool get followRedirects =>
      (super.noSuchMethod(
            Invocation.getter(#followRedirects),
            returnValue: false,
          )
          as bool);

  @override
  set followRedirects(bool? _followRedirects) => super.noSuchMethod(
    Invocation.setter(#followRedirects, _followRedirects),
    returnValueForMissingStub: null,
  );

  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);

  @override
  set maxRedirects(int? _maxRedirects) => super.noSuchMethod(
    Invocation.setter(#maxRedirects, _maxRedirects),
    returnValueForMissingStub: null,
  );

  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
    Invocation.setter(#contentLength, _contentLength),
    returnValueForMissingStub: null,
  );

  @override
  bool get bufferOutput =>
      (super.noSuchMethod(Invocation.getter(#bufferOutput), returnValue: false)
          as bool);

  @override
  set bufferOutput(bool? _bufferOutput) => super.noSuchMethod(
    Invocation.setter(#bufferOutput, _bufferOutput),
    returnValueForMissingStub: null,
  );

  @override
  String get method =>
      (super.noSuchMethod(
            Invocation.getter(#method),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#method),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_52(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  _i22.HttpHeaders get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: _FakeHttpHeaders_53(this, Invocation.getter(#headers)),
          )
          as _i22.HttpHeaders);

  @override
  List<_i22.Cookie> get cookies =>
      (super.noSuchMethod(
            Invocation.getter(#cookies),
            returnValue: <_i22.Cookie>[],
          )
          as List<_i22.Cookie>);

  @override
  _i17.Future<_i22.HttpClientResponse> get done =>
      (super.noSuchMethod(
            Invocation.getter(#done),
            returnValue: _i17.Future<_i22.HttpClientResponse>.value(
              _FakeHttpClientResponse_54(this, Invocation.getter(#done)),
            ),
          )
          as _i17.Future<_i22.HttpClientResponse>);

  @override
  _i23.Encoding get encoding =>
      (super.noSuchMethod(
            Invocation.getter(#encoding),
            returnValue: _FakeEncoding_55(this, Invocation.getter(#encoding)),
          )
          as _i23.Encoding);

  @override
  set encoding(_i23.Encoding? _encoding) => super.noSuchMethod(
    Invocation.setter(#encoding, _encoding),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<_i22.HttpClientResponse> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<_i22.HttpClientResponse>.value(
              _FakeHttpClientResponse_54(this, Invocation.method(#close, [])),
            ),
          )
          as _i17.Future<_i22.HttpClientResponse>);

  @override
  void abort([Object? exception, StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#abort, [exception, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void add(List<int>? data) => super.noSuchMethod(
    Invocation.method(#add, [data]),
    returnValueForMissingStub: null,
  );

  @override
  void write(Object? object) => super.noSuchMethod(
    Invocation.method(#write, [object]),
    returnValueForMissingStub: null,
  );

  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = '']) =>
      super.noSuchMethod(
        Invocation.method(#writeAll, [objects, separator]),
        returnValueForMissingStub: null,
      );

  @override
  void writeln([Object? object = '']) => super.noSuchMethod(
    Invocation.method(#writeln, [object]),
    returnValueForMissingStub: null,
  );

  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
    Invocation.method(#writeCharCode, [charCode]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<dynamic> addStream(_i17.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
            Invocation.method(#addStream, [stream]),
            returnValue: _i17.Future<dynamic>.value(),
          )
          as _i17.Future<dynamic>);

  @override
  _i17.Future<dynamic> flush() =>
      (super.noSuchMethod(
            Invocation.method(#flush, []),
            returnValue: _i17.Future<dynamic>.value(),
          )
          as _i17.Future<dynamic>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i22.HttpClientResponse {
  MockHttpClientResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);

  @override
  String get reasonPhrase =>
      (super.noSuchMethod(
            Invocation.getter(#reasonPhrase),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#reasonPhrase),
            ),
          )
          as String);

  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);

  @override
  _i22.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(
            Invocation.getter(#compressionState),
            returnValue: _i22.HttpClientResponseCompressionState.notCompressed,
          )
          as _i22.HttpClientResponseCompressionState);

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(
            Invocation.getter(#persistentConnection),
            returnValue: false,
          )
          as bool);

  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);

  @override
  List<_i22.RedirectInfo> get redirects =>
      (super.noSuchMethod(
            Invocation.getter(#redirects),
            returnValue: <_i22.RedirectInfo>[],
          )
          as List<_i22.RedirectInfo>);

  @override
  _i22.HttpHeaders get headers =>
      (super.noSuchMethod(
            Invocation.getter(#headers),
            returnValue: _FakeHttpHeaders_53(this, Invocation.getter(#headers)),
          )
          as _i22.HttpHeaders);

  @override
  List<_i22.Cookie> get cookies =>
      (super.noSuchMethod(
            Invocation.getter(#cookies),
            returnValue: <_i22.Cookie>[],
          )
          as List<_i22.Cookie>);

  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);

  @override
  _i17.Future<int> get length =>
      (super.noSuchMethod(
            Invocation.getter(#length),
            returnValue: _i17.Future<int>.value(0),
          )
          as _i17.Future<int>);

  @override
  _i17.Future<bool> get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<List<int>> get first =>
      (super.noSuchMethod(
            Invocation.getter(#first),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<List<int>> get last =>
      (super.noSuchMethod(
            Invocation.getter(#last),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<List<int>> get single =>
      (super.noSuchMethod(
            Invocation.getter(#single),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<_i22.HttpClientResponse> redirect([
    String? method,
    Uri? url,
    bool? followLoops,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#redirect, [method, url, followLoops]),
            returnValue: _i17.Future<_i22.HttpClientResponse>.value(
              _FakeHttpClientResponse_54(
                this,
                Invocation.method(#redirect, [method, url, followLoops]),
              ),
            ),
          )
          as _i17.Future<_i22.HttpClientResponse>);

  @override
  _i17.Future<_i22.Socket> detachSocket() =>
      (super.noSuchMethod(
            Invocation.method(#detachSocket, []),
            returnValue: _i17.Future<_i22.Socket>.value(
              _FakeSocket_56(this, Invocation.method(#detachSocket, [])),
            ),
          )
          as _i17.Future<_i22.Socket>);

  @override
  _i17.Stream<List<int>> asBroadcastStream({
    void Function(_i17.StreamSubscription<List<int>>)? onListen,
    void Function(_i17.StreamSubscription<List<int>>)? onCancel,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#asBroadcastStream, [], {
              #onListen: onListen,
              #onCancel: onCancel,
            }),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.StreamSubscription<List<int>> listen(
    void Function(List<int>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listen,
              [onData],
              {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError,
              },
            ),
            returnValue: _FakeStreamSubscription_57<List<int>>(
              this,
              Invocation.method(
                #listen,
                [onData],
                {
                  #onError: onError,
                  #onDone: onDone,
                  #cancelOnError: cancelOnError,
                },
              ),
            ),
          )
          as _i17.StreamSubscription<List<int>>);

  @override
  _i17.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
            Invocation.method(#where, [test]),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Stream<S> map<S>(S Function(List<int>)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#map, [convert]),
            returnValue: _i17.Stream<S>.empty(),
          )
          as _i17.Stream<S>);

  @override
  _i17.Stream<E> asyncMap<E>(_i17.FutureOr<E> Function(List<int>)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#asyncMap, [convert]),
            returnValue: _i17.Stream<E>.empty(),
          )
          as _i17.Stream<E>);

  @override
  _i17.Stream<E> asyncExpand<E>(_i17.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#asyncExpand, [convert]),
            returnValue: _i17.Stream<E>.empty(),
          )
          as _i17.Stream<E>);

  @override
  _i17.Stream<List<int>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#handleError, [onError], {#test: test}),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(
            Invocation.method(#expand, [convert]),
            returnValue: _i17.Stream<S>.empty(),
          )
          as _i17.Stream<S>);

  @override
  _i17.Future<dynamic> pipe(_i17.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(
            Invocation.method(#pipe, [streamConsumer]),
            returnValue: _i17.Future<dynamic>.value(),
          )
          as _i17.Future<dynamic>);

  @override
  _i17.Stream<S> transform<S>(
    _i17.StreamTransformer<List<int>, S>? streamTransformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transform, [streamTransformer]),
            returnValue: _i17.Stream<S>.empty(),
          )
          as _i17.Stream<S>);

  @override
  _i17.Future<List<int>> reduce(
    List<int> Function(List<int>, List<int>)? combine,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#reduce, [combine]),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<S> fold<S>(S? initialValue, S Function(S, List<int>)? combine) =>
      (super.noSuchMethod(
            Invocation.method(#fold, [initialValue, combine]),
            returnValue:
                _i29.ifNotNull(
                  _i29.dummyValueOrNull<S>(
                    this,
                    Invocation.method(#fold, [initialValue, combine]),
                  ),
                  (S v) => _i17.Future<S>.value(v),
                ) ??
                _FakeFuture_20<S>(
                  this,
                  Invocation.method(#fold, [initialValue, combine]),
                ),
          )
          as _i17.Future<S>);

  @override
  _i17.Future<String> join([String? separator = '']) =>
      (super.noSuchMethod(
            Invocation.method(#join, [separator]),
            returnValue: _i17.Future<String>.value(
              _i29.dummyValue<String>(
                this,
                Invocation.method(#join, [separator]),
              ),
            ),
          )
          as _i17.Future<String>);

  @override
  _i17.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [needle]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<void> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(
            Invocation.method(#forEach, [action]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<bool> every(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
            Invocation.method(#every, [test]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<bool> any(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
            Invocation.method(#any, [test]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<R> cast<R>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: _i17.Stream<R>.empty(),
          )
          as _i17.Stream<R>);

  @override
  _i17.Future<List<List<int>>> toList() =>
      (super.noSuchMethod(
            Invocation.method(#toList, []),
            returnValue: _i17.Future<List<List<int>>>.value(<List<int>>[]),
          )
          as _i17.Future<List<List<int>>>);

  @override
  _i17.Future<Set<List<int>>> toSet() =>
      (super.noSuchMethod(
            Invocation.method(#toSet, []),
            returnValue: _i17.Future<Set<List<int>>>.value(<List<int>>{}),
          )
          as _i17.Future<Set<List<int>>>);

  @override
  _i17.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(
            Invocation.method(#drain, [futureValue]),
            returnValue:
                _i29.ifNotNull(
                  _i29.dummyValueOrNull<E>(
                    this,
                    Invocation.method(#drain, [futureValue]),
                  ),
                  (E v) => _i17.Future<E>.value(v),
                ) ??
                _FakeFuture_20<E>(
                  this,
                  Invocation.method(#drain, [futureValue]),
                ),
          )
          as _i17.Future<E>);

  @override
  _i17.Stream<List<int>> take(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#take, [count]),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
            Invocation.method(#takeWhile, [test]),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Stream<List<int>> skip(int? count) =>
      (super.noSuchMethod(
            Invocation.method(#skip, [count]),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
            Invocation.method(#skipWhile, [test]),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Stream<List<int>> distinct([
    bool Function(List<int>, List<int>)? equals,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#distinct, [equals]),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);

  @override
  _i17.Future<List<int>> firstWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#firstWhere, [test], {#orElse: orElse}),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<List<int>> lastWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lastWhere, [test], {#orElse: orElse}),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<List<int>> singleWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#singleWhere, [test], {#orElse: orElse}),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Future<List<int>> elementAt(int? index) =>
      (super.noSuchMethod(
            Invocation.method(#elementAt, [index]),
            returnValue: _i17.Future<List<int>>.value(<int>[]),
          )
          as _i17.Future<List<int>>);

  @override
  _i17.Stream<List<int>> timeout(
    Duration? timeLimit, {
    void Function(_i17.EventSink<List<int>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
            returnValue: _i17.Stream<List<int>>.empty(),
          )
          as _i17.Stream<List<int>>);
}

/// A class which mocks [LuciBuildService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLuciBuildService extends _i1.Mock implements _i14.LuciBuildService {
  MockLuciBuildService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.FusionTester get fusionTester =>
      (super.noSuchMethod(
            Invocation.getter(#fusionTester),
            returnValue: _FakeFusionTester_58(
              this,
              Invocation.getter(#fusionTester),
            ),
          )
          as _i14.FusionTester);

  @override
  _i14.BuildBucketClient get buildBucketClient =>
      (super.noSuchMethod(
            Invocation.getter(#buildBucketClient),
            returnValue: _FakeBuildBucketClient_59(
              this,
              Invocation.getter(#buildBucketClient),
            ),
          )
          as _i14.BuildBucketClient);

  @override
  set buildBucketClient(_i14.BuildBucketClient? _buildBucketClient) =>
      super.noSuchMethod(
        Invocation.setter(#buildBucketClient, _buildBucketClient),
        returnValueForMissingStub: null,
      );

  @override
  _i14.CacheService get cache =>
      (super.noSuchMethod(
            Invocation.getter(#cache),
            returnValue: _FakeCacheService_60(this, Invocation.getter(#cache)),
          )
          as _i14.CacheService);

  @override
  _i2.Config get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.Config);

  @override
  set config(_i2.Config? _config) => super.noSuchMethod(
    Invocation.setter(#config, _config),
    returnValueForMissingStub: null,
  );

  @override
  _i21.GithubChecksUtil get githubChecksUtil =>
      (super.noSuchMethod(
            Invocation.getter(#githubChecksUtil),
            returnValue: _FakeGithubChecksUtil_33(
              this,
              Invocation.getter(#githubChecksUtil),
            ),
          )
          as _i21.GithubChecksUtil);

  @override
  set githubChecksUtil(_i21.GithubChecksUtil? _githubChecksUtil) =>
      super.noSuchMethod(
        Invocation.setter(#githubChecksUtil, _githubChecksUtil),
        returnValueForMissingStub: null,
      );

  @override
  _i24.GerritService get gerritService =>
      (super.noSuchMethod(
            Invocation.getter(#gerritService),
            returnValue: _FakeGerritService_61(
              this,
              Invocation.getter(#gerritService),
            ),
          )
          as _i24.GerritService);

  @override
  set gerritService(_i24.GerritService? _gerritService) => super.noSuchMethod(
    Invocation.setter(#gerritService, _gerritService),
    returnValueForMissingStub: null,
  );

  @override
  _i14.PubSub get pubsub =>
      (super.noSuchMethod(
            Invocation.getter(#pubsub),
            returnValue: _FakePubSub_62(this, Invocation.getter(#pubsub)),
          )
          as _i14.PubSub);

  @override
  _i17.Future<_i18.Document> Function({
    required List<_i12.CheckRun> checks,
    required _i14.FirestoreService firestoreService,
    required _i12.PullRequest pullRequest,
  })
  get initializePrCheckRuns =>
      (super.noSuchMethod(
            Invocation.getter(#initializePrCheckRuns),
            returnValue:
                ({
                  required List<_i12.CheckRun> checks,
                  required _i14.FirestoreService firestoreService,
                  required _i12.PullRequest pullRequest,
                }) => _i17.Future<_i18.Document>.value(
                  _FakeDocument_22(
                    this,
                    Invocation.getter(#initializePrCheckRuns),
                  ),
                ),
          )
          as _i17.Future<_i18.Document> Function({
            required List<_i12.CheckRun> checks,
            required _i14.FirestoreService firestoreService,
            required _i12.PullRequest pullRequest,
          }));

  @override
  _i17.Future<_i12.PullRequest> Function(_i14.FirestoreService, int, String)
  get findPullRequestFor =>
      (super.noSuchMethod(
            Invocation.getter(#findPullRequestFor),
            returnValue:
                (
                  _i14.FirestoreService firestoreService,
                  int checkRunId,
                  String checkRunName,
                ) => _i17.Future<_i12.PullRequest>.value(
                  _FakePullRequest_38(
                    this,
                    Invocation.getter(#findPullRequestFor),
                  ),
                ),
          )
          as _i17.Future<_i12.PullRequest> Function(
            _i14.FirestoreService,
            int,
            String,
          ));

  @override
  _i17.Future<List<List<_i7.BatchRequest_Request>>> shard({
    required List<_i7.BatchRequest_Request>? requests,
    required int? maxShardSize,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#shard, [], {
              #requests: requests,
              #maxShardSize: maxShardSize,
            }),
            returnValue:
                _i17.Future<List<List<_i7.BatchRequest_Request>>>.value(
                  <List<_i7.BatchRequest_Request>>[],
                ),
          )
          as _i17.Future<List<List<_i7.BatchRequest_Request>>>);

  @override
  _i17.Future<Iterable<_i7.Build>> getTryBuilds({
    required String? sha,
    String? builderName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTryBuilds, [], {
              #sha: sha,
              #builderName: builderName,
            }),
            returnValue: _i17.Future<Iterable<_i7.Build>>.value(<_i7.Build>[]),
          )
          as _i17.Future<Iterable<_i7.Build>>);

  @override
  _i17.Future<Iterable<_i7.Build>> getTryBuildsByPullRequest({
    required _i12.PullRequest? pullRequest,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTryBuildsByPullRequest, [], {
              #pullRequest: pullRequest,
            }),
            returnValue: _i17.Future<Iterable<_i7.Build>>.value(<_i7.Build>[]),
          )
          as _i17.Future<Iterable<_i7.Build>>);

  @override
  _i17.Future<Iterable<_i7.Build>> getProdBuilds({
    String? builderName,
    String? sha,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getProdBuilds, [], {
              #builderName: builderName,
              #sha: sha,
            }),
            returnValue: _i17.Future<Iterable<_i7.Build>>.value(<_i7.Build>[]),
          )
          as _i17.Future<Iterable<_i7.Build>>);

  @override
  _i17.Future<Iterable<_i7.Build>> getBuilds({
    required String? builderName,
    required String? bucket,
    required _i41.BuildTags? tags,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBuilds, [], {
              #builderName: builderName,
              #bucket: bucket,
              #tags: tags,
            }),
            returnValue: _i17.Future<Iterable<_i7.Build>>.value(<_i7.Build>[]),
          )
          as _i17.Future<Iterable<_i7.Build>>);

  @override
  _i17.Future<List<_i42.Target>> scheduleTryBuilds({
    required List<_i42.Target>? targets,
    required _i12.PullRequest? pullRequest,
    required _i43.EngineArtifacts? engineArtifacts,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleTryBuilds, [], {
              #targets: targets,
              #pullRequest: pullRequest,
              #engineArtifacts: engineArtifacts,
            }),
            returnValue: _i17.Future<List<_i42.Target>>.value(<_i42.Target>[]),
          )
          as _i17.Future<List<_i42.Target>>);

  @override
  _i17.Future<void> cancelBuilds({
    required _i12.PullRequest? pullRequest,
    required String? reason,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#cancelBuilds, [], {
              #pullRequest: pullRequest,
              #reason: reason,
            }),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<void> cancelBuildsBySha({
    required String? sha,
    required String? reason,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#cancelBuildsBySha, [], {
              #sha: sha,
              #reason: reason,
            }),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<List<_i7.Build?>> failedBuilds({
    required _i12.PullRequest? pullRequest,
    required List<_i42.Target>? targets,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#failedBuilds, [], {
              #pullRequest: pullRequest,
              #targets: targets,
            }),
            returnValue: _i17.Future<List<_i7.Build?>>.value(<_i7.Build?>[]),
          )
          as _i17.Future<List<_i7.Build?>>);

  @override
  _i17.Future<_i7.Build> reschedulePresubmitBuild({
    required String? builderName,
    required _i7.Build? build,
    required int? nextAttempt,
    required Map<String, dynamic>? userDataMap,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#reschedulePresubmitBuild, [], {
              #builderName: builderName,
              #build: build,
              #nextAttempt: nextAttempt,
              #userDataMap: userDataMap,
            }),
            returnValue: _i17.Future<_i7.Build>.value(
              _FakeBuild_6(
                this,
                Invocation.method(#reschedulePresubmitBuild, [], {
                  #builderName: builderName,
                  #build: build,
                  #nextAttempt: nextAttempt,
                  #userDataMap: userDataMap,
                }),
              ),
            ),
          )
          as _i17.Future<_i7.Build>);

  @override
  List<String>? extractPrefixedLabels({
    List<_i12.IssueLabel>? issueLabels,
    required String? prefix,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#extractPrefixedLabels, [], {
              #issueLabels: issueLabels,
              #prefix: prefix,
            }),
          )
          as List<String>?);

  @override
  _i17.Future<void> reschedulePostsubmitBuildUsingCheckRunEvent(
    _i44.CheckRunEvent? checkRunEvent, {
    required _i35.Commit? commit,
    required _i36.Task? task,
    required _i42.Target? target,
    required _i40.Task? taskDocument,
    required _i8.DatastoreService? datastore,
    required _i14.FirestoreService? firestoreService,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #reschedulePostsubmitBuildUsingCheckRunEvent,
              [checkRunEvent],
              {
                #commit: commit,
                #task: task,
                #target: target,
                #taskDocument: taskDocument,
                #datastore: datastore,
                #firestoreService: firestoreService,
              },
            ),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<_i7.Build> getBuildById(
    _i45.Int64? id, {
    _i7.BuildMask? buildMask,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBuildById, [id], {#buildMask: buildMask}),
            returnValue: _i17.Future<_i7.Build>.value(
              _FakeBuild_6(
                this,
                Invocation.method(#getBuildById, [id], {#buildMask: buildMask}),
              ),
            ),
          )
          as _i17.Future<_i7.Build>);

  @override
  _i17.Future<Set<String>> getAvailableBuilderSet({
    String? project = 'flutter',
    String? bucket = 'prod',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBuilderSet, [], {
              #project: project,
              #bucket: bucket,
            }),
            returnValue: _i17.Future<Set<String>>.value(<String>{}),
          )
          as _i17.Future<Set<String>>);

  @override
  _i17.Future<List<_i46.PendingTask>> schedulePostsubmitBuilds({
    required _i35.Commit? commit,
    required List<_i46.PendingTask>? toBeScheduled,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#schedulePostsubmitBuilds, [], {
              #commit: commit,
              #toBeScheduled: toBeScheduled,
            }),
            returnValue: _i17.Future<List<_i46.PendingTask>>.value(
              <_i46.PendingTask>[],
            ),
          )
          as _i17.Future<List<_i46.PendingTask>>);

  @override
  _i17.Future<void> scheduleMergeGroupBuilds({
    required _i35.Commit? commit,
    required List<_i42.Target>? targets,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleMergeGroupBuilds, [], {
              #commit: commit,
              #targets: targets,
            }),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<void> createPostsubmitCheckRun(
    _i35.Commit? commit,
    _i42.Target? target,
    Map<String, dynamic>? rawUserData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createPostsubmitCheckRun, [
              commit,
              target,
              rawUserData,
            ]),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  _i17.Future<bool> checkRerunBuilder({
    required _i35.Commit? commit,
    required _i42.Target? target,
    required _i36.Task? task,
    required _i8.DatastoreService? datastore,
    required _i40.Task? taskDocument,
    required _i14.FirestoreService? firestoreService,
    Iterable<_i41.BuildTag>? tags = const [],
    bool? ignoreChecks = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#checkRerunBuilder, [], {
              #commit: commit,
              #target: target,
              #task: task,
              #datastore: datastore,
              #taskDocument: taskDocument,
              #firestoreService: firestoreService,
              #tags: tags,
              #ignoreChecks: ignoreChecks,
            }),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);
}

/// A class which mocks [ProcessManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessManager extends _i1.Mock implements _i47.ProcessManager {
  MockProcessManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i22.Process> start(
    List<Object>? command, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i22.ProcessStartMode? mode = _i22.ProcessStartMode.normal,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #start,
              [command],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #mode: mode,
              },
            ),
            returnValue: _i17.Future<_i22.Process>.value(
              _FakeProcess_63(
                this,
                Invocation.method(
                  #start,
                  [command],
                  {
                    #workingDirectory: workingDirectory,
                    #environment: environment,
                    #includeParentEnvironment: includeParentEnvironment,
                    #runInShell: runInShell,
                    #mode: mode,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i22.Process>);

  @override
  _i17.Future<_i22.ProcessResult> run(
    List<Object>? command, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i23.Encoding? stdoutEncoding = const _i22.SystemEncoding(),
    _i23.Encoding? stderrEncoding = const _i22.SystemEncoding(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #run,
              [command],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #stdoutEncoding: stdoutEncoding,
                #stderrEncoding: stderrEncoding,
              },
            ),
            returnValue: _i17.Future<_i22.ProcessResult>.value(
              _i29.dummyValue<_i22.ProcessResult>(
                this,
                Invocation.method(
                  #run,
                  [command],
                  {
                    #workingDirectory: workingDirectory,
                    #environment: environment,
                    #includeParentEnvironment: includeParentEnvironment,
                    #runInShell: runInShell,
                    #stdoutEncoding: stdoutEncoding,
                    #stderrEncoding: stderrEncoding,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i22.ProcessResult>);

  @override
  _i22.ProcessResult runSync(
    List<Object>? command, {
    String? workingDirectory,
    Map<String, String>? environment,
    bool? includeParentEnvironment = true,
    bool? runInShell = false,
    _i23.Encoding? stdoutEncoding = const _i22.SystemEncoding(),
    _i23.Encoding? stderrEncoding = const _i22.SystemEncoding(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runSync,
              [command],
              {
                #workingDirectory: workingDirectory,
                #environment: environment,
                #includeParentEnvironment: includeParentEnvironment,
                #runInShell: runInShell,
                #stdoutEncoding: stdoutEncoding,
                #stderrEncoding: stderrEncoding,
              },
            ),
            returnValue: _i29.dummyValue<_i22.ProcessResult>(
              this,
              Invocation.method(
                #runSync,
                [command],
                {
                  #workingDirectory: workingDirectory,
                  #environment: environment,
                  #includeParentEnvironment: includeParentEnvironment,
                  #runInShell: runInShell,
                  #stdoutEncoding: stdoutEncoding,
                  #stderrEncoding: stderrEncoding,
                },
              ),
            ),
          )
          as _i22.ProcessResult);

  @override
  bool canRun(dynamic executable, {String? workingDirectory}) =>
      (super.noSuchMethod(
            Invocation.method(
              #canRun,
              [executable],
              {#workingDirectory: workingDirectory},
            ),
            returnValue: false,
          )
          as bool);

  @override
  bool killPid(
    int? pid, [
    _i22.ProcessSignal? signal = _i22.ProcessSignal.sigterm,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#killPid, [pid, signal]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [SearchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchService extends _i1.Mock implements _i12.SearchService {
  MockSearchService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GitHub get github =>
      (super.noSuchMethod(
            Invocation.getter(#github),
            returnValue: _FakeGitHub_15(this, Invocation.getter(#github)),
          )
          as _i12.GitHub);

  @override
  _i17.Stream<_i12.Repository> repositories(
    String? query, {
    String? sort,
    int? pages = 2,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #repositories,
              [query],
              {#sort: sort, #pages: pages},
            ),
            returnValue: _i17.Stream<_i12.Repository>.empty(),
          )
          as _i17.Stream<_i12.Repository>);

  @override
  _i17.Stream<_i12.CodeSearchResults> code(
    String? query, {
    int? pages,
    int? perPage,
    String? language,
    String? filename,
    String? extension,
    String? user,
    String? org,
    String? repo,
    String? fork,
    String? path,
    String? size,
    bool? inFile = true,
    bool? inPath = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #code,
              [query],
              {
                #pages: pages,
                #perPage: perPage,
                #language: language,
                #filename: filename,
                #extension: extension,
                #user: user,
                #org: org,
                #repo: repo,
                #fork: fork,
                #path: path,
                #size: size,
                #inFile: inFile,
                #inPath: inPath,
              },
            ),
            returnValue: _i17.Stream<_i12.CodeSearchResults>.empty(),
          )
          as _i17.Stream<_i12.CodeSearchResults>);

  @override
  _i17.Stream<_i12.Issue> issues(
    String? query, {
    String? sort,
    int? pages = 2,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#issues, [query], {#sort: sort, #pages: pages}),
            returnValue: _i17.Stream<_i12.Issue>.empty(),
          )
          as _i17.Stream<_i12.Issue>);

  @override
  _i17.Stream<_i12.User> users(
    String? query, {
    String? sort,
    int? pages = 2,
    int? perPage = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #users,
              [query],
              {#sort: sort, #pages: pages, #perPage: perPage},
            ),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);
}

/// A class which mocks [TabledataResource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTabledataResource extends _i1.Mock implements _i5.TabledataResource {
  MockTabledataResource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i5.TableDataInsertAllResponse> insertAll(
    _i5.TableDataInsertAllRequest? request,
    String? projectId,
    String? datasetId,
    String? tableId, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #insertAll,
              [request, projectId, datasetId, tableId],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i5.TableDataInsertAllResponse>.value(
              _FakeTableDataInsertAllResponse_64(
                this,
                Invocation.method(
                  #insertAll,
                  [request, projectId, datasetId, tableId],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i5.TableDataInsertAllResponse>);

  @override
  _i17.Future<_i5.TableDataList> list(
    String? projectId,
    String? datasetId,
    String? tableId, {
    bool? formatOptions_useInt64Timestamp,
    int? maxResults,
    String? pageToken,
    String? selectedFields,
    String? startIndex,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #list,
              [projectId, datasetId, tableId],
              {
                #formatOptions_useInt64Timestamp:
                    formatOptions_useInt64Timestamp,
                #maxResults: maxResults,
                #pageToken: pageToken,
                #selectedFields: selectedFields,
                #startIndex: startIndex,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i5.TableDataList>.value(
              _FakeTableDataList_65(
                this,
                Invocation.method(
                  #list,
                  [projectId, datasetId, tableId],
                  {
                    #formatOptions_useInt64Timestamp:
                        formatOptions_useInt64Timestamp,
                    #maxResults: maxResults,
                    #pageToken: pageToken,
                    #selectedFields: selectedFields,
                    #startIndex: startIndex,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i5.TableDataList>);
}

/// A class which mocks [UsersService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersService extends _i1.Mock implements _i12.UsersService {
  MockUsersService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GitHub get github =>
      (super.noSuchMethod(
            Invocation.getter(#github),
            returnValue: _FakeGitHub_15(this, Invocation.getter(#github)),
          )
          as _i12.GitHub);

  @override
  _i17.Future<_i12.User> getUser(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#getUser, [name]),
            returnValue: _i17.Future<_i12.User>.value(
              _FakeUser_66(this, Invocation.method(#getUser, [name])),
            ),
          )
          as _i17.Future<_i12.User>);

  @override
  _i17.Future<_i12.CurrentUser> editCurrentUser({
    String? name,
    String? email,
    String? blog,
    String? company,
    String? location,
    bool? hireable,
    String? bio,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#editCurrentUser, [], {
              #name: name,
              #email: email,
              #blog: blog,
              #company: company,
              #location: location,
              #hireable: hireable,
              #bio: bio,
            }),
            returnValue: _i17.Future<_i12.CurrentUser>.value(
              _FakeCurrentUser_67(
                this,
                Invocation.method(#editCurrentUser, [], {
                  #name: name,
                  #email: email,
                  #blog: blog,
                  #company: company,
                  #location: location,
                  #hireable: hireable,
                  #bio: bio,
                }),
              ),
            ),
          )
          as _i17.Future<_i12.CurrentUser>);

  @override
  _i17.Stream<_i12.User> getUsers(List<String>? names, {int? pages}) =>
      (super.noSuchMethod(
            Invocation.method(#getUsers, [names], {#pages: pages}),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);

  @override
  _i17.Future<_i12.CurrentUser> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i17.Future<_i12.CurrentUser>.value(
              _FakeCurrentUser_67(this, Invocation.method(#getCurrentUser, [])),
            ),
          )
          as _i17.Future<_i12.CurrentUser>);

  @override
  _i17.Future<bool> isUser(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#isUser, [name]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.User> listUsers({int? pages, int? since}) =>
      (super.noSuchMethod(
            Invocation.method(#listUsers, [], {#pages: pages, #since: since}),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);

  @override
  _i17.Stream<_i12.UserEmail> listEmails() =>
      (super.noSuchMethod(
            Invocation.method(#listEmails, []),
            returnValue: _i17.Stream<_i12.UserEmail>.empty(),
          )
          as _i17.Stream<_i12.UserEmail>);

  @override
  _i17.Stream<_i12.UserEmail> addEmails(List<String>? emails) =>
      (super.noSuchMethod(
            Invocation.method(#addEmails, [emails]),
            returnValue: _i17.Stream<_i12.UserEmail>.empty(),
          )
          as _i17.Stream<_i12.UserEmail>);

  @override
  _i17.Future<bool> deleteEmails(List<String>? emails) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEmails, [emails]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.User> listUserFollowers(String? user) =>
      (super.noSuchMethod(
            Invocation.method(#listUserFollowers, [user]),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);

  @override
  _i17.Future<bool> isFollowingUser(String? user) =>
      (super.noSuchMethod(
            Invocation.method(#isFollowingUser, [user]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<bool> isUserFollowing(String? user, String? target) =>
      (super.noSuchMethod(
            Invocation.method(#isUserFollowing, [user, target]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<bool> followUser(String? user) =>
      (super.noSuchMethod(
            Invocation.method(#followUser, [user]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Future<bool> unfollowUser(String? user) =>
      (super.noSuchMethod(
            Invocation.method(#unfollowUser, [user]),
            returnValue: _i17.Future<bool>.value(false),
          )
          as _i17.Future<bool>);

  @override
  _i17.Stream<_i12.User> listCurrentUserFollowers() =>
      (super.noSuchMethod(
            Invocation.method(#listCurrentUserFollowers, []),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);

  @override
  _i17.Stream<_i12.User> listCurrentUserFollowing() =>
      (super.noSuchMethod(
            Invocation.method(#listCurrentUserFollowing, []),
            returnValue: _i17.Stream<_i12.User>.empty(),
          )
          as _i17.Stream<_i12.User>);

  @override
  _i17.Stream<_i12.PublicKey> listPublicKeys([String? userLogin]) =>
      (super.noSuchMethod(
            Invocation.method(#listPublicKeys, [userLogin]),
            returnValue: _i17.Stream<_i12.PublicKey>.empty(),
          )
          as _i17.Stream<_i12.PublicKey>);

  @override
  _i17.Future<_i12.PublicKey> createPublicKey(_i12.CreatePublicKey? key) =>
      (super.noSuchMethod(
            Invocation.method(#createPublicKey, [key]),
            returnValue: _i17.Future<_i12.PublicKey>.value(
              _FakePublicKey_68(
                this,
                Invocation.method(#createPublicKey, [key]),
              ),
            ),
          )
          as _i17.Future<_i12.PublicKey>);
}

/// A class which mocks [ProjectsDatabasesDocumentsResource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsDatabasesDocumentsResource extends _i1.Mock
    implements _i18.ProjectsDatabasesDocumentsResource {
  MockProjectsDatabasesDocumentsResource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<List<_i18.BatchGetDocumentsResponseElement>> batchGet(
    _i18.BatchGetDocumentsRequest? request,
    String? database, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #batchGet,
              [request, database],
              {#$fields: $fields},
            ),
            returnValue:
                _i17.Future<List<_i18.BatchGetDocumentsResponseElement>>.value(
                  <_i18.BatchGetDocumentsResponseElement>[],
                ),
          )
          as _i17.Future<List<_i18.BatchGetDocumentsResponseElement>>);

  @override
  _i17.Future<_i18.BatchWriteResponse> batchWrite(
    _i18.BatchWriteRequest? request,
    String? database, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #batchWrite,
              [request, database],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i18.BatchWriteResponse>.value(
              _FakeBatchWriteResponse_23(
                this,
                Invocation.method(
                  #batchWrite,
                  [request, database],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i18.BatchWriteResponse>);

  @override
  _i17.Future<_i18.BeginTransactionResponse> beginTransaction(
    _i18.BeginTransactionRequest? request,
    String? database, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #beginTransaction,
              [request, database],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i18.BeginTransactionResponse>.value(
              _FakeBeginTransactionResponse_69(
                this,
                Invocation.method(
                  #beginTransaction,
                  [request, database],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i18.BeginTransactionResponse>);

  @override
  _i17.Future<_i18.CommitResponse> commit(
    _i18.CommitRequest? request,
    String? database, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #commit,
              [request, database],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i18.CommitResponse>.value(
              _FakeCommitResponse_24(
                this,
                Invocation.method(
                  #commit,
                  [request, database],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i18.CommitResponse>);

  @override
  _i17.Future<_i18.Document> createDocument(
    _i18.Document? request,
    String? parent,
    String? collectionId, {
    String? documentId,
    List<String>? mask_fieldPaths,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #createDocument,
              [request, parent, collectionId],
              {
                #documentId: documentId,
                #mask_fieldPaths: mask_fieldPaths,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i18.Document>.value(
              _FakeDocument_22(
                this,
                Invocation.method(
                  #createDocument,
                  [request, parent, collectionId],
                  {
                    #documentId: documentId,
                    #mask_fieldPaths: mask_fieldPaths,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i18.Document>);

  @override
  _i17.Future<_i25.$Empty> delete(
    String? name, {
    bool? currentDocument_exists,
    String? currentDocument_updateTime,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [name],
              {
                #currentDocument_exists: currentDocument_exists,
                #currentDocument_updateTime: currentDocument_updateTime,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i25.$Empty>.value(
              _Fake$Empty_70(
                this,
                Invocation.method(
                  #delete,
                  [name],
                  {
                    #currentDocument_exists: currentDocument_exists,
                    #currentDocument_updateTime: currentDocument_updateTime,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i25.$Empty>);

  @override
  _i17.Future<_i18.Document> get(
    String? name, {
    List<String>? mask_fieldPaths,
    String? readTime,
    String? transaction,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [name],
              {
                #mask_fieldPaths: mask_fieldPaths,
                #readTime: readTime,
                #transaction: transaction,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i18.Document>.value(
              _FakeDocument_22(
                this,
                Invocation.method(
                  #get,
                  [name],
                  {
                    #mask_fieldPaths: mask_fieldPaths,
                    #readTime: readTime,
                    #transaction: transaction,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i18.Document>);

  @override
  _i17.Future<_i18.ListDocumentsResponse> list(
    String? parent,
    String? collectionId, {
    List<String>? mask_fieldPaths,
    String? orderBy,
    int? pageSize,
    String? pageToken,
    String? readTime,
    bool? showMissing,
    String? transaction,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #list,
              [parent, collectionId],
              {
                #mask_fieldPaths: mask_fieldPaths,
                #orderBy: orderBy,
                #pageSize: pageSize,
                #pageToken: pageToken,
                #readTime: readTime,
                #showMissing: showMissing,
                #transaction: transaction,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i18.ListDocumentsResponse>.value(
              _FakeListDocumentsResponse_71(
                this,
                Invocation.method(
                  #list,
                  [parent, collectionId],
                  {
                    #mask_fieldPaths: mask_fieldPaths,
                    #orderBy: orderBy,
                    #pageSize: pageSize,
                    #pageToken: pageToken,
                    #readTime: readTime,
                    #showMissing: showMissing,
                    #transaction: transaction,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i18.ListDocumentsResponse>);

  @override
  _i17.Future<_i18.ListCollectionIdsResponse> listCollectionIds(
    _i18.ListCollectionIdsRequest? request,
    String? parent, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listCollectionIds,
              [request, parent],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i18.ListCollectionIdsResponse>.value(
              _FakeListCollectionIdsResponse_72(
                this,
                Invocation.method(
                  #listCollectionIds,
                  [request, parent],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i18.ListCollectionIdsResponse>);

  @override
  _i17.Future<_i18.ListDocumentsResponse> listDocuments(
    String? parent,
    String? collectionId, {
    List<String>? mask_fieldPaths,
    String? orderBy,
    int? pageSize,
    String? pageToken,
    String? readTime,
    bool? showMissing,
    String? transaction,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #listDocuments,
              [parent, collectionId],
              {
                #mask_fieldPaths: mask_fieldPaths,
                #orderBy: orderBy,
                #pageSize: pageSize,
                #pageToken: pageToken,
                #readTime: readTime,
                #showMissing: showMissing,
                #transaction: transaction,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i18.ListDocumentsResponse>.value(
              _FakeListDocumentsResponse_71(
                this,
                Invocation.method(
                  #listDocuments,
                  [parent, collectionId],
                  {
                    #mask_fieldPaths: mask_fieldPaths,
                    #orderBy: orderBy,
                    #pageSize: pageSize,
                    #pageToken: pageToken,
                    #readTime: readTime,
                    #showMissing: showMissing,
                    #transaction: transaction,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i18.ListDocumentsResponse>);

  @override
  _i17.Future<_i18.PartitionQueryResponse> partitionQuery(
    _i18.PartitionQueryRequest? request,
    String? parent, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #partitionQuery,
              [request, parent],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i18.PartitionQueryResponse>.value(
              _FakePartitionQueryResponse_73(
                this,
                Invocation.method(
                  #partitionQuery,
                  [request, parent],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i18.PartitionQueryResponse>);

  @override
  _i17.Future<_i18.Document> patch(
    _i18.Document? request,
    String? name, {
    bool? currentDocument_exists,
    String? currentDocument_updateTime,
    List<String>? mask_fieldPaths,
    List<String>? updateMask_fieldPaths,
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [request, name],
              {
                #currentDocument_exists: currentDocument_exists,
                #currentDocument_updateTime: currentDocument_updateTime,
                #mask_fieldPaths: mask_fieldPaths,
                #updateMask_fieldPaths: updateMask_fieldPaths,
                #$fields: $fields,
              },
            ),
            returnValue: _i17.Future<_i18.Document>.value(
              _FakeDocument_22(
                this,
                Invocation.method(
                  #patch,
                  [request, name],
                  {
                    #currentDocument_exists: currentDocument_exists,
                    #currentDocument_updateTime: currentDocument_updateTime,
                    #mask_fieldPaths: mask_fieldPaths,
                    #updateMask_fieldPaths: updateMask_fieldPaths,
                    #$fields: $fields,
                  },
                ),
              ),
            ),
          )
          as _i17.Future<_i18.Document>);

  @override
  _i17.Future<_i25.$Empty> rollback(
    _i18.RollbackRequest? request,
    String? database, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #rollback,
              [request, database],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<_i25.$Empty>.value(
              _Fake$Empty_70(
                this,
                Invocation.method(
                  #rollback,
                  [request, database],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i25.$Empty>);

  @override
  _i17.Future<List<_i18.RunAggregationQueryResponseElement>>
  runAggregationQuery(
    _i18.RunAggregationQueryRequest? request,
    String? parent, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runAggregationQuery,
              [request, parent],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<
              List<_i18.RunAggregationQueryResponseElement>
            >.value(<_i18.RunAggregationQueryResponseElement>[]),
          )
          as _i17.Future<List<_i18.RunAggregationQueryResponseElement>>);

  @override
  _i17.Future<List<_i18.RunQueryResponseElement>> runQuery(
    _i18.RunQueryRequest? request,
    String? parent, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runQuery,
              [request, parent],
              {#$fields: $fields},
            ),
            returnValue: _i17.Future<List<_i18.RunQueryResponseElement>>.value(
              <_i18.RunQueryResponseElement>[],
            ),
          )
          as _i17.Future<List<_i18.RunQueryResponseElement>>);

  @override
  _i17.Future<_i18.WriteResponse> write(
    _i18.WriteRequest? request,
    String? database, {
    String? $fields,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#write, [request, database], {#$fields: $fields}),
            returnValue: _i17.Future<_i18.WriteResponse>.value(
              _FakeWriteResponse_74(
                this,
                Invocation.method(
                  #write,
                  [request, database],
                  {#$fields: $fields},
                ),
              ),
            ),
          )
          as _i17.Future<_i18.WriteResponse>);
}

/// A class which mocks [BeginTransactionResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockBeginTransactionResponse extends _i1.Mock
    implements _i18.BeginTransactionResponse {
  MockBeginTransactionResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set transaction(String? _transaction) => super.noSuchMethod(
    Invocation.setter(#transaction, _transaction),
    returnValueForMissingStub: null,
  );

  @override
  List<int> get transactionAsBytes =>
      (super.noSuchMethod(
            Invocation.getter(#transactionAsBytes),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  set transactionAsBytes(List<int>? bytes_) => super.noSuchMethod(
    Invocation.setter(#transactionAsBytes, bytes_),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [Callbacks].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallbacks extends _i1.Mock implements _i48.Callbacks {
  MockCallbacks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<_i26.StagingConclusion> markCheckRunConclusion({
    required _i14.FirestoreService? firestoreService,
    required _i12.RepositorySlug? slug,
    required String? sha,
    required _i26.CiStage? stage,
    required String? checkRun,
    required String? conclusion,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#markCheckRunConclusion, [], {
              #firestoreService: firestoreService,
              #slug: slug,
              #sha: sha,
              #stage: stage,
              #checkRun: checkRun,
              #conclusion: conclusion,
            }),
            returnValue: _i17.Future<_i26.StagingConclusion>.value(
              _FakeStagingConclusion_75(
                this,
                Invocation.method(#markCheckRunConclusion, [], {
                  #firestoreService: firestoreService,
                  #slug: slug,
                  #sha: sha,
                  #stage: stage,
                  #checkRun: checkRun,
                  #conclusion: conclusion,
                }),
              ),
            ),
          )
          as _i17.Future<_i26.StagingConclusion>);

  @override
  _i17.Future<_i18.Document> initializeDocument({
    required _i14.FirestoreService? firestoreService,
    required _i12.RepositorySlug? slug,
    required String? sha,
    required _i26.CiStage? stage,
    required List<String>? tasks,
    required String? checkRunGuard,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initializeDocument, [], {
              #firestoreService: firestoreService,
              #slug: slug,
              #sha: sha,
              #stage: stage,
              #tasks: tasks,
              #checkRunGuard: checkRunGuard,
            }),
            returnValue: _i17.Future<_i18.Document>.value(
              _FakeDocument_22(
                this,
                Invocation.method(#initializeDocument, [], {
                  #firestoreService: firestoreService,
                  #slug: slug,
                  #sha: sha,
                  #stage: stage,
                  #tasks: tasks,
                  #checkRunGuard: checkRunGuard,
                }),
              ),
            ),
          )
          as _i17.Future<_i18.Document>);

  @override
  _i17.Future<_i18.Document> initializePrCheckRuns({
    required _i14.FirestoreService? firestoreService,
    required _i12.PullRequest? pullRequest,
    required List<_i12.CheckRun>? checks,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initializePrCheckRuns, [], {
              #firestoreService: firestoreService,
              #pullRequest: pullRequest,
              #checks: checks,
            }),
            returnValue: _i17.Future<_i18.Document>.value(
              _FakeDocument_22(
                this,
                Invocation.method(#initializePrCheckRuns, [], {
                  #firestoreService: firestoreService,
                  #pullRequest: pullRequest,
                  #checks: checks,
                }),
              ),
            ),
          )
          as _i17.Future<_i18.Document>);

  @override
  _i17.Future<_i12.PullRequest> findPullRequestFor(
    _i14.FirestoreService? firestoreService,
    int? checkRunId,
    String? checkRunName,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findPullRequestFor, [
              firestoreService,
              checkRunId,
              checkRunName,
            ]),
            returnValue: _i17.Future<_i12.PullRequest>.value(
              _FakePullRequest_38(
                this,
                Invocation.method(#findPullRequestFor, [
                  firestoreService,
                  checkRunId,
                  checkRunName,
                ]),
              ),
            ),
          )
          as _i17.Future<_i12.PullRequest>);

  @override
  _i17.Future<_i12.PullRequest?> findPullRequestForSha(
    _i14.FirestoreService? firestoreService,
    String? sha,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findPullRequestForSha, [firestoreService, sha]),
            returnValue: _i17.Future<_i12.PullRequest?>.value(),
          )
          as _i17.Future<_i12.PullRequest?>);
}

/// A class which mocks [PullRequestLabelProcessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockPullRequestLabelProcessor extends _i1.Mock
    implements _i14.PullRequestLabelProcessor {
  MockPullRequestLabelProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Config get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.Config);

  @override
  _i16.GithubService get githubService =>
      (super.noSuchMethod(
            Invocation.getter(#githubService),
            returnValue: _FakeGithubService_19(
              this,
              Invocation.getter(#githubService),
            ),
          )
          as _i16.GithubService);

  @override
  _i12.PullRequest get pullRequest =>
      (super.noSuchMethod(
            Invocation.getter(#pullRequest),
            returnValue: _FakePullRequest_38(
              this,
              Invocation.getter(#pullRequest),
            ),
          )
          as _i12.PullRequest);

  @override
  _i12.RepositorySlug get slug =>
      (super.noSuchMethod(
            Invocation.getter(#slug),
            returnValue: _FakeRepositorySlug_76(this, Invocation.getter(#slug)),
          )
          as _i12.RepositorySlug);

  @override
  int get prNumber =>
      (super.noSuchMethod(Invocation.getter(#prNumber), returnValue: 0) as int);

  @override
  String get logCrumb =>
      (super.noSuchMethod(
            Invocation.getter(#logCrumb),
            returnValue: _i29.dummyValue<String>(
              this,
              Invocation.getter(#logCrumb),
            ),
          )
          as String);

  @override
  void logInfo(Object? message) => super.noSuchMethod(
    Invocation.method(#logInfo, [message]),
    returnValueForMissingStub: null,
  );

  @override
  void logSevere(Object? message, {Object? error, StackTrace? stackTrace}) =>
      super.noSuchMethod(
        Invocation.method(
          #logSevere,
          [message],
          {#error: error, #stackTrace: stackTrace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<void> processLabels() =>
      (super.noSuchMethod(
            Invocation.method(#processLabels, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);
}

/// A class which mocks [Cache].
///
/// See the documentation for Mockito's code generation for more information.
class MockCache extends _i1.Mock implements _i27.Cache<_i38.Uint8List> {
  MockCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i27.Entry<_i38.Uint8List> operator [](String? key) =>
      (super.noSuchMethod(
            Invocation.method(#[], [key]),
            returnValue: _FakeEntry_77<_i38.Uint8List>(
              this,
              Invocation.method(#[], [key]),
            ),
          )
          as _i27.Entry<_i38.Uint8List>);

  @override
  _i27.Cache<_i38.Uint8List> withPrefix(String? prefix) =>
      (super.noSuchMethod(
            Invocation.method(#withPrefix, [prefix]),
            returnValue: _FakeCache_78<_i38.Uint8List>(
              this,
              Invocation.method(#withPrefix, [prefix]),
            ),
          )
          as _i27.Cache<_i38.Uint8List>);

  @override
  _i27.Cache<S> withCodec<S>(_i23.Codec<S, _i38.Uint8List>? codec) =>
      (super.noSuchMethod(
            Invocation.method(#withCodec, [codec]),
            returnValue: _FakeCache_78<S>(
              this,
              Invocation.method(#withCodec, [codec]),
            ),
          )
          as _i27.Cache<S>);

  @override
  _i27.Cache<_i38.Uint8List> withTTL(Duration? ttl) =>
      (super.noSuchMethod(
            Invocation.method(#withTTL, [ttl]),
            returnValue: _FakeCache_78<_i38.Uint8List>(
              this,
              Invocation.method(#withTTL, [ttl]),
            ),
          )
          as _i27.Cache<_i38.Uint8List>);
}
