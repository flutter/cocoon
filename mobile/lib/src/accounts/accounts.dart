// Copyright (c) 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

import '../providers.dart';

class AccountsPage extends StatefulWidget {
  const AccountsPage();

  @override
  _AccountsPageState createState() => _AccountsPageState();
}

class _AccountsPageState extends State<AccountsPage> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  TextEditingController _githubUsername;
  TextEditingController _githubToken;
  TapGestureRecognizer _tapGestureRecognizer;
  SignInModel _signInModel;

  @override
  void initState() {
    _tapGestureRecognizer = TapGestureRecognizer(debugOwner: this);
    _tapGestureRecognizer.onTap = () {
      launch('https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/');
    };
    _githubUsername = TextEditingController();
    _githubToken = TextEditingController();
    super.initState();
  }

  @override
  void didChangeDependencies() {
    _signInModel = SignInProvider.of(context);
    _signInModel.checkCocoonStatus();
    _signInModel.checkGithubStatus();
    _githubUsername.text = _signInModel.githubUsername;
    _githubToken.text = _signInModel.githubToken;
    super.didChangeDependencies();
  }

  @override
  void dispose() {
    _tapGestureRecognizer.dispose();
    _githubUsername.dispose();
    _githubToken.dispose();
    super.dispose();
  }

  void _handlePressed() {
    if (_signInModel.isSignedIntoGithub) {
      _signInModel.signOutGithub();
      _githubUsername.clear();
      _githubToken.clear();
    } else {
      _signInModel.signIntoGithub(_githubUsername.value.text, _githubToken.value.text);
    }
  }

  bool get _canSaveGithub {
    return (!_signInModel.isSignedIntoGithub &&
            _githubUsername.value.text.isNotEmpty &&
            _githubToken.value.text.isNotEmpty) ||
        _signInModel.isSignedIntoGithub;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: const Text('Settings'),
      ),
      body: SingleChildScrollView(
        child: ListBody(
          children: <Widget>[
            const Padding(
              padding: EdgeInsets.all(16),
              child: Text('Google', style: TextStyle(fontSize: 28)),
            ),
            const Padding(
              padding: EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: Text('This authorization is for flutter team accounts to allow for dashboard '
                  'maintinence. This permits viewing of certain logs and rerunning of dashboard tasks.'),
            ),
            Center(
              child: RaisedButton(
                child: _signInModel.isSignedIntoCocoon ? const Text('Sign out') : const Text('Sign in'),
                onPressed: _signInModel.isSignedIntoCocoon ? _signInModel.signIntoCocoon : _signInModel.signIntoCocoon,
              ),
            ),
            const SizedBox(height: 18),
            const Divider(),
            const SizedBox(height: 18),
            const Padding(
              padding: EdgeInsets.all(16),
              child: Text('Github', style: TextStyle(fontSize: 28)),
            ),
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: Text.rich(
                TextSpan(
                  text: 'This authorization is used to increase the rate limits for requests to the Github API.'
                      ' This allows the application to provide more context to commits in the build dashboard.'
                      ' The access token can be generated by following the instructions at ',
                  children: [
                    TextSpan(
                      text: 'https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/',
                      style: const TextStyle(
                        decoration: TextDecoration.underline,
                      ),
                      recognizer: _tapGestureRecognizer,
                    )
                  ],
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: TextFormField(
                enabled: !_signInModel.isSignedIntoGithub,
                decoration: const InputDecoration(hasFloatingPlaceholder: true, labelText: 'Github Username'),
                autocorrect: false,
                controller: _githubUsername,
                onEditingComplete: () {
                  setState(() {});
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: TextFormField(
                enabled: !_signInModel.isSignedIntoGithub,
                decoration: const InputDecoration(hasFloatingPlaceholder: true, labelText: 'Access token'),
                autocorrect: false,
                obscureText: true,
                controller: _githubToken,
                onEditingComplete: () {
                  setState(() {});
                },
              ),
            ),
            Center(
              child: RaisedButton(
                child: _signInModel.isSignedIntoGithub ? const Text('Reset') : const Text('Update'),
                onPressed: _canSaveGithub ? _handlePressed : null,
              ),
            ),
            const Divider(),
            const Padding(
              padding: EdgeInsets.all(16),
              child: Text('Local Data', style: TextStyle(fontSize: 28)),
            ),
            const Padding(
              padding: EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: Text('This application stores commit, benchmark, and build information locally. '
                  'This may be safely deleted at any time using the controls below.'),
            ),
            const Padding(
              padding: EdgeInsets.fromLTRB(16, 0, 16, 16),
              child: Center(
                child: RaisedButton(
                  child: Text('Clear Data'),
                  onPressed: null,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
